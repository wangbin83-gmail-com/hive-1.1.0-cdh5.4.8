From c246bc1db5fa386e13191f202734ab17a1c80590 Mon Sep 17 00:00:00 2001
From: xzhang <xzhang@xzdt>
Date: Mon, 5 Oct 2015 14:26:56 -0700
Subject: [PATCH 271/275] Revert "HIVE-11835: Type decimal(1,1) reads 0.0,
 0.00, etc from text file as NULL (Reviewed by
 Szehon)"

This reverts commit 80e27f2d7d1550d637b571021c2b7767f1b6ed27.
---
 .../hadoop/hive/common/type/HiveDecimal.java       |   10 +-
 .../hadoop/hive/common/type/TestHiveDecimal.java   |   12 +--
 .../test/resources/testconfiguration.properties    |    1 -
 ql/src/test/queries/clientpositive/decimal_1_1.q   |    9 --
 .../test/results/clientpositive/decimal_1_1.q.out  |  104 --------------------
 .../results/clientpositive/spark/decimal_1_1.q.out |  104 --------------------
 6 files changed, 7 insertions(+), 233 deletions(-)
 delete mode 100644 ql/src/test/queries/clientpositive/decimal_1_1.q
 delete mode 100644 ql/src/test/results/clientpositive/decimal_1_1.q.out
 delete mode 100644 ql/src/test/results/clientpositive/spark/decimal_1_1.q.out

diff --git a/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java b/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java
index d3d0351..a8215f2 100644
--- a/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java
+++ b/common/src/java/org/apache/hadoop/hive/common/type/HiveDecimal.java
@@ -271,19 +271,11 @@ private static BigDecimal normalize(BigDecimal bd, boolean allowRounding) {
     return bd;
   }
 
-  private static BigDecimal enforcePrecisionScale(BigDecimal bd, int maxPrecision, int maxScale) {
+  public static BigDecimal enforcePrecisionScale(BigDecimal bd, int maxPrecision, int maxScale) {
     if (bd == null) {
       return null;
     }
 
-    /**
-     * Specially handling the case that bd=0, and we are converting it to a type where precision=scale,
-     * such as decimal(1, 1).
-     */
-    if (bd.compareTo(BigDecimal.ZERO) == 0 && bd.scale() == 0 && maxPrecision == maxScale) {
-      return bd.setScale(maxScale);
-    }
-
     bd = trim(bd);
 
     if (bd.scale() > maxScale) {
diff --git a/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java b/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java
index f68842c..ba5ef71 100644
--- a/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java
+++ b/common/src/test/org/apache/hadoop/hive/common/type/TestHiveDecimal.java
@@ -42,15 +42,15 @@ public void testPrecisionScaleEnforcement() {
     Assert.assertTrue("Decimal scale should not go above maximum", dec.scale() <= HiveDecimal.MAX_SCALE);
 
     decStr = "57847525803324040144343378.09799306448796128931113691624";
-    HiveDecimal bd = HiveDecimal.create(decStr);
-    HiveDecimal bd1 = HiveDecimal.enforcePrecisionScale(bd, 20, 5);
+    BigDecimal bd = new BigDecimal(decStr);
+    BigDecimal bd1 = HiveDecimal.enforcePrecisionScale(bd, 20, 5);
     Assert.assertNull(bd1);
     bd1 = HiveDecimal.enforcePrecisionScale(bd, 35, 5);
     Assert.assertEquals("57847525803324040144343378.09799", bd1.toString());
     bd1 = HiveDecimal.enforcePrecisionScale(bd, 45, 20);
     Assert.assertNull(bd1);
 
-    dec = HiveDecimal.create(new BigDecimal(decStr), false);
+    dec = HiveDecimal.create(bd, false);
     Assert.assertNull(dec);
 
     dec = HiveDecimal.create("-1786135888657847525803324040144343378.09799306448796128931113691624");
@@ -65,10 +65,10 @@ public void testPrecisionScaleEnforcement() {
 
     // Rounding numbers that increase int digits
     Assert.assertEquals("10",
-        HiveDecimal.enforcePrecisionScale(HiveDecimal.create("9.5"), 2, 0).toString());
-    Assert.assertNull(HiveDecimal.enforcePrecisionScale(HiveDecimal.create("9.5"), 1, 0));
+        HiveDecimal.enforcePrecisionScale(new BigDecimal("9.5"), 2, 0).toString());
+    Assert.assertNull(HiveDecimal.enforcePrecisionScale(new BigDecimal("9.5"), 1, 0));
     Assert.assertEquals("9",
-        HiveDecimal.enforcePrecisionScale(HiveDecimal.create("9.4"), 1, 0).toString());
+        HiveDecimal.enforcePrecisionScale(new BigDecimal("9.4"), 1, 0).toString());
   }
 
   @Test
diff --git a/itests/src/test/resources/testconfiguration.properties b/itests/src/test/resources/testconfiguration.properties
index 031e75f..6cc50be 100644
--- a/itests/src/test/resources/testconfiguration.properties
+++ b/itests/src/test/resources/testconfiguration.properties
@@ -588,7 +588,6 @@ spark.query.files=add_part_multiple.q, \
   custom_input_output_format.q, \
   date_join1.q, \
   date_udf.q, \
-  decimal_1_1.q, \
   decimal_join.q, \
   disable_merge_for_bucketing.q, \
   enforce_order.q, \
diff --git a/ql/src/test/queries/clientpositive/decimal_1_1.q b/ql/src/test/queries/clientpositive/decimal_1_1.q
deleted file mode 100644
index 83ce521..0000000
--- a/ql/src/test/queries/clientpositive/decimal_1_1.q
+++ /dev/null
@@ -1,9 +0,0 @@
-drop table if exists decimal_1_1;
-
-create table decimal_1_1 (d decimal(1,1));
-load data local inpath '../../data/files/decimal_1_1.txt' into table decimal_1_1;
-select * from decimal_1_1;
-
-select d from decimal_1_1 order by d desc;
-
-drop table decimal_1_1;
diff --git a/ql/src/test/results/clientpositive/decimal_1_1.q.out b/ql/src/test/results/clientpositive/decimal_1_1.q.out
deleted file mode 100644
index b2704c6..0000000
--- a/ql/src/test/results/clientpositive/decimal_1_1.q.out
+++ /dev/null
@@ -1,104 +0,0 @@
-PREHOOK: query: drop table if exists decimal_1_1
-PREHOOK: type: DROPTABLE
-POSTHOOK: query: drop table if exists decimal_1_1
-POSTHOOK: type: DROPTABLE
-PREHOOK: query: create table decimal_1_1 (d decimal(1,1))
-PREHOOK: type: CREATETABLE
-PREHOOK: Output: database:default
-PREHOOK: Output: default@decimal_1_1
-POSTHOOK: query: create table decimal_1_1 (d decimal(1,1))
-POSTHOOK: type: CREATETABLE
-POSTHOOK: Output: database:default
-POSTHOOK: Output: default@decimal_1_1
-PREHOOK: query: load data local inpath '../../data/files/decimal_1_1.txt' into table decimal_1_1
-PREHOOK: type: LOAD
-#### A masked pattern was here ####
-PREHOOK: Output: default@decimal_1_1
-POSTHOOK: query: load data local inpath '../../data/files/decimal_1_1.txt' into table decimal_1_1
-POSTHOOK: type: LOAD
-#### A masked pattern was here ####
-POSTHOOK: Output: default@decimal_1_1
-PREHOOK: query: select * from decimal_1_1
-PREHOOK: type: QUERY
-PREHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-POSTHOOK: query: select * from decimal_1_1
-POSTHOOK: type: QUERY
-POSTHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-0
-0
-0
-0.1
-0.2
-0.9
-0.9
-NULL
-0.3
-NULL
-NULL
-0
-0
-NULL
-0
-0
-0
-0
--0.1
--0.2
--0.9
--0.9
-NULL
--0.3
-NULL
-NULL
-0
-0
-NULL
-0
-PREHOOK: query: select d from decimal_1_1 order by d desc
-PREHOOK: type: QUERY
-PREHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-POSTHOOK: query: select d from decimal_1_1 order by d desc
-POSTHOOK: type: QUERY
-POSTHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-0.9
-0.9
-0.3
-0.2
-0.1
-0
-0
-0
-0
-0
-0
-0
-0
-0
-0
-0
-0
--0.1
--0.2
--0.3
--0.9
--0.9
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-PREHOOK: query: drop table decimal_1_1
-PREHOOK: type: DROPTABLE
-PREHOOK: Input: default@decimal_1_1
-PREHOOK: Output: default@decimal_1_1
-POSTHOOK: query: drop table decimal_1_1
-POSTHOOK: type: DROPTABLE
-POSTHOOK: Input: default@decimal_1_1
-POSTHOOK: Output: default@decimal_1_1
diff --git a/ql/src/test/results/clientpositive/spark/decimal_1_1.q.out b/ql/src/test/results/clientpositive/spark/decimal_1_1.q.out
deleted file mode 100644
index b2704c6..0000000
--- a/ql/src/test/results/clientpositive/spark/decimal_1_1.q.out
+++ /dev/null
@@ -1,104 +0,0 @@
-PREHOOK: query: drop table if exists decimal_1_1
-PREHOOK: type: DROPTABLE
-POSTHOOK: query: drop table if exists decimal_1_1
-POSTHOOK: type: DROPTABLE
-PREHOOK: query: create table decimal_1_1 (d decimal(1,1))
-PREHOOK: type: CREATETABLE
-PREHOOK: Output: database:default
-PREHOOK: Output: default@decimal_1_1
-POSTHOOK: query: create table decimal_1_1 (d decimal(1,1))
-POSTHOOK: type: CREATETABLE
-POSTHOOK: Output: database:default
-POSTHOOK: Output: default@decimal_1_1
-PREHOOK: query: load data local inpath '../../data/files/decimal_1_1.txt' into table decimal_1_1
-PREHOOK: type: LOAD
-#### A masked pattern was here ####
-PREHOOK: Output: default@decimal_1_1
-POSTHOOK: query: load data local inpath '../../data/files/decimal_1_1.txt' into table decimal_1_1
-POSTHOOK: type: LOAD
-#### A masked pattern was here ####
-POSTHOOK: Output: default@decimal_1_1
-PREHOOK: query: select * from decimal_1_1
-PREHOOK: type: QUERY
-PREHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-POSTHOOK: query: select * from decimal_1_1
-POSTHOOK: type: QUERY
-POSTHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-0
-0
-0
-0.1
-0.2
-0.9
-0.9
-NULL
-0.3
-NULL
-NULL
-0
-0
-NULL
-0
-0
-0
-0
--0.1
--0.2
--0.9
--0.9
-NULL
--0.3
-NULL
-NULL
-0
-0
-NULL
-0
-PREHOOK: query: select d from decimal_1_1 order by d desc
-PREHOOK: type: QUERY
-PREHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-POSTHOOK: query: select d from decimal_1_1 order by d desc
-POSTHOOK: type: QUERY
-POSTHOOK: Input: default@decimal_1_1
-#### A masked pattern was here ####
-0.9
-0.9
-0.3
-0.2
-0.1
-0
-0
-0
-0
-0
-0
-0
-0
-0
-0
-0
-0
--0.1
--0.2
--0.3
--0.9
--0.9
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-NULL
-PREHOOK: query: drop table decimal_1_1
-PREHOOK: type: DROPTABLE
-PREHOOK: Input: default@decimal_1_1
-PREHOOK: Output: default@decimal_1_1
-POSTHOOK: query: drop table decimal_1_1
-POSTHOOK: type: DROPTABLE
-POSTHOOK: Input: default@decimal_1_1
-POSTHOOK: Output: default@decimal_1_1
-- 
1.7.9.5

