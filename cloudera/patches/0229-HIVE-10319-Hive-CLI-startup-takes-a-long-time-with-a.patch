From 7c8ccbffb69e827e2cbce1b7f47159ac0fcaaca9 Mon Sep 17 00:00:00 2001
From: Jason Dere <jdere@hortonworks.com>
Date: Mon, 3 Aug 2015 17:51:35 -0700
Subject: [PATCH 229/275] HIVE-10319: Hive CLI startup takes a long time with
 a large number of databases (Nezih Yigitbasi,
 reviewed by Jason Dere)

Conflicts:
	metastore/if/hive_metastore.thrift
	metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
	metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
	metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AbortTxnRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AddDynamicPartitions.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AddPartitionsRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AddPartitionsResult.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AggrStats.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/AlreadyExistsException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/BinaryColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/BooleanColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/CheckLockRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ColumnStatistics.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ColumnStatisticsDesc.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ColumnStatisticsObj.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/CommitTxnRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/CompactionRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ConfigValSecurityException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/CurrentNotificationEventId.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Date.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/DateColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Decimal.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/DecimalColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/DoubleColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/DropPartitionsExpr.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/DropPartitionsRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/DropPartitionsResult.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FieldSchema.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Function.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetOpenTxnsInfoResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetOpenTxnsResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPrincipalsInRoleRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPrincipalsInRoleResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetRoleGrantsForPrincipalRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetRoleGrantsForPrincipalResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GrantRevokePrivilegeRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GrantRevokePrivilegeResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GrantRevokeRoleRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GrantRevokeRoleResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HeartbeatRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HeartbeatTxnRangeRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HeartbeatTxnRangeResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectPrivilege.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/HiveObjectRef.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/IndexAlreadyExistsException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidInputException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidObjectException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidOperationException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InvalidPartitionException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/LockComponent.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/LockRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/LockResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/LongColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/MetaException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchLockException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchObjectException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NoSuchTxnException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NotificationEvent.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NotificationEventRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/NotificationEventResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OpenTxnRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OpenTxnsResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Order.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionListComposingSpec.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionSpec.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionSpecWithSharedSD.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionWithoutSD.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionsByExprRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionsByExprResult.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionsStatsRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PartitionsStatsResult.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeBag.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrivilegeGrantInfo.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ResourceUri.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Role.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/RolePrincipalGrant.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SetPartitionsStatsRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ShowCompactRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ShowCompactResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ShowCompactResponseElement.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ShowLocksRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ShowLocksResponse.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ShowLocksResponseElement.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StringColumnStatsData.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/TableStatsRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/TableStatsResult.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/TxnAbortedException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/TxnInfo.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/TxnOpenException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Type.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownDBException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownPartitionException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnknownTableException.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/UnlockRequest.java
	metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Version.java
	metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
	metastore/src/gen/thrift/gen-php/metastore/Types.php
	metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
	metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
	metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Adjacency.java
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Graph.java
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/QueryPlan.java
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
	ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/test/InnerStruct.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde/test/ThriftTestObj.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/IntString.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MiniStruct.java
	serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/SetIntString.java
	service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveClusterStatus.java
	service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/HiveServerException.java
	service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TArrayTypeEntry.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TBinaryColumn.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TBoolColumn.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TBoolValue.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TByteColumn.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TByteValue.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCLIService.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCancelDelegationTokenReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCancelDelegationTokenResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCancelOperationReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCancelOperationResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCloseOperationReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCloseOperationResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCloseSessionReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCloseSessionResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TColumnDesc.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TDoubleColumn.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TDoubleValue.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TExecuteStatementReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TExecuteStatementResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TFetchResultsReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TFetchResultsResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetCatalogsReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetCatalogsResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetColumnsReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetColumnsResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetDelegationTokenReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetDelegationTokenResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetFunctionsReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetFunctionsResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetInfoReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetInfoResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetOperationStatusReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetOperationStatusResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetResultSetMetadataReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetResultSetMetadataResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetSchemasReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetSchemasResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetTableTypesReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetTableTypesResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetTablesReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetTablesResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetTypeInfoReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TGetTypeInfoResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/THandleIdentifier.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TI16Column.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TI16Value.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TI32Column.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TI32Value.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TI64Column.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TI64Value.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TMapTypeEntry.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOperationHandle.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TPrimitiveTypeEntry.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TRenewDelegationTokenReq.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TRenewDelegationTokenResp.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TRow.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TRowSet.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TSessionHandle.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStatus.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStringColumn.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStringValue.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStructTypeEntry.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTableSchema.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTypeDesc.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTypeQualifiers.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TUnionTypeEntry.java
	service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TUserDefinedTypeEntry.java
	service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote
---
 .../hadoop/hive/metastore/TestHiveMetaStore.java   |   30 +-
 metastore/if/hive_metastore.thrift                 |   28 +
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp | 1954 +++++++------
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.h   |  123 +
 .../ThriftHiveMetastore_server.skeleton.cpp        |    5 +
 .../gen/thrift/gen-cpp/hive_metastore_types.cpp    |  417 +++
 .../src/gen/thrift/gen-cpp/hive_metastore_types.h  |  238 ++
 .../hive/metastore/api/FireEventRequest.java       |  860 ++++++
 .../hive/metastore/api/FireEventRequestData.java   |  305 ++
 .../hive/metastore/api/FireEventResponse.java      |  279 ++
 .../metastore/api/GetAllFunctionsResponse.java     |  443 +++
 .../hive/metastore/api/InsertEventRequestData.java |  437 +++
 .../hadoop/hive/metastore/api/SkewedInfo.java      |    2 +-
 .../hive/metastore/api/ThriftHiveMetastore.java    | 3010 +++++++++++++-------
 .../gen-php/metastore/ThriftHiveMetastore.php      | 1215 ++++----
 .../src/gen/thrift/gen-php/metastore/Types.php     |  508 ++++
 .../hive_metastore/ThriftHiveMetastore-remote      |    7 +
 .../gen-py/hive_metastore/ThriftHiveMetastore.py   |  840 +++---
 .../src/gen/thrift/gen-py/hive_metastore/ttypes.py |  363 +++
 .../src/gen/thrift/gen-rb/hive_metastore_types.rb  |   97 +
 .../src/gen/thrift/gen-rb/thrift_hive_metastore.rb |   60 +
 .../hadoop/hive/metastore/HiveMetaStore.java       |   21 +
 .../hadoop/hive/metastore/HiveMetaStoreClient.java |    7 +
 .../hadoop/hive/metastore/IMetaStoreClient.java    |    4 +
 .../apache/hadoop/hive/metastore/ObjectStore.java  |   28 +
 .../org/apache/hadoop/hive/metastore/RawStore.java |    7 +
 .../metastore/DummyRawStoreControlledCommit.java   |    7 +
 .../metastore/DummyRawStoreForJdoConnection.java   |    6 +
 .../org/apache/hadoop/hive/ql/metadata/Hive.java   |   30 +-
 serde/if/serde.thrift                              |    2 +
 serde/src/gen/thrift/gen-cpp/serde_constants.cpp   |    2 +
 serde/src/gen/thrift/gen-cpp/serde_constants.h     |    1 +
 .../gen-php/org/apache/hadoop/hive/serde/Types.php |    2 +
 .../org_apache_hadoop_hive_serde/constants.py      |    1 +
 serde/src/gen/thrift/gen-rb/serde_constants.rb     |    2 +
 35 files changed, 8531 insertions(+), 2810 deletions(-)
 create mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
 create mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java
 create mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
 create mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java
 create mode 100644 metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
 mode change 100644 => 100755 metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
 mode change 100644 => 100755 service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote
 mode change 100644 => 100755 service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote

diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
index d41704b..d3074ba 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/metastore/TestHiveMetaStore.java
@@ -51,6 +51,7 @@
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
 import org.apache.hadoop.hive.metastore.api.Function;
 import org.apache.hadoop.hive.metastore.api.FunctionType;
+import org.apache.hadoop.hive.metastore.api.GetAllFunctionsResponse;
 import org.apache.hadoop.hive.metastore.api.InvalidObjectException;
 import org.apache.hadoop.hive.metastore.api.InvalidOperationException;
 import org.apache.hadoop.hive.metastore.api.MetaException;
@@ -2533,6 +2534,7 @@ public void testSimpleFunction() throws Exception {
     String funcName = "test_func";
     String className = "org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper";
     String owner = "test_owner";
+    final int N_FUNCTIONS = 5;
     PrincipalType ownerType = PrincipalType.USER;
     int createTime = (int) (System.currentTimeMillis() / 1000);
     FunctionType funcType = FunctionType.JAVA;
@@ -2542,14 +2544,16 @@ public void testSimpleFunction() throws Exception {
 
       createDb(dbName);
 
-      createFunction(dbName, funcName, className, owner, ownerType, createTime, funcType, null);
+      for (int i = 0; i < N_FUNCTIONS; i++) {
+        createFunction(dbName, funcName + "_" + i, className, owner, ownerType, createTime, funcType, null);
+      }
 
       // Try the different getters
 
       // getFunction()
-      Function func = client.getFunction(dbName, funcName);
+      Function func = client.getFunction(dbName, funcName + "_0");
       assertEquals("function db name", dbName, func.getDbName());
-      assertEquals("function name", funcName, func.getFunctionName());
+      assertEquals("function name", funcName + "_0", func.getFunctionName());
       assertEquals("function class name", className, func.getClassName());
       assertEquals("function owner name", owner, func.getOwnerName());
       assertEquals("function owner type", PrincipalType.USER, func.getOwnerType());
@@ -2566,21 +2570,31 @@ public void testSimpleFunction() throws Exception {
       }
       assertEquals(true, gotException);
 
+      // getAllFunctions()
+      GetAllFunctionsResponse response = client.getAllFunctions();
+      List<Function> allFunctions = response.getFunctions();
+      assertEquals(N_FUNCTIONS, allFunctions.size());
+      assertEquals(funcName + "_3", allFunctions.get(3).getFunctionName());
+
       // getFunctions()
-      List<String> funcs = client.getFunctions(dbName, "*_func");
-      assertEquals(1, funcs.size());
-      assertEquals(funcName, funcs.get(0));
+      List<String> funcs = client.getFunctions(dbName, "*_func_*");
+      assertEquals(N_FUNCTIONS, funcs.size());
+      assertEquals(funcName + "_0", funcs.get(0));
 
       funcs = client.getFunctions(dbName, "nonexistent_func");
       assertEquals(0, funcs.size());
 
       // dropFunction()
-      client.dropFunction(dbName, funcName);
+      for (int i = 0; i < N_FUNCTIONS; i++) {
+        client.dropFunction(dbName, funcName + "_" + i);
+      }
 
       // Confirm that the function is now gone
       funcs = client.getFunctions(dbName, funcName);
       assertEquals(0, funcs.size());
-
+      response = client.getAllFunctions();
+      allFunctions = response.getFunctions();
+      assertEquals(0, allFunctions.size());
     } catch (Exception e) {
       System.err.println(StringUtils.stringifyException(e));
       System.err.println("testConcurrentMetastores() failed.");
diff --git a/metastore/if/hive_metastore.thrift b/metastore/if/hive_metastore.thrift
index 8c50bf8..882d448 100755
--- a/metastore/if/hive_metastore.thrift
+++ b/metastore/if/hive_metastore.thrift
@@ -664,6 +664,32 @@ struct CurrentNotificationEventId {
     1: required i64 eventId,
 }
 
+struct InsertEventRequestData {
+    1: required list<string> filesAdded
+}
+
+union FireEventRequestData {
+    1: InsertEventRequestData insertData
+}
+
+struct FireEventRequest {
+    1: required bool successful,
+    2: required FireEventRequestData data
+    // dbname, tablename, and partition vals are included as optional in the top level event rather than placed in each type of
+    // subevent as I assume they'll be used across most event types.
+    3: optional string dbName,
+    4: optional string tableName,
+    5: optional list<string> partitionVals,
+}
+
+struct FireEventResponse {
+    // NOP for now, this is just a place holder for future responses
+}
+    
+
+struct GetAllFunctionsResponse {
+  1: optional list<Function> functions
+}
 
 exception MetaException {
   1: string message
@@ -1061,6 +1087,8 @@ service ThriftHiveMetastore extends fb303.FacebookService
   Function get_function(1:string dbName, 2:string funcName)
       throws (1:MetaException o1, 2:NoSuchObjectException o2)
 
+  GetAllFunctionsResponse get_all_functions() throws (1:MetaException o1)
+
   //authorization privileges
 
   bool create_role(1:Role role) throws(1:MetaException o1)
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
index 4c0efc6..915fa74 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
@@ -1096,14 +1096,14 @@ uint32_t ThriftHiveMetastore_get_databases_result::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size407;
-            ::apache::thrift::protocol::TType _etype410;
-            xfer += iprot->readListBegin(_etype410, _size407);
-            this->success.resize(_size407);
-            uint32_t _i411;
-            for (_i411 = 0; _i411 < _size407; ++_i411)
+            uint32_t _size425;
+            ::apache::thrift::protocol::TType _etype428;
+            xfer += iprot->readListBegin(_etype428, _size425);
+            this->success.resize(_size425);
+            uint32_t _i429;
+            for (_i429 = 0; _i429 < _size425; ++_i429)
             {
-              xfer += iprot->readString(this->success[_i411]);
+              xfer += iprot->readString(this->success[_i429]);
             }
             xfer += iprot->readListEnd();
           }
@@ -1142,10 +1142,10 @@ uint32_t ThriftHiveMetastore_get_databases_result::write(::apache::thrift::proto
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter412;
-      for (_iter412 = this->success.begin(); _iter412 != this->success.end(); ++_iter412)
+      std::vector<std::string> ::const_iterator _iter430;
+      for (_iter430 = this->success.begin(); _iter430 != this->success.end(); ++_iter430)
       {
-        xfer += oprot->writeString((*_iter412));
+        xfer += oprot->writeString((*_iter430));
       }
       xfer += oprot->writeListEnd();
     }
@@ -1184,14 +1184,14 @@ uint32_t ThriftHiveMetastore_get_databases_presult::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size413;
-            ::apache::thrift::protocol::TType _etype416;
-            xfer += iprot->readListBegin(_etype416, _size413);
-            (*(this->success)).resize(_size413);
-            uint32_t _i417;
-            for (_i417 = 0; _i417 < _size413; ++_i417)
+            uint32_t _size431;
+            ::apache::thrift::protocol::TType _etype434;
+            xfer += iprot->readListBegin(_etype434, _size431);
+            (*(this->success)).resize(_size431);
+            uint32_t _i435;
+            for (_i435 = 0; _i435 < _size431; ++_i435)
             {
-              xfer += iprot->readString((*(this->success))[_i417]);
+              xfer += iprot->readString((*(this->success))[_i435]);
             }
             xfer += iprot->readListEnd();
           }
@@ -1289,14 +1289,14 @@ uint32_t ThriftHiveMetastore_get_all_databases_result::read(::apache::thrift::pr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size418;
-            ::apache::thrift::protocol::TType _etype421;
-            xfer += iprot->readListBegin(_etype421, _size418);
-            this->success.resize(_size418);
-            uint32_t _i422;
-            for (_i422 = 0; _i422 < _size418; ++_i422)
+            uint32_t _size436;
+            ::apache::thrift::protocol::TType _etype439;
+            xfer += iprot->readListBegin(_etype439, _size436);
+            this->success.resize(_size436);
+            uint32_t _i440;
+            for (_i440 = 0; _i440 < _size436; ++_i440)
             {
-              xfer += iprot->readString(this->success[_i422]);
+              xfer += iprot->readString(this->success[_i440]);
             }
             xfer += iprot->readListEnd();
           }
@@ -1335,10 +1335,10 @@ uint32_t ThriftHiveMetastore_get_all_databases_result::write(::apache::thrift::p
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter423;
-      for (_iter423 = this->success.begin(); _iter423 != this->success.end(); ++_iter423)
+      std::vector<std::string> ::const_iterator _iter441;
+      for (_iter441 = this->success.begin(); _iter441 != this->success.end(); ++_iter441)
       {
-        xfer += oprot->writeString((*_iter423));
+        xfer += oprot->writeString((*_iter441));
       }
       xfer += oprot->writeListEnd();
     }
@@ -1377,14 +1377,14 @@ uint32_t ThriftHiveMetastore_get_all_databases_presult::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size424;
-            ::apache::thrift::protocol::TType _etype427;
-            xfer += iprot->readListBegin(_etype427, _size424);
-            (*(this->success)).resize(_size424);
-            uint32_t _i428;
-            for (_i428 = 0; _i428 < _size424; ++_i428)
+            uint32_t _size442;
+            ::apache::thrift::protocol::TType _etype445;
+            xfer += iprot->readListBegin(_etype445, _size442);
+            (*(this->success)).resize(_size442);
+            uint32_t _i446;
+            for (_i446 = 0; _i446 < _size442; ++_i446)
             {
-              xfer += iprot->readString((*(this->success))[_i428]);
+              xfer += iprot->readString((*(this->success))[_i446]);
             }
             xfer += iprot->readListEnd();
           }
@@ -2327,17 +2327,17 @@ uint32_t ThriftHiveMetastore_get_type_all_result::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->success.clear();
-            uint32_t _size429;
-            ::apache::thrift::protocol::TType _ktype430;
-            ::apache::thrift::protocol::TType _vtype431;
-            xfer += iprot->readMapBegin(_ktype430, _vtype431, _size429);
-            uint32_t _i433;
-            for (_i433 = 0; _i433 < _size429; ++_i433)
+            uint32_t _size447;
+            ::apache::thrift::protocol::TType _ktype448;
+            ::apache::thrift::protocol::TType _vtype449;
+            xfer += iprot->readMapBegin(_ktype448, _vtype449, _size447);
+            uint32_t _i451;
+            for (_i451 = 0; _i451 < _size447; ++_i451)
             {
-              std::string _key434;
-              xfer += iprot->readString(_key434);
-              Type& _val435 = this->success[_key434];
-              xfer += _val435.read(iprot);
+              std::string _key452;
+              xfer += iprot->readString(_key452);
+              Type& _val453 = this->success[_key452];
+              xfer += _val453.read(iprot);
             }
             xfer += iprot->readMapEnd();
           }
@@ -2376,11 +2376,11 @@ uint32_t ThriftHiveMetastore_get_type_all_result::write(::apache::thrift::protoc
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
     {
       xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::map<std::string, Type> ::const_iterator _iter436;
-      for (_iter436 = this->success.begin(); _iter436 != this->success.end(); ++_iter436)
+      std::map<std::string, Type> ::const_iterator _iter454;
+      for (_iter454 = this->success.begin(); _iter454 != this->success.end(); ++_iter454)
       {
-        xfer += oprot->writeString(_iter436->first);
-        xfer += _iter436->second.write(oprot);
+        xfer += oprot->writeString(_iter454->first);
+        xfer += _iter454->second.write(oprot);
       }
       xfer += oprot->writeMapEnd();
     }
@@ -2419,17 +2419,17 @@ uint32_t ThriftHiveMetastore_get_type_all_presult::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             (*(this->success)).clear();
-            uint32_t _size437;
-            ::apache::thrift::protocol::TType _ktype438;
-            ::apache::thrift::protocol::TType _vtype439;
-            xfer += iprot->readMapBegin(_ktype438, _vtype439, _size437);
-            uint32_t _i441;
-            for (_i441 = 0; _i441 < _size437; ++_i441)
+            uint32_t _size455;
+            ::apache::thrift::protocol::TType _ktype456;
+            ::apache::thrift::protocol::TType _vtype457;
+            xfer += iprot->readMapBegin(_ktype456, _vtype457, _size455);
+            uint32_t _i459;
+            for (_i459 = 0; _i459 < _size455; ++_i459)
             {
-              std::string _key442;
-              xfer += iprot->readString(_key442);
-              Type& _val443 = (*(this->success))[_key442];
-              xfer += _val443.read(iprot);
+              std::string _key460;
+              xfer += iprot->readString(_key460);
+              Type& _val461 = (*(this->success))[_key460];
+              xfer += _val461.read(iprot);
             }
             xfer += iprot->readMapEnd();
           }
@@ -2564,14 +2564,14 @@ uint32_t ThriftHiveMetastore_get_fields_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size444;
-            ::apache::thrift::protocol::TType _etype447;
-            xfer += iprot->readListBegin(_etype447, _size444);
-            this->success.resize(_size444);
-            uint32_t _i448;
-            for (_i448 = 0; _i448 < _size444; ++_i448)
+            uint32_t _size462;
+            ::apache::thrift::protocol::TType _etype465;
+            xfer += iprot->readListBegin(_etype465, _size462);
+            this->success.resize(_size462);
+            uint32_t _i466;
+            for (_i466 = 0; _i466 < _size462; ++_i466)
             {
-              xfer += this->success[_i448].read(iprot);
+              xfer += this->success[_i466].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -2626,10 +2626,10 @@ uint32_t ThriftHiveMetastore_get_fields_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<FieldSchema> ::const_iterator _iter449;
-      for (_iter449 = this->success.begin(); _iter449 != this->success.end(); ++_iter449)
+      std::vector<FieldSchema> ::const_iterator _iter467;
+      for (_iter467 = this->success.begin(); _iter467 != this->success.end(); ++_iter467)
       {
-        xfer += (*_iter449).write(oprot);
+        xfer += (*_iter467).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -2676,14 +2676,14 @@ uint32_t ThriftHiveMetastore_get_fields_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size450;
-            ::apache::thrift::protocol::TType _etype453;
-            xfer += iprot->readListBegin(_etype453, _size450);
-            (*(this->success)).resize(_size450);
-            uint32_t _i454;
-            for (_i454 = 0; _i454 < _size450; ++_i454)
+            uint32_t _size468;
+            ::apache::thrift::protocol::TType _etype471;
+            xfer += iprot->readListBegin(_etype471, _size468);
+            (*(this->success)).resize(_size468);
+            uint32_t _i472;
+            for (_i472 = 0; _i472 < _size468; ++_i472)
             {
-              xfer += (*(this->success))[_i454].read(iprot);
+              xfer += (*(this->success))[_i472].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -2834,14 +2834,14 @@ uint32_t ThriftHiveMetastore_get_schema_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size455;
-            ::apache::thrift::protocol::TType _etype458;
-            xfer += iprot->readListBegin(_etype458, _size455);
-            this->success.resize(_size455);
-            uint32_t _i459;
-            for (_i459 = 0; _i459 < _size455; ++_i459)
+            uint32_t _size473;
+            ::apache::thrift::protocol::TType _etype476;
+            xfer += iprot->readListBegin(_etype476, _size473);
+            this->success.resize(_size473);
+            uint32_t _i477;
+            for (_i477 = 0; _i477 < _size473; ++_i477)
             {
-              xfer += this->success[_i459].read(iprot);
+              xfer += this->success[_i477].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -2896,10 +2896,10 @@ uint32_t ThriftHiveMetastore_get_schema_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<FieldSchema> ::const_iterator _iter460;
-      for (_iter460 = this->success.begin(); _iter460 != this->success.end(); ++_iter460)
+      std::vector<FieldSchema> ::const_iterator _iter478;
+      for (_iter478 = this->success.begin(); _iter478 != this->success.end(); ++_iter478)
       {
-        xfer += (*_iter460).write(oprot);
+        xfer += (*_iter478).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -2946,14 +2946,14 @@ uint32_t ThriftHiveMetastore_get_schema_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size461;
-            ::apache::thrift::protocol::TType _etype464;
-            xfer += iprot->readListBegin(_etype464, _size461);
-            (*(this->success)).resize(_size461);
-            uint32_t _i465;
-            for (_i465 = 0; _i465 < _size461; ++_i465)
+            uint32_t _size479;
+            ::apache::thrift::protocol::TType _etype482;
+            xfer += iprot->readListBegin(_etype482, _size479);
+            (*(this->success)).resize(_size479);
+            uint32_t _i483;
+            for (_i483 = 0; _i483 < _size479; ++_i483)
             {
-              xfer += (*(this->success))[_i465].read(iprot);
+              xfer += (*(this->success))[_i483].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4008,14 +4008,14 @@ uint32_t ThriftHiveMetastore_get_tables_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size466;
-            ::apache::thrift::protocol::TType _etype469;
-            xfer += iprot->readListBegin(_etype469, _size466);
-            this->success.resize(_size466);
-            uint32_t _i470;
-            for (_i470 = 0; _i470 < _size466; ++_i470)
+            uint32_t _size484;
+            ::apache::thrift::protocol::TType _etype487;
+            xfer += iprot->readListBegin(_etype487, _size484);
+            this->success.resize(_size484);
+            uint32_t _i488;
+            for (_i488 = 0; _i488 < _size484; ++_i488)
             {
-              xfer += iprot->readString(this->success[_i470]);
+              xfer += iprot->readString(this->success[_i488]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4054,10 +4054,10 @@ uint32_t ThriftHiveMetastore_get_tables_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter471;
-      for (_iter471 = this->success.begin(); _iter471 != this->success.end(); ++_iter471)
+      std::vector<std::string> ::const_iterator _iter489;
+      for (_iter489 = this->success.begin(); _iter489 != this->success.end(); ++_iter489)
       {
-        xfer += oprot->writeString((*_iter471));
+        xfer += oprot->writeString((*_iter489));
       }
       xfer += oprot->writeListEnd();
     }
@@ -4096,14 +4096,14 @@ uint32_t ThriftHiveMetastore_get_tables_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size472;
-            ::apache::thrift::protocol::TType _etype475;
-            xfer += iprot->readListBegin(_etype475, _size472);
-            (*(this->success)).resize(_size472);
-            uint32_t _i476;
-            for (_i476 = 0; _i476 < _size472; ++_i476)
+            uint32_t _size490;
+            ::apache::thrift::protocol::TType _etype493;
+            xfer += iprot->readListBegin(_etype493, _size490);
+            (*(this->success)).resize(_size490);
+            uint32_t _i494;
+            for (_i494 = 0; _i494 < _size490; ++_i494)
             {
-              xfer += iprot->readString((*(this->success))[_i476]);
+              xfer += iprot->readString((*(this->success))[_i494]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4222,14 +4222,14 @@ uint32_t ThriftHiveMetastore_get_all_tables_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size477;
-            ::apache::thrift::protocol::TType _etype480;
-            xfer += iprot->readListBegin(_etype480, _size477);
-            this->success.resize(_size477);
-            uint32_t _i481;
-            for (_i481 = 0; _i481 < _size477; ++_i481)
+            uint32_t _size495;
+            ::apache::thrift::protocol::TType _etype498;
+            xfer += iprot->readListBegin(_etype498, _size495);
+            this->success.resize(_size495);
+            uint32_t _i499;
+            for (_i499 = 0; _i499 < _size495; ++_i499)
             {
-              xfer += iprot->readString(this->success[_i481]);
+              xfer += iprot->readString(this->success[_i499]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4268,10 +4268,10 @@ uint32_t ThriftHiveMetastore_get_all_tables_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter482;
-      for (_iter482 = this->success.begin(); _iter482 != this->success.end(); ++_iter482)
+      std::vector<std::string> ::const_iterator _iter500;
+      for (_iter500 = this->success.begin(); _iter500 != this->success.end(); ++_iter500)
       {
-        xfer += oprot->writeString((*_iter482));
+        xfer += oprot->writeString((*_iter500));
       }
       xfer += oprot->writeListEnd();
     }
@@ -4310,14 +4310,14 @@ uint32_t ThriftHiveMetastore_get_all_tables_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size483;
-            ::apache::thrift::protocol::TType _etype486;
-            xfer += iprot->readListBegin(_etype486, _size483);
-            (*(this->success)).resize(_size483);
-            uint32_t _i487;
-            for (_i487 = 0; _i487 < _size483; ++_i487)
+            uint32_t _size501;
+            ::apache::thrift::protocol::TType _etype504;
+            xfer += iprot->readListBegin(_etype504, _size501);
+            (*(this->success)).resize(_size501);
+            uint32_t _i505;
+            for (_i505 = 0; _i505 < _size501; ++_i505)
             {
-              xfer += iprot->readString((*(this->success))[_i487]);
+              xfer += iprot->readString((*(this->success))[_i505]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4596,14 +4596,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_args::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->tbl_names.clear();
-            uint32_t _size488;
-            ::apache::thrift::protocol::TType _etype491;
-            xfer += iprot->readListBegin(_etype491, _size488);
-            this->tbl_names.resize(_size488);
-            uint32_t _i492;
-            for (_i492 = 0; _i492 < _size488; ++_i492)
+            uint32_t _size506;
+            ::apache::thrift::protocol::TType _etype509;
+            xfer += iprot->readListBegin(_etype509, _size506);
+            this->tbl_names.resize(_size506);
+            uint32_t _i510;
+            for (_i510 = 0; _i510 < _size506; ++_i510)
             {
-              xfer += iprot->readString(this->tbl_names[_i492]);
+              xfer += iprot->readString(this->tbl_names[_i510]);
             }
             xfer += iprot->readListEnd();
           }
@@ -4635,10 +4635,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_args::write(::apache::thr
   xfer += oprot->writeFieldBegin("tbl_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tbl_names.size()));
-    std::vector<std::string> ::const_iterator _iter493;
-    for (_iter493 = this->tbl_names.begin(); _iter493 != this->tbl_names.end(); ++_iter493)
+    std::vector<std::string> ::const_iterator _iter511;
+    for (_iter511 = this->tbl_names.begin(); _iter511 != this->tbl_names.end(); ++_iter511)
     {
-      xfer += oprot->writeString((*_iter493));
+      xfer += oprot->writeString((*_iter511));
     }
     xfer += oprot->writeListEnd();
   }
@@ -4660,10 +4660,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_pargs::write(::apache::th
   xfer += oprot->writeFieldBegin("tbl_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->tbl_names)).size()));
-    std::vector<std::string> ::const_iterator _iter494;
-    for (_iter494 = (*(this->tbl_names)).begin(); _iter494 != (*(this->tbl_names)).end(); ++_iter494)
+    std::vector<std::string> ::const_iterator _iter512;
+    for (_iter512 = (*(this->tbl_names)).begin(); _iter512 != (*(this->tbl_names)).end(); ++_iter512)
     {
-      xfer += oprot->writeString((*_iter494));
+      xfer += oprot->writeString((*_iter512));
     }
     xfer += oprot->writeListEnd();
   }
@@ -4698,14 +4698,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_result::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size495;
-            ::apache::thrift::protocol::TType _etype498;
-            xfer += iprot->readListBegin(_etype498, _size495);
-            this->success.resize(_size495);
-            uint32_t _i499;
-            for (_i499 = 0; _i499 < _size495; ++_i499)
+            uint32_t _size513;
+            ::apache::thrift::protocol::TType _etype516;
+            xfer += iprot->readListBegin(_etype516, _size513);
+            this->success.resize(_size513);
+            uint32_t _i517;
+            for (_i517 = 0; _i517 < _size513; ++_i517)
             {
-              xfer += this->success[_i499].read(iprot);
+              xfer += this->success[_i517].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4760,10 +4760,10 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_result::write(::apache::t
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Table> ::const_iterator _iter500;
-      for (_iter500 = this->success.begin(); _iter500 != this->success.end(); ++_iter500)
+      std::vector<Table> ::const_iterator _iter518;
+      for (_iter518 = this->success.begin(); _iter518 != this->success.end(); ++_iter518)
       {
-        xfer += (*_iter500).write(oprot);
+        xfer += (*_iter518).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -4810,14 +4810,14 @@ uint32_t ThriftHiveMetastore_get_table_objects_by_name_presult::read(::apache::t
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size501;
-            ::apache::thrift::protocol::TType _etype504;
-            xfer += iprot->readListBegin(_etype504, _size501);
-            (*(this->success)).resize(_size501);
-            uint32_t _i505;
-            for (_i505 = 0; _i505 < _size501; ++_i505)
+            uint32_t _size519;
+            ::apache::thrift::protocol::TType _etype522;
+            xfer += iprot->readListBegin(_etype522, _size519);
+            (*(this->success)).resize(_size519);
+            uint32_t _i523;
+            for (_i523 = 0; _i523 < _size519; ++_i523)
             {
-              xfer += (*(this->success))[_i505].read(iprot);
+              xfer += (*(this->success))[_i523].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -4984,14 +4984,14 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_result::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size506;
-            ::apache::thrift::protocol::TType _etype509;
-            xfer += iprot->readListBegin(_etype509, _size506);
-            this->success.resize(_size506);
-            uint32_t _i510;
-            for (_i510 = 0; _i510 < _size506; ++_i510)
+            uint32_t _size524;
+            ::apache::thrift::protocol::TType _etype527;
+            xfer += iprot->readListBegin(_etype527, _size524);
+            this->success.resize(_size524);
+            uint32_t _i528;
+            for (_i528 = 0; _i528 < _size524; ++_i528)
             {
-              xfer += iprot->readString(this->success[_i510]);
+              xfer += iprot->readString(this->success[_i528]);
             }
             xfer += iprot->readListEnd();
           }
@@ -5046,10 +5046,10 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_result::write(::apache::t
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter511;
-      for (_iter511 = this->success.begin(); _iter511 != this->success.end(); ++_iter511)
+      std::vector<std::string> ::const_iterator _iter529;
+      for (_iter529 = this->success.begin(); _iter529 != this->success.end(); ++_iter529)
       {
-        xfer += oprot->writeString((*_iter511));
+        xfer += oprot->writeString((*_iter529));
       }
       xfer += oprot->writeListEnd();
     }
@@ -5096,14 +5096,14 @@ uint32_t ThriftHiveMetastore_get_table_names_by_filter_presult::read(::apache::t
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size512;
-            ::apache::thrift::protocol::TType _etype515;
-            xfer += iprot->readListBegin(_etype515, _size512);
-            (*(this->success)).resize(_size512);
-            uint32_t _i516;
-            for (_i516 = 0; _i516 < _size512; ++_i516)
+            uint32_t _size530;
+            ::apache::thrift::protocol::TType _etype533;
+            xfer += iprot->readListBegin(_etype533, _size530);
+            (*(this->success)).resize(_size530);
+            uint32_t _i534;
+            for (_i534 = 0; _i534 < _size530; ++_i534)
             {
-              xfer += iprot->readString((*(this->success))[_i516]);
+              xfer += iprot->readString((*(this->success))[_i534]);
             }
             xfer += iprot->readListEnd();
           }
@@ -6306,14 +6306,14 @@ uint32_t ThriftHiveMetastore_add_partitions_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size517;
-            ::apache::thrift::protocol::TType _etype520;
-            xfer += iprot->readListBegin(_etype520, _size517);
-            this->new_parts.resize(_size517);
-            uint32_t _i521;
-            for (_i521 = 0; _i521 < _size517; ++_i521)
+            uint32_t _size535;
+            ::apache::thrift::protocol::TType _etype538;
+            xfer += iprot->readListBegin(_etype538, _size535);
+            this->new_parts.resize(_size535);
+            uint32_t _i539;
+            for (_i539 = 0; _i539 < _size535; ++_i539)
             {
-              xfer += this->new_parts[_i521].read(iprot);
+              xfer += this->new_parts[_i539].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -6341,10 +6341,10 @@ uint32_t ThriftHiveMetastore_add_partitions_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<Partition> ::const_iterator _iter522;
-    for (_iter522 = this->new_parts.begin(); _iter522 != this->new_parts.end(); ++_iter522)
+    std::vector<Partition> ::const_iterator _iter540;
+    for (_iter540 = this->new_parts.begin(); _iter540 != this->new_parts.end(); ++_iter540)
     {
-      xfer += (*_iter522).write(oprot);
+      xfer += (*_iter540).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6362,10 +6362,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<Partition> ::const_iterator _iter523;
-    for (_iter523 = (*(this->new_parts)).begin(); _iter523 != (*(this->new_parts)).end(); ++_iter523)
+    std::vector<Partition> ::const_iterator _iter541;
+    for (_iter541 = (*(this->new_parts)).begin(); _iter541 != (*(this->new_parts)).end(); ++_iter541)
     {
-      xfer += (*_iter523).write(oprot);
+      xfer += (*_iter541).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6556,14 +6556,14 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_args::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size524;
-            ::apache::thrift::protocol::TType _etype527;
-            xfer += iprot->readListBegin(_etype527, _size524);
-            this->new_parts.resize(_size524);
-            uint32_t _i528;
-            for (_i528 = 0; _i528 < _size524; ++_i528)
+            uint32_t _size542;
+            ::apache::thrift::protocol::TType _etype545;
+            xfer += iprot->readListBegin(_etype545, _size542);
+            this->new_parts.resize(_size542);
+            uint32_t _i546;
+            for (_i546 = 0; _i546 < _size542; ++_i546)
             {
-              xfer += this->new_parts[_i528].read(iprot);
+              xfer += this->new_parts[_i546].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -6591,10 +6591,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_args::write(::apache::thrift::
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<PartitionSpec> ::const_iterator _iter529;
-    for (_iter529 = this->new_parts.begin(); _iter529 != this->new_parts.end(); ++_iter529)
+    std::vector<PartitionSpec> ::const_iterator _iter547;
+    for (_iter547 = this->new_parts.begin(); _iter547 != this->new_parts.end(); ++_iter547)
     {
-      xfer += (*_iter529).write(oprot);
+      xfer += (*_iter547).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6612,10 +6612,10 @@ uint32_t ThriftHiveMetastore_add_partitions_pspec_pargs::write(::apache::thrift:
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<PartitionSpec> ::const_iterator _iter530;
-    for (_iter530 = (*(this->new_parts)).begin(); _iter530 != (*(this->new_parts)).end(); ++_iter530)
+    std::vector<PartitionSpec> ::const_iterator _iter548;
+    for (_iter548 = (*(this->new_parts)).begin(); _iter548 != (*(this->new_parts)).end(); ++_iter548)
     {
-      xfer += (*_iter530).write(oprot);
+      xfer += (*_iter548).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -6822,14 +6822,14 @@ uint32_t ThriftHiveMetastore_append_partition_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size531;
-            ::apache::thrift::protocol::TType _etype534;
-            xfer += iprot->readListBegin(_etype534, _size531);
-            this->part_vals.resize(_size531);
-            uint32_t _i535;
-            for (_i535 = 0; _i535 < _size531; ++_i535)
+            uint32_t _size549;
+            ::apache::thrift::protocol::TType _etype552;
+            xfer += iprot->readListBegin(_etype552, _size549);
+            this->part_vals.resize(_size549);
+            uint32_t _i553;
+            for (_i553 = 0; _i553 < _size549; ++_i553)
             {
-              xfer += iprot->readString(this->part_vals[_i535]);
+              xfer += iprot->readString(this->part_vals[_i553]);
             }
             xfer += iprot->readListEnd();
           }
@@ -6865,10 +6865,10 @@ uint32_t ThriftHiveMetastore_append_partition_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter536;
-    for (_iter536 = this->part_vals.begin(); _iter536 != this->part_vals.end(); ++_iter536)
+    std::vector<std::string> ::const_iterator _iter554;
+    for (_iter554 = this->part_vals.begin(); _iter554 != this->part_vals.end(); ++_iter554)
     {
-      xfer += oprot->writeString((*_iter536));
+      xfer += oprot->writeString((*_iter554));
     }
     xfer += oprot->writeListEnd();
   }
@@ -6894,10 +6894,10 @@ uint32_t ThriftHiveMetastore_append_partition_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter537;
-    for (_iter537 = (*(this->part_vals)).begin(); _iter537 != (*(this->part_vals)).end(); ++_iter537)
+    std::vector<std::string> ::const_iterator _iter555;
+    for (_iter555 = (*(this->part_vals)).begin(); _iter555 != (*(this->part_vals)).end(); ++_iter555)
     {
-      xfer += oprot->writeString((*_iter537));
+      xfer += oprot->writeString((*_iter555));
     }
     xfer += oprot->writeListEnd();
   }
@@ -7326,14 +7326,14 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_args::rea
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size538;
-            ::apache::thrift::protocol::TType _etype541;
-            xfer += iprot->readListBegin(_etype541, _size538);
-            this->part_vals.resize(_size538);
-            uint32_t _i542;
-            for (_i542 = 0; _i542 < _size538; ++_i542)
+            uint32_t _size556;
+            ::apache::thrift::protocol::TType _etype559;
+            xfer += iprot->readListBegin(_etype559, _size556);
+            this->part_vals.resize(_size556);
+            uint32_t _i560;
+            for (_i560 = 0; _i560 < _size556; ++_i560)
             {
-              xfer += iprot->readString(this->part_vals[_i542]);
+              xfer += iprot->readString(this->part_vals[_i560]);
             }
             xfer += iprot->readListEnd();
           }
@@ -7377,10 +7377,10 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_args::wri
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter543;
-    for (_iter543 = this->part_vals.begin(); _iter543 != this->part_vals.end(); ++_iter543)
+    std::vector<std::string> ::const_iterator _iter561;
+    for (_iter561 = this->part_vals.begin(); _iter561 != this->part_vals.end(); ++_iter561)
     {
-      xfer += oprot->writeString((*_iter543));
+      xfer += oprot->writeString((*_iter561));
     }
     xfer += oprot->writeListEnd();
   }
@@ -7410,10 +7410,10 @@ uint32_t ThriftHiveMetastore_append_partition_with_environment_context_pargs::wr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter544;
-    for (_iter544 = (*(this->part_vals)).begin(); _iter544 != (*(this->part_vals)).end(); ++_iter544)
+    std::vector<std::string> ::const_iterator _iter562;
+    for (_iter562 = (*(this->part_vals)).begin(); _iter562 != (*(this->part_vals)).end(); ++_iter562)
     {
-      xfer += oprot->writeString((*_iter544));
+      xfer += oprot->writeString((*_iter562));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8148,14 +8148,14 @@ uint32_t ThriftHiveMetastore_drop_partition_args::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size545;
-            ::apache::thrift::protocol::TType _etype548;
-            xfer += iprot->readListBegin(_etype548, _size545);
-            this->part_vals.resize(_size545);
-            uint32_t _i549;
-            for (_i549 = 0; _i549 < _size545; ++_i549)
+            uint32_t _size563;
+            ::apache::thrift::protocol::TType _etype566;
+            xfer += iprot->readListBegin(_etype566, _size563);
+            this->part_vals.resize(_size563);
+            uint32_t _i567;
+            for (_i567 = 0; _i567 < _size563; ++_i567)
             {
-              xfer += iprot->readString(this->part_vals[_i549]);
+              xfer += iprot->readString(this->part_vals[_i567]);
             }
             xfer += iprot->readListEnd();
           }
@@ -8199,10 +8199,10 @@ uint32_t ThriftHiveMetastore_drop_partition_args::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter550;
-    for (_iter550 = this->part_vals.begin(); _iter550 != this->part_vals.end(); ++_iter550)
+    std::vector<std::string> ::const_iterator _iter568;
+    for (_iter568 = this->part_vals.begin(); _iter568 != this->part_vals.end(); ++_iter568)
     {
-      xfer += oprot->writeString((*_iter550));
+      xfer += oprot->writeString((*_iter568));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8232,10 +8232,10 @@ uint32_t ThriftHiveMetastore_drop_partition_pargs::write(::apache::thrift::proto
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter551;
-    for (_iter551 = (*(this->part_vals)).begin(); _iter551 != (*(this->part_vals)).end(); ++_iter551)
+    std::vector<std::string> ::const_iterator _iter569;
+    for (_iter569 = (*(this->part_vals)).begin(); _iter569 != (*(this->part_vals)).end(); ++_iter569)
     {
-      xfer += oprot->writeString((*_iter551));
+      xfer += oprot->writeString((*_iter569));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8426,14 +8426,14 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_args::read(
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size552;
-            ::apache::thrift::protocol::TType _etype555;
-            xfer += iprot->readListBegin(_etype555, _size552);
-            this->part_vals.resize(_size552);
-            uint32_t _i556;
-            for (_i556 = 0; _i556 < _size552; ++_i556)
+            uint32_t _size570;
+            ::apache::thrift::protocol::TType _etype573;
+            xfer += iprot->readListBegin(_etype573, _size570);
+            this->part_vals.resize(_size570);
+            uint32_t _i574;
+            for (_i574 = 0; _i574 < _size570; ++_i574)
             {
-              xfer += iprot->readString(this->part_vals[_i556]);
+              xfer += iprot->readString(this->part_vals[_i574]);
             }
             xfer += iprot->readListEnd();
           }
@@ -8485,10 +8485,10 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_args::write
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter557;
-    for (_iter557 = this->part_vals.begin(); _iter557 != this->part_vals.end(); ++_iter557)
+    std::vector<std::string> ::const_iterator _iter575;
+    for (_iter575 = this->part_vals.begin(); _iter575 != this->part_vals.end(); ++_iter575)
     {
-      xfer += oprot->writeString((*_iter557));
+      xfer += oprot->writeString((*_iter575));
     }
     xfer += oprot->writeListEnd();
   }
@@ -8522,10 +8522,10 @@ uint32_t ThriftHiveMetastore_drop_partition_with_environment_context_pargs::writ
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter558;
-    for (_iter558 = (*(this->part_vals)).begin(); _iter558 != (*(this->part_vals)).end(); ++_iter558)
+    std::vector<std::string> ::const_iterator _iter576;
+    for (_iter576 = (*(this->part_vals)).begin(); _iter576 != (*(this->part_vals)).end(); ++_iter576)
     {
-      xfer += oprot->writeString((*_iter558));
+      xfer += oprot->writeString((*_iter576));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9438,14 +9438,14 @@ uint32_t ThriftHiveMetastore_get_partition_args::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size559;
-            ::apache::thrift::protocol::TType _etype562;
-            xfer += iprot->readListBegin(_etype562, _size559);
-            this->part_vals.resize(_size559);
-            uint32_t _i563;
-            for (_i563 = 0; _i563 < _size559; ++_i563)
+            uint32_t _size577;
+            ::apache::thrift::protocol::TType _etype580;
+            xfer += iprot->readListBegin(_etype580, _size577);
+            this->part_vals.resize(_size577);
+            uint32_t _i581;
+            for (_i581 = 0; _i581 < _size577; ++_i581)
             {
-              xfer += iprot->readString(this->part_vals[_i563]);
+              xfer += iprot->readString(this->part_vals[_i581]);
             }
             xfer += iprot->readListEnd();
           }
@@ -9481,10 +9481,10 @@ uint32_t ThriftHiveMetastore_get_partition_args::write(::apache::thrift::protoco
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter564;
-    for (_iter564 = this->part_vals.begin(); _iter564 != this->part_vals.end(); ++_iter564)
+    std::vector<std::string> ::const_iterator _iter582;
+    for (_iter582 = this->part_vals.begin(); _iter582 != this->part_vals.end(); ++_iter582)
     {
-      xfer += oprot->writeString((*_iter564));
+      xfer += oprot->writeString((*_iter582));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9510,10 +9510,10 @@ uint32_t ThriftHiveMetastore_get_partition_pargs::write(::apache::thrift::protoc
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter565;
-    for (_iter565 = (*(this->part_vals)).begin(); _iter565 != (*(this->part_vals)).end(); ++_iter565)
+    std::vector<std::string> ::const_iterator _iter583;
+    for (_iter583 = (*(this->part_vals)).begin(); _iter583 != (*(this->part_vals)).end(); ++_iter583)
     {
-      xfer += oprot->writeString((*_iter565));
+      xfer += oprot->writeString((*_iter583));
     }
     xfer += oprot->writeListEnd();
   }
@@ -9684,17 +9684,17 @@ uint32_t ThriftHiveMetastore_exchange_partition_args::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->partitionSpecs.clear();
-            uint32_t _size566;
-            ::apache::thrift::protocol::TType _ktype567;
-            ::apache::thrift::protocol::TType _vtype568;
-            xfer += iprot->readMapBegin(_ktype567, _vtype568, _size566);
-            uint32_t _i570;
-            for (_i570 = 0; _i570 < _size566; ++_i570)
+            uint32_t _size584;
+            ::apache::thrift::protocol::TType _ktype585;
+            ::apache::thrift::protocol::TType _vtype586;
+            xfer += iprot->readMapBegin(_ktype585, _vtype586, _size584);
+            uint32_t _i588;
+            for (_i588 = 0; _i588 < _size584; ++_i588)
             {
-              std::string _key571;
-              xfer += iprot->readString(_key571);
-              std::string& _val572 = this->partitionSpecs[_key571];
-              xfer += iprot->readString(_val572);
+              std::string _key589;
+              xfer += iprot->readString(_key589);
+              std::string& _val590 = this->partitionSpecs[_key589];
+              xfer += iprot->readString(_val590);
             }
             xfer += iprot->readMapEnd();
           }
@@ -9754,11 +9754,11 @@ uint32_t ThriftHiveMetastore_exchange_partition_args::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("partitionSpecs", ::apache::thrift::protocol::T_MAP, 1);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionSpecs.size()));
-    std::map<std::string, std::string> ::const_iterator _iter573;
-    for (_iter573 = this->partitionSpecs.begin(); _iter573 != this->partitionSpecs.end(); ++_iter573)
+    std::map<std::string, std::string> ::const_iterator _iter591;
+    for (_iter591 = this->partitionSpecs.begin(); _iter591 != this->partitionSpecs.end(); ++_iter591)
     {
-      xfer += oprot->writeString(_iter573->first);
-      xfer += oprot->writeString(_iter573->second);
+      xfer += oprot->writeString(_iter591->first);
+      xfer += oprot->writeString(_iter591->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -9792,11 +9792,11 @@ uint32_t ThriftHiveMetastore_exchange_partition_pargs::write(::apache::thrift::p
   xfer += oprot->writeFieldBegin("partitionSpecs", ::apache::thrift::protocol::T_MAP, 1);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->partitionSpecs)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter574;
-    for (_iter574 = (*(this->partitionSpecs)).begin(); _iter574 != (*(this->partitionSpecs)).end(); ++_iter574)
+    std::map<std::string, std::string> ::const_iterator _iter592;
+    for (_iter592 = (*(this->partitionSpecs)).begin(); _iter592 != (*(this->partitionSpecs)).end(); ++_iter592)
     {
-      xfer += oprot->writeString(_iter574->first);
-      xfer += oprot->writeString(_iter574->second);
+      xfer += oprot->writeString(_iter592->first);
+      xfer += oprot->writeString(_iter592->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -10039,14 +10039,14 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size575;
-            ::apache::thrift::protocol::TType _etype578;
-            xfer += iprot->readListBegin(_etype578, _size575);
-            this->part_vals.resize(_size575);
-            uint32_t _i579;
-            for (_i579 = 0; _i579 < _size575; ++_i579)
+            uint32_t _size593;
+            ::apache::thrift::protocol::TType _etype596;
+            xfer += iprot->readListBegin(_etype596, _size593);
+            this->part_vals.resize(_size593);
+            uint32_t _i597;
+            for (_i597 = 0; _i597 < _size593; ++_i597)
             {
-              xfer += iprot->readString(this->part_vals[_i579]);
+              xfer += iprot->readString(this->part_vals[_i597]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10067,14 +10067,14 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size580;
-            ::apache::thrift::protocol::TType _etype583;
-            xfer += iprot->readListBegin(_etype583, _size580);
-            this->group_names.resize(_size580);
-            uint32_t _i584;
-            for (_i584 = 0; _i584 < _size580; ++_i584)
+            uint32_t _size598;
+            ::apache::thrift::protocol::TType _etype601;
+            xfer += iprot->readListBegin(_etype601, _size598);
+            this->group_names.resize(_size598);
+            uint32_t _i602;
+            for (_i602 = 0; _i602 < _size598; ++_i602)
             {
-              xfer += iprot->readString(this->group_names[_i584]);
+              xfer += iprot->readString(this->group_names[_i602]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10110,10 +10110,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter585;
-    for (_iter585 = this->part_vals.begin(); _iter585 != this->part_vals.end(); ++_iter585)
+    std::vector<std::string> ::const_iterator _iter603;
+    for (_iter603 = this->part_vals.begin(); _iter603 != this->part_vals.end(); ++_iter603)
     {
-      xfer += oprot->writeString((*_iter585));
+      xfer += oprot->writeString((*_iter603));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10126,10 +10126,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter586;
-    for (_iter586 = this->group_names.begin(); _iter586 != this->group_names.end(); ++_iter586)
+    std::vector<std::string> ::const_iterator _iter604;
+    for (_iter604 = this->group_names.begin(); _iter604 != this->group_names.end(); ++_iter604)
     {
-      xfer += oprot->writeString((*_iter586));
+      xfer += oprot->writeString((*_iter604));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10155,10 +10155,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter587;
-    for (_iter587 = (*(this->part_vals)).begin(); _iter587 != (*(this->part_vals)).end(); ++_iter587)
+    std::vector<std::string> ::const_iterator _iter605;
+    for (_iter605 = (*(this->part_vals)).begin(); _iter605 != (*(this->part_vals)).end(); ++_iter605)
     {
-      xfer += oprot->writeString((*_iter587));
+      xfer += oprot->writeString((*_iter605));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10171,10 +10171,10 @@ uint32_t ThriftHiveMetastore_get_partition_with_auth_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter588;
-    for (_iter588 = (*(this->group_names)).begin(); _iter588 != (*(this->group_names)).end(); ++_iter588)
+    std::vector<std::string> ::const_iterator _iter606;
+    for (_iter606 = (*(this->group_names)).begin(); _iter606 != (*(this->group_names)).end(); ++_iter606)
     {
-      xfer += oprot->writeString((*_iter588));
+      xfer += oprot->writeString((*_iter606));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10677,14 +10677,14 @@ uint32_t ThriftHiveMetastore_get_partitions_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size589;
-            ::apache::thrift::protocol::TType _etype592;
-            xfer += iprot->readListBegin(_etype592, _size589);
-            this->success.resize(_size589);
-            uint32_t _i593;
-            for (_i593 = 0; _i593 < _size589; ++_i593)
+            uint32_t _size607;
+            ::apache::thrift::protocol::TType _etype610;
+            xfer += iprot->readListBegin(_etype610, _size607);
+            this->success.resize(_size607);
+            uint32_t _i611;
+            for (_i611 = 0; _i611 < _size607; ++_i611)
             {
-              xfer += this->success[_i593].read(iprot);
+              xfer += this->success[_i611].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -10731,10 +10731,10 @@ uint32_t ThriftHiveMetastore_get_partitions_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter594;
-      for (_iter594 = this->success.begin(); _iter594 != this->success.end(); ++_iter594)
+      std::vector<Partition> ::const_iterator _iter612;
+      for (_iter612 = this->success.begin(); _iter612 != this->success.end(); ++_iter612)
       {
-        xfer += (*_iter594).write(oprot);
+        xfer += (*_iter612).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -10777,14 +10777,14 @@ uint32_t ThriftHiveMetastore_get_partitions_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size595;
-            ::apache::thrift::protocol::TType _etype598;
-            xfer += iprot->readListBegin(_etype598, _size595);
-            (*(this->success)).resize(_size595);
-            uint32_t _i599;
-            for (_i599 = 0; _i599 < _size595; ++_i599)
+            uint32_t _size613;
+            ::apache::thrift::protocol::TType _etype616;
+            xfer += iprot->readListBegin(_etype616, _size613);
+            (*(this->success)).resize(_size613);
+            uint32_t _i617;
+            for (_i617 = 0; _i617 < _size613; ++_i617)
             {
-              xfer += (*(this->success))[_i599].read(iprot);
+              xfer += (*(this->success))[_i617].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -10877,14 +10877,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_args::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size600;
-            ::apache::thrift::protocol::TType _etype603;
-            xfer += iprot->readListBegin(_etype603, _size600);
-            this->group_names.resize(_size600);
-            uint32_t _i604;
-            for (_i604 = 0; _i604 < _size600; ++_i604)
+            uint32_t _size618;
+            ::apache::thrift::protocol::TType _etype621;
+            xfer += iprot->readListBegin(_etype621, _size618);
+            this->group_names.resize(_size618);
+            uint32_t _i622;
+            for (_i622 = 0; _i622 < _size618; ++_i622)
             {
-              xfer += iprot->readString(this->group_names[_i604]);
+              xfer += iprot->readString(this->group_names[_i622]);
             }
             xfer += iprot->readListEnd();
           }
@@ -10928,10 +10928,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_args::write(::apache::thri
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter605;
-    for (_iter605 = this->group_names.begin(); _iter605 != this->group_names.end(); ++_iter605)
+    std::vector<std::string> ::const_iterator _iter623;
+    for (_iter623 = this->group_names.begin(); _iter623 != this->group_names.end(); ++_iter623)
     {
-      xfer += oprot->writeString((*_iter605));
+      xfer += oprot->writeString((*_iter623));
     }
     xfer += oprot->writeListEnd();
   }
@@ -10965,10 +10965,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_pargs::write(::apache::thr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 5);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter606;
-    for (_iter606 = (*(this->group_names)).begin(); _iter606 != (*(this->group_names)).end(); ++_iter606)
+    std::vector<std::string> ::const_iterator _iter624;
+    for (_iter624 = (*(this->group_names)).begin(); _iter624 != (*(this->group_names)).end(); ++_iter624)
     {
-      xfer += oprot->writeString((*_iter606));
+      xfer += oprot->writeString((*_iter624));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11003,14 +11003,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size607;
-            ::apache::thrift::protocol::TType _etype610;
-            xfer += iprot->readListBegin(_etype610, _size607);
-            this->success.resize(_size607);
-            uint32_t _i611;
-            for (_i611 = 0; _i611 < _size607; ++_i611)
+            uint32_t _size625;
+            ::apache::thrift::protocol::TType _etype628;
+            xfer += iprot->readListBegin(_etype628, _size625);
+            this->success.resize(_size625);
+            uint32_t _i629;
+            for (_i629 = 0; _i629 < _size625; ++_i629)
             {
-              xfer += this->success[_i611].read(iprot);
+              xfer += this->success[_i629].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11057,10 +11057,10 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter612;
-      for (_iter612 = this->success.begin(); _iter612 != this->success.end(); ++_iter612)
+      std::vector<Partition> ::const_iterator _iter630;
+      for (_iter630 = this->success.begin(); _iter630 != this->success.end(); ++_iter630)
       {
-        xfer += (*_iter612).write(oprot);
+        xfer += (*_iter630).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11103,14 +11103,14 @@ uint32_t ThriftHiveMetastore_get_partitions_with_auth_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size613;
-            ::apache::thrift::protocol::TType _etype616;
-            xfer += iprot->readListBegin(_etype616, _size613);
-            (*(this->success)).resize(_size613);
-            uint32_t _i617;
-            for (_i617 = 0; _i617 < _size613; ++_i617)
+            uint32_t _size631;
+            ::apache::thrift::protocol::TType _etype634;
+            xfer += iprot->readListBegin(_etype634, _size631);
+            (*(this->success)).resize(_size631);
+            uint32_t _i635;
+            for (_i635 = 0; _i635 < _size631; ++_i635)
             {
-              xfer += (*(this->success))[_i617].read(iprot);
+              xfer += (*(this->success))[_i635].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11269,14 +11269,14 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_result::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size618;
-            ::apache::thrift::protocol::TType _etype621;
-            xfer += iprot->readListBegin(_etype621, _size618);
-            this->success.resize(_size618);
-            uint32_t _i622;
-            for (_i622 = 0; _i622 < _size618; ++_i622)
+            uint32_t _size636;
+            ::apache::thrift::protocol::TType _etype639;
+            xfer += iprot->readListBegin(_etype639, _size636);
+            this->success.resize(_size636);
+            uint32_t _i640;
+            for (_i640 = 0; _i640 < _size636; ++_i640)
             {
-              xfer += this->success[_i622].read(iprot);
+              xfer += this->success[_i640].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11323,10 +11323,10 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_result::write(::apache::thrift
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<PartitionSpec> ::const_iterator _iter623;
-      for (_iter623 = this->success.begin(); _iter623 != this->success.end(); ++_iter623)
+      std::vector<PartitionSpec> ::const_iterator _iter641;
+      for (_iter641 = this->success.begin(); _iter641 != this->success.end(); ++_iter641)
       {
-        xfer += (*_iter623).write(oprot);
+        xfer += (*_iter641).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11369,14 +11369,14 @@ uint32_t ThriftHiveMetastore_get_partitions_pspec_presult::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size624;
-            ::apache::thrift::protocol::TType _etype627;
-            xfer += iprot->readListBegin(_etype627, _size624);
-            (*(this->success)).resize(_size624);
-            uint32_t _i628;
-            for (_i628 = 0; _i628 < _size624; ++_i628)
+            uint32_t _size642;
+            ::apache::thrift::protocol::TType _etype645;
+            xfer += iprot->readListBegin(_etype645, _size642);
+            (*(this->success)).resize(_size642);
+            uint32_t _i646;
+            for (_i646 = 0; _i646 < _size642; ++_i646)
             {
-              xfer += (*(this->success))[_i628].read(iprot);
+              xfer += (*(this->success))[_i646].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11535,14 +11535,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_result::read(::apache::thrift::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size629;
-            ::apache::thrift::protocol::TType _etype632;
-            xfer += iprot->readListBegin(_etype632, _size629);
-            this->success.resize(_size629);
-            uint32_t _i633;
-            for (_i633 = 0; _i633 < _size629; ++_i633)
+            uint32_t _size647;
+            ::apache::thrift::protocol::TType _etype650;
+            xfer += iprot->readListBegin(_etype650, _size647);
+            this->success.resize(_size647);
+            uint32_t _i651;
+            for (_i651 = 0; _i651 < _size647; ++_i651)
             {
-              xfer += iprot->readString(this->success[_i633]);
+              xfer += iprot->readString(this->success[_i651]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11581,10 +11581,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_result::write(::apache::thrift:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter634;
-      for (_iter634 = this->success.begin(); _iter634 != this->success.end(); ++_iter634)
+      std::vector<std::string> ::const_iterator _iter652;
+      for (_iter652 = this->success.begin(); _iter652 != this->success.end(); ++_iter652)
       {
-        xfer += oprot->writeString((*_iter634));
+        xfer += oprot->writeString((*_iter652));
       }
       xfer += oprot->writeListEnd();
     }
@@ -11623,14 +11623,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_presult::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size635;
-            ::apache::thrift::protocol::TType _etype638;
-            xfer += iprot->readListBegin(_etype638, _size635);
-            (*(this->success)).resize(_size635);
-            uint32_t _i639;
-            for (_i639 = 0; _i639 < _size635; ++_i639)
+            uint32_t _size653;
+            ::apache::thrift::protocol::TType _etype656;
+            xfer += iprot->readListBegin(_etype656, _size653);
+            (*(this->success)).resize(_size653);
+            uint32_t _i657;
+            for (_i657 = 0; _i657 < _size653; ++_i657)
             {
-              xfer += iprot->readString((*(this->success))[_i639]);
+              xfer += iprot->readString((*(this->success))[_i657]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11699,14 +11699,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_args::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size640;
-            ::apache::thrift::protocol::TType _etype643;
-            xfer += iprot->readListBegin(_etype643, _size640);
-            this->part_vals.resize(_size640);
-            uint32_t _i644;
-            for (_i644 = 0; _i644 < _size640; ++_i644)
+            uint32_t _size658;
+            ::apache::thrift::protocol::TType _etype661;
+            xfer += iprot->readListBegin(_etype661, _size658);
+            this->part_vals.resize(_size658);
+            uint32_t _i662;
+            for (_i662 = 0; _i662 < _size658; ++_i662)
             {
-              xfer += iprot->readString(this->part_vals[_i644]);
+              xfer += iprot->readString(this->part_vals[_i662]);
             }
             xfer += iprot->readListEnd();
           }
@@ -11750,10 +11750,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_args::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter645;
-    for (_iter645 = this->part_vals.begin(); _iter645 != this->part_vals.end(); ++_iter645)
+    std::vector<std::string> ::const_iterator _iter663;
+    for (_iter663 = this->part_vals.begin(); _iter663 != this->part_vals.end(); ++_iter663)
     {
-      xfer += oprot->writeString((*_iter645));
+      xfer += oprot->writeString((*_iter663));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11783,10 +11783,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_pargs::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter646;
-    for (_iter646 = (*(this->part_vals)).begin(); _iter646 != (*(this->part_vals)).end(); ++_iter646)
+    std::vector<std::string> ::const_iterator _iter664;
+    for (_iter664 = (*(this->part_vals)).begin(); _iter664 != (*(this->part_vals)).end(); ++_iter664)
     {
-      xfer += oprot->writeString((*_iter646));
+      xfer += oprot->writeString((*_iter664));
     }
     xfer += oprot->writeListEnd();
   }
@@ -11825,14 +11825,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_result::read(::apache::thrift::pr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size647;
-            ::apache::thrift::protocol::TType _etype650;
-            xfer += iprot->readListBegin(_etype650, _size647);
-            this->success.resize(_size647);
-            uint32_t _i651;
-            for (_i651 = 0; _i651 < _size647; ++_i651)
+            uint32_t _size665;
+            ::apache::thrift::protocol::TType _etype668;
+            xfer += iprot->readListBegin(_etype668, _size665);
+            this->success.resize(_size665);
+            uint32_t _i669;
+            for (_i669 = 0; _i669 < _size665; ++_i669)
             {
-              xfer += this->success[_i651].read(iprot);
+              xfer += this->success[_i669].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -11879,10 +11879,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_result::write(::apache::thrift::p
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter652;
-      for (_iter652 = this->success.begin(); _iter652 != this->success.end(); ++_iter652)
+      std::vector<Partition> ::const_iterator _iter670;
+      for (_iter670 = this->success.begin(); _iter670 != this->success.end(); ++_iter670)
       {
-        xfer += (*_iter652).write(oprot);
+        xfer += (*_iter670).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -11925,14 +11925,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_presult::read(::apache::thrift::p
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size653;
-            ::apache::thrift::protocol::TType _etype656;
-            xfer += iprot->readListBegin(_etype656, _size653);
-            (*(this->success)).resize(_size653);
-            uint32_t _i657;
-            for (_i657 = 0; _i657 < _size653; ++_i657)
+            uint32_t _size671;
+            ::apache::thrift::protocol::TType _etype674;
+            xfer += iprot->readListBegin(_etype674, _size671);
+            (*(this->success)).resize(_size671);
+            uint32_t _i675;
+            for (_i675 = 0; _i675 < _size671; ++_i675)
             {
-              xfer += (*(this->success))[_i657].read(iprot);
+              xfer += (*(this->success))[_i675].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12009,14 +12009,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size658;
-            ::apache::thrift::protocol::TType _etype661;
-            xfer += iprot->readListBegin(_etype661, _size658);
-            this->part_vals.resize(_size658);
-            uint32_t _i662;
-            for (_i662 = 0; _i662 < _size658; ++_i662)
+            uint32_t _size676;
+            ::apache::thrift::protocol::TType _etype679;
+            xfer += iprot->readListBegin(_etype679, _size676);
+            this->part_vals.resize(_size676);
+            uint32_t _i680;
+            for (_i680 = 0; _i680 < _size676; ++_i680)
             {
-              xfer += iprot->readString(this->part_vals[_i662]);
+              xfer += iprot->readString(this->part_vals[_i680]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12045,14 +12045,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size663;
-            ::apache::thrift::protocol::TType _etype666;
-            xfer += iprot->readListBegin(_etype666, _size663);
-            this->group_names.resize(_size663);
-            uint32_t _i667;
-            for (_i667 = 0; _i667 < _size663; ++_i667)
+            uint32_t _size681;
+            ::apache::thrift::protocol::TType _etype684;
+            xfer += iprot->readListBegin(_etype684, _size681);
+            this->group_names.resize(_size681);
+            uint32_t _i685;
+            for (_i685 = 0; _i685 < _size681; ++_i685)
             {
-              xfer += iprot->readString(this->group_names[_i667]);
+              xfer += iprot->readString(this->group_names[_i685]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12088,10 +12088,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::write(::apache::t
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter668;
-    for (_iter668 = this->part_vals.begin(); _iter668 != this->part_vals.end(); ++_iter668)
+    std::vector<std::string> ::const_iterator _iter686;
+    for (_iter686 = this->part_vals.begin(); _iter686 != this->part_vals.end(); ++_iter686)
     {
-      xfer += oprot->writeString((*_iter668));
+      xfer += oprot->writeString((*_iter686));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12108,10 +12108,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_args::write(::apache::t
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 6);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter669;
-    for (_iter669 = this->group_names.begin(); _iter669 != this->group_names.end(); ++_iter669)
+    std::vector<std::string> ::const_iterator _iter687;
+    for (_iter687 = this->group_names.begin(); _iter687 != this->group_names.end(); ++_iter687)
     {
-      xfer += oprot->writeString((*_iter669));
+      xfer += oprot->writeString((*_iter687));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12137,10 +12137,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_pargs::write(::apache::
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter670;
-    for (_iter670 = (*(this->part_vals)).begin(); _iter670 != (*(this->part_vals)).end(); ++_iter670)
+    std::vector<std::string> ::const_iterator _iter688;
+    for (_iter688 = (*(this->part_vals)).begin(); _iter688 != (*(this->part_vals)).end(); ++_iter688)
     {
-      xfer += oprot->writeString((*_iter670));
+      xfer += oprot->writeString((*_iter688));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12157,10 +12157,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_pargs::write(::apache::
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 6);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter671;
-    for (_iter671 = (*(this->group_names)).begin(); _iter671 != (*(this->group_names)).end(); ++_iter671)
+    std::vector<std::string> ::const_iterator _iter689;
+    for (_iter689 = (*(this->group_names)).begin(); _iter689 != (*(this->group_names)).end(); ++_iter689)
     {
-      xfer += oprot->writeString((*_iter671));
+      xfer += oprot->writeString((*_iter689));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12195,14 +12195,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_result::read(::apache::
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size672;
-            ::apache::thrift::protocol::TType _etype675;
-            xfer += iprot->readListBegin(_etype675, _size672);
-            this->success.resize(_size672);
-            uint32_t _i676;
-            for (_i676 = 0; _i676 < _size672; ++_i676)
+            uint32_t _size690;
+            ::apache::thrift::protocol::TType _etype693;
+            xfer += iprot->readListBegin(_etype693, _size690);
+            this->success.resize(_size690);
+            uint32_t _i694;
+            for (_i694 = 0; _i694 < _size690; ++_i694)
             {
-              xfer += this->success[_i676].read(iprot);
+              xfer += this->success[_i694].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12249,10 +12249,10 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_result::write(::apache:
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter677;
-      for (_iter677 = this->success.begin(); _iter677 != this->success.end(); ++_iter677)
+      std::vector<Partition> ::const_iterator _iter695;
+      for (_iter695 = this->success.begin(); _iter695 != this->success.end(); ++_iter695)
       {
-        xfer += (*_iter677).write(oprot);
+        xfer += (*_iter695).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -12295,14 +12295,14 @@ uint32_t ThriftHiveMetastore_get_partitions_ps_with_auth_presult::read(::apache:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size678;
-            ::apache::thrift::protocol::TType _etype681;
-            xfer += iprot->readListBegin(_etype681, _size678);
-            (*(this->success)).resize(_size678);
-            uint32_t _i682;
-            for (_i682 = 0; _i682 < _size678; ++_i682)
+            uint32_t _size696;
+            ::apache::thrift::protocol::TType _etype699;
+            xfer += iprot->readListBegin(_etype699, _size696);
+            (*(this->success)).resize(_size696);
+            uint32_t _i700;
+            for (_i700 = 0; _i700 < _size696; ++_i700)
             {
-              xfer += (*(this->success))[_i682].read(iprot);
+              xfer += (*(this->success))[_i700].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12379,14 +12379,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_args::read(::apache::thrift:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size683;
-            ::apache::thrift::protocol::TType _etype686;
-            xfer += iprot->readListBegin(_etype686, _size683);
-            this->part_vals.resize(_size683);
-            uint32_t _i687;
-            for (_i687 = 0; _i687 < _size683; ++_i687)
+            uint32_t _size701;
+            ::apache::thrift::protocol::TType _etype704;
+            xfer += iprot->readListBegin(_etype704, _size701);
+            this->part_vals.resize(_size701);
+            uint32_t _i705;
+            for (_i705 = 0; _i705 < _size701; ++_i705)
             {
-              xfer += iprot->readString(this->part_vals[_i687]);
+              xfer += iprot->readString(this->part_vals[_i705]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12430,10 +12430,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_args::write(::apache::thrift
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter688;
-    for (_iter688 = this->part_vals.begin(); _iter688 != this->part_vals.end(); ++_iter688)
+    std::vector<std::string> ::const_iterator _iter706;
+    for (_iter706 = this->part_vals.begin(); _iter706 != this->part_vals.end(); ++_iter706)
     {
-      xfer += oprot->writeString((*_iter688));
+      xfer += oprot->writeString((*_iter706));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12463,10 +12463,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_pargs::write(::apache::thrif
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter689;
-    for (_iter689 = (*(this->part_vals)).begin(); _iter689 != (*(this->part_vals)).end(); ++_iter689)
+    std::vector<std::string> ::const_iterator _iter707;
+    for (_iter707 = (*(this->part_vals)).begin(); _iter707 != (*(this->part_vals)).end(); ++_iter707)
     {
-      xfer += oprot->writeString((*_iter689));
+      xfer += oprot->writeString((*_iter707));
     }
     xfer += oprot->writeListEnd();
   }
@@ -12505,14 +12505,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size690;
-            ::apache::thrift::protocol::TType _etype693;
-            xfer += iprot->readListBegin(_etype693, _size690);
-            this->success.resize(_size690);
-            uint32_t _i694;
-            for (_i694 = 0; _i694 < _size690; ++_i694)
+            uint32_t _size708;
+            ::apache::thrift::protocol::TType _etype711;
+            xfer += iprot->readListBegin(_etype711, _size708);
+            this->success.resize(_size708);
+            uint32_t _i712;
+            for (_i712 = 0; _i712 < _size708; ++_i712)
             {
-              xfer += iprot->readString(this->success[_i694]);
+              xfer += iprot->readString(this->success[_i712]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12559,10 +12559,10 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter695;
-      for (_iter695 = this->success.begin(); _iter695 != this->success.end(); ++_iter695)
+      std::vector<std::string> ::const_iterator _iter713;
+      for (_iter713 = this->success.begin(); _iter713 != this->success.end(); ++_iter713)
       {
-        xfer += oprot->writeString((*_iter695));
+        xfer += oprot->writeString((*_iter713));
       }
       xfer += oprot->writeListEnd();
     }
@@ -12605,14 +12605,14 @@ uint32_t ThriftHiveMetastore_get_partition_names_ps_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size696;
-            ::apache::thrift::protocol::TType _etype699;
-            xfer += iprot->readListBegin(_etype699, _size696);
-            (*(this->success)).resize(_size696);
-            uint32_t _i700;
-            for (_i700 = 0; _i700 < _size696; ++_i700)
+            uint32_t _size714;
+            ::apache::thrift::protocol::TType _etype717;
+            xfer += iprot->readListBegin(_etype717, _size714);
+            (*(this->success)).resize(_size714);
+            uint32_t _i718;
+            for (_i718 = 0; _i718 < _size714; ++_i718)
             {
-              xfer += iprot->readString((*(this->success))[_i700]);
+              xfer += iprot->readString((*(this->success))[_i718]);
             }
             xfer += iprot->readListEnd();
           }
@@ -12787,14 +12787,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size701;
-            ::apache::thrift::protocol::TType _etype704;
-            xfer += iprot->readListBegin(_etype704, _size701);
-            this->success.resize(_size701);
-            uint32_t _i705;
-            for (_i705 = 0; _i705 < _size701; ++_i705)
+            uint32_t _size719;
+            ::apache::thrift::protocol::TType _etype722;
+            xfer += iprot->readListBegin(_etype722, _size719);
+            this->success.resize(_size719);
+            uint32_t _i723;
+            for (_i723 = 0; _i723 < _size719; ++_i723)
             {
-              xfer += this->success[_i705].read(iprot);
+              xfer += this->success[_i723].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -12841,10 +12841,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter706;
-      for (_iter706 = this->success.begin(); _iter706 != this->success.end(); ++_iter706)
+      std::vector<Partition> ::const_iterator _iter724;
+      for (_iter724 = this->success.begin(); _iter724 != this->success.end(); ++_iter724)
       {
-        xfer += (*_iter706).write(oprot);
+        xfer += (*_iter724).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -12887,14 +12887,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_filter_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size707;
-            ::apache::thrift::protocol::TType _etype710;
-            xfer += iprot->readListBegin(_etype710, _size707);
-            (*(this->success)).resize(_size707);
-            uint32_t _i711;
-            for (_i711 = 0; _i711 < _size707; ++_i711)
+            uint32_t _size725;
+            ::apache::thrift::protocol::TType _etype728;
+            xfer += iprot->readListBegin(_etype728, _size725);
+            (*(this->success)).resize(_size725);
+            uint32_t _i729;
+            for (_i729 = 0; _i729 < _size725; ++_i729)
             {
-              xfer += (*(this->success))[_i711].read(iprot);
+              xfer += (*(this->success))[_i729].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13069,14 +13069,14 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_result::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size712;
-            ::apache::thrift::protocol::TType _etype715;
-            xfer += iprot->readListBegin(_etype715, _size712);
-            this->success.resize(_size712);
-            uint32_t _i716;
-            for (_i716 = 0; _i716 < _size712; ++_i716)
+            uint32_t _size730;
+            ::apache::thrift::protocol::TType _etype733;
+            xfer += iprot->readListBegin(_etype733, _size730);
+            this->success.resize(_size730);
+            uint32_t _i734;
+            for (_i734 = 0; _i734 < _size730; ++_i734)
             {
-              xfer += this->success[_i716].read(iprot);
+              xfer += this->success[_i734].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13123,10 +13123,10 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_result::write(::apache::th
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<PartitionSpec> ::const_iterator _iter717;
-      for (_iter717 = this->success.begin(); _iter717 != this->success.end(); ++_iter717)
+      std::vector<PartitionSpec> ::const_iterator _iter735;
+      for (_iter735 = this->success.begin(); _iter735 != this->success.end(); ++_iter735)
       {
-        xfer += (*_iter717).write(oprot);
+        xfer += (*_iter735).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -13169,14 +13169,14 @@ uint32_t ThriftHiveMetastore_get_part_specs_by_filter_presult::read(::apache::th
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size718;
-            ::apache::thrift::protocol::TType _etype721;
-            xfer += iprot->readListBegin(_etype721, _size718);
-            (*(this->success)).resize(_size718);
-            uint32_t _i722;
-            for (_i722 = 0; _i722 < _size718; ++_i722)
+            uint32_t _size736;
+            ::apache::thrift::protocol::TType _etype739;
+            xfer += iprot->readListBegin(_etype739, _size736);
+            (*(this->success)).resize(_size736);
+            uint32_t _i740;
+            for (_i740 = 0; _i740 < _size736; ++_i740)
             {
-              xfer += (*(this->success))[_i722].read(iprot);
+              xfer += (*(this->success))[_i740].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13455,14 +13455,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_args::read(::apache::thrift
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->names.clear();
-            uint32_t _size723;
-            ::apache::thrift::protocol::TType _etype726;
-            xfer += iprot->readListBegin(_etype726, _size723);
-            this->names.resize(_size723);
-            uint32_t _i727;
-            for (_i727 = 0; _i727 < _size723; ++_i727)
+            uint32_t _size741;
+            ::apache::thrift::protocol::TType _etype744;
+            xfer += iprot->readListBegin(_etype744, _size741);
+            this->names.resize(_size741);
+            uint32_t _i745;
+            for (_i745 = 0; _i745 < _size741; ++_i745)
             {
-              xfer += iprot->readString(this->names[_i727]);
+              xfer += iprot->readString(this->names[_i745]);
             }
             xfer += iprot->readListEnd();
           }
@@ -13498,10 +13498,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_args::write(::apache::thrif
   xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
-    std::vector<std::string> ::const_iterator _iter728;
-    for (_iter728 = this->names.begin(); _iter728 != this->names.end(); ++_iter728)
+    std::vector<std::string> ::const_iterator _iter746;
+    for (_iter746 = this->names.begin(); _iter746 != this->names.end(); ++_iter746)
     {
-      xfer += oprot->writeString((*_iter728));
+      xfer += oprot->writeString((*_iter746));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13527,10 +13527,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_pargs::write(::apache::thri
   xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->names)).size()));
-    std::vector<std::string> ::const_iterator _iter729;
-    for (_iter729 = (*(this->names)).begin(); _iter729 != (*(this->names)).end(); ++_iter729)
+    std::vector<std::string> ::const_iterator _iter747;
+    for (_iter747 = (*(this->names)).begin(); _iter747 != (*(this->names)).end(); ++_iter747)
     {
-      xfer += oprot->writeString((*_iter729));
+      xfer += oprot->writeString((*_iter747));
     }
     xfer += oprot->writeListEnd();
   }
@@ -13565,14 +13565,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_result::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size730;
-            ::apache::thrift::protocol::TType _etype733;
-            xfer += iprot->readListBegin(_etype733, _size730);
-            this->success.resize(_size730);
-            uint32_t _i734;
-            for (_i734 = 0; _i734 < _size730; ++_i734)
+            uint32_t _size748;
+            ::apache::thrift::protocol::TType _etype751;
+            xfer += iprot->readListBegin(_etype751, _size748);
+            this->success.resize(_size748);
+            uint32_t _i752;
+            for (_i752 = 0; _i752 < _size748; ++_i752)
             {
-              xfer += this->success[_i734].read(iprot);
+              xfer += this->success[_i752].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13619,10 +13619,10 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_result::write(::apache::thr
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Partition> ::const_iterator _iter735;
-      for (_iter735 = this->success.begin(); _iter735 != this->success.end(); ++_iter735)
+      std::vector<Partition> ::const_iterator _iter753;
+      for (_iter753 = this->success.begin(); _iter753 != this->success.end(); ++_iter753)
       {
-        xfer += (*_iter735).write(oprot);
+        xfer += (*_iter753).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -13665,14 +13665,14 @@ uint32_t ThriftHiveMetastore_get_partitions_by_names_presult::read(::apache::thr
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size736;
-            ::apache::thrift::protocol::TType _etype739;
-            xfer += iprot->readListBegin(_etype739, _size736);
-            (*(this->success)).resize(_size736);
-            uint32_t _i740;
-            for (_i740 = 0; _i740 < _size736; ++_i740)
+            uint32_t _size754;
+            ::apache::thrift::protocol::TType _etype757;
+            xfer += iprot->readListBegin(_etype757, _size754);
+            (*(this->success)).resize(_size754);
+            uint32_t _i758;
+            for (_i758 = 0; _i758 < _size754; ++_i758)
             {
-              xfer += (*(this->success))[_i740].read(iprot);
+              xfer += (*(this->success))[_i758].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -13963,14 +13963,14 @@ uint32_t ThriftHiveMetastore_alter_partitions_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->new_parts.clear();
-            uint32_t _size741;
-            ::apache::thrift::protocol::TType _etype744;
-            xfer += iprot->readListBegin(_etype744, _size741);
-            this->new_parts.resize(_size741);
-            uint32_t _i745;
-            for (_i745 = 0; _i745 < _size741; ++_i745)
+            uint32_t _size759;
+            ::apache::thrift::protocol::TType _etype762;
+            xfer += iprot->readListBegin(_etype762, _size759);
+            this->new_parts.resize(_size759);
+            uint32_t _i763;
+            for (_i763 = 0; _i763 < _size759; ++_i763)
             {
-              xfer += this->new_parts[_i745].read(iprot);
+              xfer += this->new_parts[_i763].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -14006,10 +14006,10 @@ uint32_t ThriftHiveMetastore_alter_partitions_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->new_parts.size()));
-    std::vector<Partition> ::const_iterator _iter746;
-    for (_iter746 = this->new_parts.begin(); _iter746 != this->new_parts.end(); ++_iter746)
+    std::vector<Partition> ::const_iterator _iter764;
+    for (_iter764 = this->new_parts.begin(); _iter764 != this->new_parts.end(); ++_iter764)
     {
-      xfer += (*_iter746).write(oprot);
+      xfer += (*_iter764).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -14035,10 +14035,10 @@ uint32_t ThriftHiveMetastore_alter_partitions_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("new_parts", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->new_parts)).size()));
-    std::vector<Partition> ::const_iterator _iter747;
-    for (_iter747 = (*(this->new_parts)).begin(); _iter747 != (*(this->new_parts)).end(); ++_iter747)
+    std::vector<Partition> ::const_iterator _iter765;
+    for (_iter765 = (*(this->new_parts)).begin(); _iter765 != (*(this->new_parts)).end(); ++_iter765)
     {
-      xfer += (*_iter747).write(oprot);
+      xfer += (*_iter765).write(oprot);
     }
     xfer += oprot->writeListEnd();
   }
@@ -14435,14 +14435,14 @@ uint32_t ThriftHiveMetastore_rename_partition_args::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size748;
-            ::apache::thrift::protocol::TType _etype751;
-            xfer += iprot->readListBegin(_etype751, _size748);
-            this->part_vals.resize(_size748);
-            uint32_t _i752;
-            for (_i752 = 0; _i752 < _size748; ++_i752)
+            uint32_t _size766;
+            ::apache::thrift::protocol::TType _etype769;
+            xfer += iprot->readListBegin(_etype769, _size766);
+            this->part_vals.resize(_size766);
+            uint32_t _i770;
+            for (_i770 = 0; _i770 < _size766; ++_i770)
             {
-              xfer += iprot->readString(this->part_vals[_i752]);
+              xfer += iprot->readString(this->part_vals[_i770]);
             }
             xfer += iprot->readListEnd();
           }
@@ -14486,10 +14486,10 @@ uint32_t ThriftHiveMetastore_rename_partition_args::write(::apache::thrift::prot
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter753;
-    for (_iter753 = this->part_vals.begin(); _iter753 != this->part_vals.end(); ++_iter753)
+    std::vector<std::string> ::const_iterator _iter771;
+    for (_iter771 = this->part_vals.begin(); _iter771 != this->part_vals.end(); ++_iter771)
     {
-      xfer += oprot->writeString((*_iter753));
+      xfer += oprot->writeString((*_iter771));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14519,10 +14519,10 @@ uint32_t ThriftHiveMetastore_rename_partition_pargs::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter754;
-    for (_iter754 = (*(this->part_vals)).begin(); _iter754 != (*(this->part_vals)).end(); ++_iter754)
+    std::vector<std::string> ::const_iterator _iter772;
+    for (_iter772 = (*(this->part_vals)).begin(); _iter772 != (*(this->part_vals)).end(); ++_iter772)
     {
-      xfer += oprot->writeString((*_iter754));
+      xfer += oprot->writeString((*_iter772));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14677,14 +14677,14 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_args::read(::ap
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->part_vals.clear();
-            uint32_t _size755;
-            ::apache::thrift::protocol::TType _etype758;
-            xfer += iprot->readListBegin(_etype758, _size755);
-            this->part_vals.resize(_size755);
-            uint32_t _i759;
-            for (_i759 = 0; _i759 < _size755; ++_i759)
+            uint32_t _size773;
+            ::apache::thrift::protocol::TType _etype776;
+            xfer += iprot->readListBegin(_etype776, _size773);
+            this->part_vals.resize(_size773);
+            uint32_t _i777;
+            for (_i777 = 0; _i777 < _size773; ++_i777)
             {
-              xfer += iprot->readString(this->part_vals[_i759]);
+              xfer += iprot->readString(this->part_vals[_i777]);
             }
             xfer += iprot->readListEnd();
           }
@@ -14720,10 +14720,10 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_args::write(::a
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::vector<std::string> ::const_iterator _iter760;
-    for (_iter760 = this->part_vals.begin(); _iter760 != this->part_vals.end(); ++_iter760)
+    std::vector<std::string> ::const_iterator _iter778;
+    for (_iter778 = this->part_vals.begin(); _iter778 != this->part_vals.end(); ++_iter778)
     {
-      xfer += oprot->writeString((*_iter760));
+      xfer += oprot->writeString((*_iter778));
     }
     xfer += oprot->writeListEnd();
   }
@@ -14745,10 +14745,10 @@ uint32_t ThriftHiveMetastore_partition_name_has_valid_characters_pargs::write(::
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_LIST, 1);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::vector<std::string> ::const_iterator _iter761;
-    for (_iter761 = (*(this->part_vals)).begin(); _iter761 != (*(this->part_vals)).end(); ++_iter761)
+    std::vector<std::string> ::const_iterator _iter779;
+    for (_iter779 = (*(this->part_vals)).begin(); _iter779 != (*(this->part_vals)).end(); ++_iter779)
     {
-      xfer += oprot->writeString((*_iter761));
+      xfer += oprot->writeString((*_iter779));
     }
     xfer += oprot->writeListEnd();
   }
@@ -15167,14 +15167,14 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size762;
-            ::apache::thrift::protocol::TType _etype765;
-            xfer += iprot->readListBegin(_etype765, _size762);
-            this->success.resize(_size762);
-            uint32_t _i766;
-            for (_i766 = 0; _i766 < _size762; ++_i766)
+            uint32_t _size780;
+            ::apache::thrift::protocol::TType _etype783;
+            xfer += iprot->readListBegin(_etype783, _size780);
+            this->success.resize(_size780);
+            uint32_t _i784;
+            for (_i784 = 0; _i784 < _size780; ++_i784)
             {
-              xfer += iprot->readString(this->success[_i766]);
+              xfer += iprot->readString(this->success[_i784]);
             }
             xfer += iprot->readListEnd();
           }
@@ -15213,10 +15213,10 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter767;
-      for (_iter767 = this->success.begin(); _iter767 != this->success.end(); ++_iter767)
+      std::vector<std::string> ::const_iterator _iter785;
+      for (_iter785 = this->success.begin(); _iter785 != this->success.end(); ++_iter785)
       {
-        xfer += oprot->writeString((*_iter767));
+        xfer += oprot->writeString((*_iter785));
       }
       xfer += oprot->writeListEnd();
     }
@@ -15255,14 +15255,14 @@ uint32_t ThriftHiveMetastore_partition_name_to_vals_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size768;
-            ::apache::thrift::protocol::TType _etype771;
-            xfer += iprot->readListBegin(_etype771, _size768);
-            (*(this->success)).resize(_size768);
-            uint32_t _i772;
-            for (_i772 = 0; _i772 < _size768; ++_i772)
+            uint32_t _size786;
+            ::apache::thrift::protocol::TType _etype789;
+            xfer += iprot->readListBegin(_etype789, _size786);
+            (*(this->success)).resize(_size786);
+            uint32_t _i790;
+            for (_i790 = 0; _i790 < _size786; ++_i790)
             {
-              xfer += iprot->readString((*(this->success))[_i772]);
+              xfer += iprot->readString((*(this->success))[_i790]);
             }
             xfer += iprot->readListEnd();
           }
@@ -15381,17 +15381,17 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_result::read(::apache::thrif
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->success.clear();
-            uint32_t _size773;
-            ::apache::thrift::protocol::TType _ktype774;
-            ::apache::thrift::protocol::TType _vtype775;
-            xfer += iprot->readMapBegin(_ktype774, _vtype775, _size773);
-            uint32_t _i777;
-            for (_i777 = 0; _i777 < _size773; ++_i777)
+            uint32_t _size791;
+            ::apache::thrift::protocol::TType _ktype792;
+            ::apache::thrift::protocol::TType _vtype793;
+            xfer += iprot->readMapBegin(_ktype792, _vtype793, _size791);
+            uint32_t _i795;
+            for (_i795 = 0; _i795 < _size791; ++_i795)
             {
-              std::string _key778;
-              xfer += iprot->readString(_key778);
-              std::string& _val779 = this->success[_key778];
-              xfer += iprot->readString(_val779);
+              std::string _key796;
+              xfer += iprot->readString(_key796);
+              std::string& _val797 = this->success[_key796];
+              xfer += iprot->readString(_val797);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15430,11 +15430,11 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_result::write(::apache::thri
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
     {
       xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::map<std::string, std::string> ::const_iterator _iter780;
-      for (_iter780 = this->success.begin(); _iter780 != this->success.end(); ++_iter780)
+      std::map<std::string, std::string> ::const_iterator _iter798;
+      for (_iter798 = this->success.begin(); _iter798 != this->success.end(); ++_iter798)
       {
-        xfer += oprot->writeString(_iter780->first);
-        xfer += oprot->writeString(_iter780->second);
+        xfer += oprot->writeString(_iter798->first);
+        xfer += oprot->writeString(_iter798->second);
       }
       xfer += oprot->writeMapEnd();
     }
@@ -15473,17 +15473,17 @@ uint32_t ThriftHiveMetastore_partition_name_to_spec_presult::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             (*(this->success)).clear();
-            uint32_t _size781;
-            ::apache::thrift::protocol::TType _ktype782;
-            ::apache::thrift::protocol::TType _vtype783;
-            xfer += iprot->readMapBegin(_ktype782, _vtype783, _size781);
-            uint32_t _i785;
-            for (_i785 = 0; _i785 < _size781; ++_i785)
+            uint32_t _size799;
+            ::apache::thrift::protocol::TType _ktype800;
+            ::apache::thrift::protocol::TType _vtype801;
+            xfer += iprot->readMapBegin(_ktype800, _vtype801, _size799);
+            uint32_t _i803;
+            for (_i803 = 0; _i803 < _size799; ++_i803)
             {
-              std::string _key786;
-              xfer += iprot->readString(_key786);
-              std::string& _val787 = (*(this->success))[_key786];
-              xfer += iprot->readString(_val787);
+              std::string _key804;
+              xfer += iprot->readString(_key804);
+              std::string& _val805 = (*(this->success))[_key804];
+              xfer += iprot->readString(_val805);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15552,17 +15552,17 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::read(::apache::thrift::
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->part_vals.clear();
-            uint32_t _size788;
-            ::apache::thrift::protocol::TType _ktype789;
-            ::apache::thrift::protocol::TType _vtype790;
-            xfer += iprot->readMapBegin(_ktype789, _vtype790, _size788);
-            uint32_t _i792;
-            for (_i792 = 0; _i792 < _size788; ++_i792)
+            uint32_t _size806;
+            ::apache::thrift::protocol::TType _ktype807;
+            ::apache::thrift::protocol::TType _vtype808;
+            xfer += iprot->readMapBegin(_ktype807, _vtype808, _size806);
+            uint32_t _i810;
+            for (_i810 = 0; _i810 < _size806; ++_i810)
             {
-              std::string _key793;
-              xfer += iprot->readString(_key793);
-              std::string& _val794 = this->part_vals[_key793];
-              xfer += iprot->readString(_val794);
+              std::string _key811;
+              xfer += iprot->readString(_key811);
+              std::string& _val812 = this->part_vals[_key811];
+              xfer += iprot->readString(_val812);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15573,9 +15573,9 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::read(::apache::thrift::
         break;
       case 4:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast795;
-          xfer += iprot->readI32(ecast795);
-          this->eventType = (PartitionEventType::type)ecast795;
+          int32_t ecast813;
+          xfer += iprot->readI32(ecast813);
+          this->eventType = (PartitionEventType::type)ecast813;
           this->__isset.eventType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -15608,11 +15608,11 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_args::write(::apache::thrift:
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::map<std::string, std::string> ::const_iterator _iter796;
-    for (_iter796 = this->part_vals.begin(); _iter796 != this->part_vals.end(); ++_iter796)
+    std::map<std::string, std::string> ::const_iterator _iter814;
+    for (_iter814 = this->part_vals.begin(); _iter814 != this->part_vals.end(); ++_iter814)
     {
-      xfer += oprot->writeString(_iter796->first);
-      xfer += oprot->writeString(_iter796->second);
+      xfer += oprot->writeString(_iter814->first);
+      xfer += oprot->writeString(_iter814->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -15642,11 +15642,11 @@ uint32_t ThriftHiveMetastore_markPartitionForEvent_pargs::write(::apache::thrift
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter797;
-    for (_iter797 = (*(this->part_vals)).begin(); _iter797 != (*(this->part_vals)).end(); ++_iter797)
+    std::map<std::string, std::string> ::const_iterator _iter815;
+    for (_iter815 = (*(this->part_vals)).begin(); _iter815 != (*(this->part_vals)).end(); ++_iter815)
     {
-      xfer += oprot->writeString(_iter797->first);
-      xfer += oprot->writeString(_iter797->second);
+      xfer += oprot->writeString(_iter815->first);
+      xfer += oprot->writeString(_iter815->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -15897,17 +15897,17 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::read(::apache::thri
         if (ftype == ::apache::thrift::protocol::T_MAP) {
           {
             this->part_vals.clear();
-            uint32_t _size798;
-            ::apache::thrift::protocol::TType _ktype799;
-            ::apache::thrift::protocol::TType _vtype800;
-            xfer += iprot->readMapBegin(_ktype799, _vtype800, _size798);
-            uint32_t _i802;
-            for (_i802 = 0; _i802 < _size798; ++_i802)
+            uint32_t _size816;
+            ::apache::thrift::protocol::TType _ktype817;
+            ::apache::thrift::protocol::TType _vtype818;
+            xfer += iprot->readMapBegin(_ktype817, _vtype818, _size816);
+            uint32_t _i820;
+            for (_i820 = 0; _i820 < _size816; ++_i820)
             {
-              std::string _key803;
-              xfer += iprot->readString(_key803);
-              std::string& _val804 = this->part_vals[_key803];
-              xfer += iprot->readString(_val804);
+              std::string _key821;
+              xfer += iprot->readString(_key821);
+              std::string& _val822 = this->part_vals[_key821];
+              xfer += iprot->readString(_val822);
             }
             xfer += iprot->readMapEnd();
           }
@@ -15918,9 +15918,9 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::read(::apache::thri
         break;
       case 4:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast805;
-          xfer += iprot->readI32(ecast805);
-          this->eventType = (PartitionEventType::type)ecast805;
+          int32_t ecast823;
+          xfer += iprot->readI32(ecast823);
+          this->eventType = (PartitionEventType::type)ecast823;
           this->__isset.eventType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -15953,11 +15953,11 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_args::write(::apache::thr
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->part_vals.size()));
-    std::map<std::string, std::string> ::const_iterator _iter806;
-    for (_iter806 = this->part_vals.begin(); _iter806 != this->part_vals.end(); ++_iter806)
+    std::map<std::string, std::string> ::const_iterator _iter824;
+    for (_iter824 = this->part_vals.begin(); _iter824 != this->part_vals.end(); ++_iter824)
     {
-      xfer += oprot->writeString(_iter806->first);
-      xfer += oprot->writeString(_iter806->second);
+      xfer += oprot->writeString(_iter824->first);
+      xfer += oprot->writeString(_iter824->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -15987,11 +15987,11 @@ uint32_t ThriftHiveMetastore_isPartitionMarkedForEvent_pargs::write(::apache::th
   xfer += oprot->writeFieldBegin("part_vals", ::apache::thrift::protocol::T_MAP, 3);
   {
     xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->part_vals)).size()));
-    std::map<std::string, std::string> ::const_iterator _iter807;
-    for (_iter807 = (*(this->part_vals)).begin(); _iter807 != (*(this->part_vals)).end(); ++_iter807)
+    std::map<std::string, std::string> ::const_iterator _iter825;
+    for (_iter825 = (*(this->part_vals)).begin(); _iter825 != (*(this->part_vals)).end(); ++_iter825)
     {
-      xfer += oprot->writeString(_iter807->first);
-      xfer += oprot->writeString(_iter807->second);
+      xfer += oprot->writeString(_iter825->first);
+      xfer += oprot->writeString(_iter825->second);
     }
     xfer += oprot->writeMapEnd();
   }
@@ -17296,14 +17296,14 @@ uint32_t ThriftHiveMetastore_get_indexes_result::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size808;
-            ::apache::thrift::protocol::TType _etype811;
-            xfer += iprot->readListBegin(_etype811, _size808);
-            this->success.resize(_size808);
-            uint32_t _i812;
-            for (_i812 = 0; _i812 < _size808; ++_i812)
+            uint32_t _size826;
+            ::apache::thrift::protocol::TType _etype829;
+            xfer += iprot->readListBegin(_etype829, _size826);
+            this->success.resize(_size826);
+            uint32_t _i830;
+            for (_i830 = 0; _i830 < _size826; ++_i830)
             {
-              xfer += this->success[_i812].read(iprot);
+              xfer += this->success[_i830].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -17350,10 +17350,10 @@ uint32_t ThriftHiveMetastore_get_indexes_result::write(::apache::thrift::protoco
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Index> ::const_iterator _iter813;
-      for (_iter813 = this->success.begin(); _iter813 != this->success.end(); ++_iter813)
+      std::vector<Index> ::const_iterator _iter831;
+      for (_iter831 = this->success.begin(); _iter831 != this->success.end(); ++_iter831)
       {
-        xfer += (*_iter813).write(oprot);
+        xfer += (*_iter831).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -17396,14 +17396,14 @@ uint32_t ThriftHiveMetastore_get_indexes_presult::read(::apache::thrift::protoco
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size814;
-            ::apache::thrift::protocol::TType _etype817;
-            xfer += iprot->readListBegin(_etype817, _size814);
-            (*(this->success)).resize(_size814);
-            uint32_t _i818;
-            for (_i818 = 0; _i818 < _size814; ++_i818)
+            uint32_t _size832;
+            ::apache::thrift::protocol::TType _etype835;
+            xfer += iprot->readListBegin(_etype835, _size832);
+            (*(this->success)).resize(_size832);
+            uint32_t _i836;
+            for (_i836 = 0; _i836 < _size832; ++_i836)
             {
-              xfer += (*(this->success))[_i818].read(iprot);
+              xfer += (*(this->success))[_i836].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -17562,14 +17562,14 @@ uint32_t ThriftHiveMetastore_get_index_names_result::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size819;
-            ::apache::thrift::protocol::TType _etype822;
-            xfer += iprot->readListBegin(_etype822, _size819);
-            this->success.resize(_size819);
-            uint32_t _i823;
-            for (_i823 = 0; _i823 < _size819; ++_i823)
+            uint32_t _size837;
+            ::apache::thrift::protocol::TType _etype840;
+            xfer += iprot->readListBegin(_etype840, _size837);
+            this->success.resize(_size837);
+            uint32_t _i841;
+            for (_i841 = 0; _i841 < _size837; ++_i841)
             {
-              xfer += iprot->readString(this->success[_i823]);
+              xfer += iprot->readString(this->success[_i841]);
             }
             xfer += iprot->readListEnd();
           }
@@ -17608,10 +17608,10 @@ uint32_t ThriftHiveMetastore_get_index_names_result::write(::apache::thrift::pro
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter824;
-      for (_iter824 = this->success.begin(); _iter824 != this->success.end(); ++_iter824)
+      std::vector<std::string> ::const_iterator _iter842;
+      for (_iter842 = this->success.begin(); _iter842 != this->success.end(); ++_iter842)
       {
-        xfer += oprot->writeString((*_iter824));
+        xfer += oprot->writeString((*_iter842));
       }
       xfer += oprot->writeListEnd();
     }
@@ -17650,14 +17650,14 @@ uint32_t ThriftHiveMetastore_get_index_names_presult::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size825;
-            ::apache::thrift::protocol::TType _etype828;
-            xfer += iprot->readListBegin(_etype828, _size825);
-            (*(this->success)).resize(_size825);
-            uint32_t _i829;
-            for (_i829 = 0; _i829 < _size825; ++_i829)
+            uint32_t _size843;
+            ::apache::thrift::protocol::TType _etype846;
+            xfer += iprot->readListBegin(_etype846, _size843);
+            (*(this->success)).resize(_size843);
+            uint32_t _i847;
+            for (_i847 = 0; _i847 < _size843; ++_i847)
             {
-              xfer += iprot->readString((*(this->success))[_i829]);
+              xfer += iprot->readString((*(this->success))[_i847]);
             }
             xfer += iprot->readListEnd();
           }
@@ -20886,14 +20886,14 @@ uint32_t ThriftHiveMetastore_get_functions_result::read(::apache::thrift::protoc
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size830;
-            ::apache::thrift::protocol::TType _etype833;
-            xfer += iprot->readListBegin(_etype833, _size830);
-            this->success.resize(_size830);
-            uint32_t _i834;
-            for (_i834 = 0; _i834 < _size830; ++_i834)
+            uint32_t _size848;
+            ::apache::thrift::protocol::TType _etype851;
+            xfer += iprot->readListBegin(_etype851, _size848);
+            this->success.resize(_size848);
+            uint32_t _i852;
+            for (_i852 = 0; _i852 < _size848; ++_i852)
             {
-              xfer += iprot->readString(this->success[_i834]);
+              xfer += iprot->readString(this->success[_i852]);
             }
             xfer += iprot->readListEnd();
           }
@@ -20932,10 +20932,10 @@ uint32_t ThriftHiveMetastore_get_functions_result::write(::apache::thrift::proto
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter835;
-      for (_iter835 = this->success.begin(); _iter835 != this->success.end(); ++_iter835)
+      std::vector<std::string> ::const_iterator _iter853;
+      for (_iter853 = this->success.begin(); _iter853 != this->success.end(); ++_iter853)
       {
-        xfer += oprot->writeString((*_iter835));
+        xfer += oprot->writeString((*_iter853));
       }
       xfer += oprot->writeListEnd();
     }
@@ -20974,14 +20974,14 @@ uint32_t ThriftHiveMetastore_get_functions_presult::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size836;
-            ::apache::thrift::protocol::TType _etype839;
-            xfer += iprot->readListBegin(_etype839, _size836);
-            (*(this->success)).resize(_size836);
-            uint32_t _i840;
-            for (_i840 = 0; _i840 < _size836; ++_i840)
+            uint32_t _size854;
+            ::apache::thrift::protocol::TType _etype857;
+            xfer += iprot->readListBegin(_etype857, _size854);
+            (*(this->success)).resize(_size854);
+            uint32_t _i858;
+            for (_i858 = 0; _i858 < _size854; ++_i858)
             {
-              xfer += iprot->readString((*(this->success))[_i840]);
+              xfer += iprot->readString((*(this->success))[_i858]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21228,6 +21228,167 @@ uint32_t ThriftHiveMetastore_get_function_presult::read(::apache::thrift::protoc
   return xfer;
 }
 
+uint32_t ThriftHiveMetastore_get_all_functions_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_functions_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_functions_args");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_functions_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_functions_pargs");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_functions_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_functions_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_functions_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_all_functions_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
 uint32_t ThriftHiveMetastore_create_role_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
@@ -21661,14 +21822,14 @@ uint32_t ThriftHiveMetastore_get_role_names_result::read(::apache::thrift::proto
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size841;
-            ::apache::thrift::protocol::TType _etype844;
-            xfer += iprot->readListBegin(_etype844, _size841);
-            this->success.resize(_size841);
-            uint32_t _i845;
-            for (_i845 = 0; _i845 < _size841; ++_i845)
+            uint32_t _size859;
+            ::apache::thrift::protocol::TType _etype862;
+            xfer += iprot->readListBegin(_etype862, _size859);
+            this->success.resize(_size859);
+            uint32_t _i863;
+            for (_i863 = 0; _i863 < _size859; ++_i863)
             {
-              xfer += iprot->readString(this->success[_i845]);
+              xfer += iprot->readString(this->success[_i863]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21707,10 +21868,10 @@ uint32_t ThriftHiveMetastore_get_role_names_result::write(::apache::thrift::prot
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter846;
-      for (_iter846 = this->success.begin(); _iter846 != this->success.end(); ++_iter846)
+      std::vector<std::string> ::const_iterator _iter864;
+      for (_iter864 = this->success.begin(); _iter864 != this->success.end(); ++_iter864)
       {
-        xfer += oprot->writeString((*_iter846));
+        xfer += oprot->writeString((*_iter864));
       }
       xfer += oprot->writeListEnd();
     }
@@ -21749,14 +21910,14 @@ uint32_t ThriftHiveMetastore_get_role_names_presult::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size847;
-            ::apache::thrift::protocol::TType _etype850;
-            xfer += iprot->readListBegin(_etype850, _size847);
-            (*(this->success)).resize(_size847);
-            uint32_t _i851;
-            for (_i851 = 0; _i851 < _size847; ++_i851)
+            uint32_t _size865;
+            ::apache::thrift::protocol::TType _etype868;
+            xfer += iprot->readListBegin(_etype868, _size865);
+            (*(this->success)).resize(_size865);
+            uint32_t _i869;
+            for (_i869 = 0; _i869 < _size865; ++_i869)
             {
-              xfer += iprot->readString((*(this->success))[_i851]);
+              xfer += iprot->readString((*(this->success))[_i869]);
             }
             xfer += iprot->readListEnd();
           }
@@ -21823,9 +21984,9 @@ uint32_t ThriftHiveMetastore_grant_role_args::read(::apache::thrift::protocol::T
         break;
       case 3:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast852;
-          xfer += iprot->readI32(ecast852);
-          this->principal_type = (PrincipalType::type)ecast852;
+          int32_t ecast870;
+          xfer += iprot->readI32(ecast870);
+          this->principal_type = (PrincipalType::type)ecast870;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -21841,9 +22002,9 @@ uint32_t ThriftHiveMetastore_grant_role_args::read(::apache::thrift::protocol::T
         break;
       case 5:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast853;
-          xfer += iprot->readI32(ecast853);
-          this->grantorType = (PrincipalType::type)ecast853;
+          int32_t ecast871;
+          xfer += iprot->readI32(ecast871);
+          this->grantorType = (PrincipalType::type)ecast871;
           this->__isset.grantorType = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22089,9 +22250,9 @@ uint32_t ThriftHiveMetastore_revoke_role_args::read(::apache::thrift::protocol::
         break;
       case 3:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast854;
-          xfer += iprot->readI32(ecast854);
-          this->principal_type = (PrincipalType::type)ecast854;
+          int32_t ecast872;
+          xfer += iprot->readI32(ecast872);
+          this->principal_type = (PrincipalType::type)ecast872;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22297,9 +22458,9 @@ uint32_t ThriftHiveMetastore_list_roles_args::read(::apache::thrift::protocol::T
         break;
       case 2:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast855;
-          xfer += iprot->readI32(ecast855);
-          this->principal_type = (PrincipalType::type)ecast855;
+          int32_t ecast873;
+          xfer += iprot->readI32(ecast873);
+          this->principal_type = (PrincipalType::type)ecast873;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -22375,14 +22536,14 @@ uint32_t ThriftHiveMetastore_list_roles_result::read(::apache::thrift::protocol:
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size856;
-            ::apache::thrift::protocol::TType _etype859;
-            xfer += iprot->readListBegin(_etype859, _size856);
-            this->success.resize(_size856);
-            uint32_t _i860;
-            for (_i860 = 0; _i860 < _size856; ++_i860)
+            uint32_t _size874;
+            ::apache::thrift::protocol::TType _etype877;
+            xfer += iprot->readListBegin(_etype877, _size874);
+            this->success.resize(_size874);
+            uint32_t _i878;
+            for (_i878 = 0; _i878 < _size874; ++_i878)
             {
-              xfer += this->success[_i860].read(iprot);
+              xfer += this->success[_i878].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -22421,10 +22582,10 @@ uint32_t ThriftHiveMetastore_list_roles_result::write(::apache::thrift::protocol
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<Role> ::const_iterator _iter861;
-      for (_iter861 = this->success.begin(); _iter861 != this->success.end(); ++_iter861)
+      std::vector<Role> ::const_iterator _iter879;
+      for (_iter879 = this->success.begin(); _iter879 != this->success.end(); ++_iter879)
       {
-        xfer += (*_iter861).write(oprot);
+        xfer += (*_iter879).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -22463,14 +22624,14 @@ uint32_t ThriftHiveMetastore_list_roles_presult::read(::apache::thrift::protocol
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size862;
-            ::apache::thrift::protocol::TType _etype865;
-            xfer += iprot->readListBegin(_etype865, _size862);
-            (*(this->success)).resize(_size862);
-            uint32_t _i866;
-            for (_i866 = 0; _i866 < _size862; ++_i866)
+            uint32_t _size880;
+            ::apache::thrift::protocol::TType _etype883;
+            xfer += iprot->readListBegin(_etype883, _size880);
+            (*(this->success)).resize(_size880);
+            uint32_t _i884;
+            for (_i884 = 0; _i884 < _size880; ++_i884)
             {
-              xfer += (*(this->success))[_i866].read(iprot);
+              xfer += (*(this->success))[_i884].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -23085,14 +23246,14 @@ uint32_t ThriftHiveMetastore_get_privilege_set_args::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size867;
-            ::apache::thrift::protocol::TType _etype870;
-            xfer += iprot->readListBegin(_etype870, _size867);
-            this->group_names.resize(_size867);
-            uint32_t _i871;
-            for (_i871 = 0; _i871 < _size867; ++_i871)
+            uint32_t _size885;
+            ::apache::thrift::protocol::TType _etype888;
+            xfer += iprot->readListBegin(_etype888, _size885);
+            this->group_names.resize(_size885);
+            uint32_t _i889;
+            for (_i889 = 0; _i889 < _size885; ++_i889)
             {
-              xfer += iprot->readString(this->group_names[_i871]);
+              xfer += iprot->readString(this->group_names[_i889]);
             }
             xfer += iprot->readListEnd();
           }
@@ -23128,10 +23289,10 @@ uint32_t ThriftHiveMetastore_get_privilege_set_args::write(::apache::thrift::pro
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter872;
-    for (_iter872 = this->group_names.begin(); _iter872 != this->group_names.end(); ++_iter872)
+    std::vector<std::string> ::const_iterator _iter890;
+    for (_iter890 = this->group_names.begin(); _iter890 != this->group_names.end(); ++_iter890)
     {
-      xfer += oprot->writeString((*_iter872));
+      xfer += oprot->writeString((*_iter890));
     }
     xfer += oprot->writeListEnd();
   }
@@ -23157,10 +23318,10 @@ uint32_t ThriftHiveMetastore_get_privilege_set_pargs::write(::apache::thrift::pr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 3);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter873;
-    for (_iter873 = (*(this->group_names)).begin(); _iter873 != (*(this->group_names)).end(); ++_iter873)
+    std::vector<std::string> ::const_iterator _iter891;
+    for (_iter891 = (*(this->group_names)).begin(); _iter891 != (*(this->group_names)).end(); ++_iter891)
     {
-      xfer += oprot->writeString((*_iter873));
+      xfer += oprot->writeString((*_iter891));
     }
     xfer += oprot->writeListEnd();
   }
@@ -23317,9 +23478,9 @@ uint32_t ThriftHiveMetastore_list_privileges_args::read(::apache::thrift::protoc
         break;
       case 2:
         if (ftype == ::apache::thrift::protocol::T_I32) {
-          int32_t ecast874;
-          xfer += iprot->readI32(ecast874);
-          this->principal_type = (PrincipalType::type)ecast874;
+          int32_t ecast892;
+          xfer += iprot->readI32(ecast892);
+          this->principal_type = (PrincipalType::type)ecast892;
           this->__isset.principal_type = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -23411,14 +23572,14 @@ uint32_t ThriftHiveMetastore_list_privileges_result::read(::apache::thrift::prot
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size875;
-            ::apache::thrift::protocol::TType _etype878;
-            xfer += iprot->readListBegin(_etype878, _size875);
-            this->success.resize(_size875);
-            uint32_t _i879;
-            for (_i879 = 0; _i879 < _size875; ++_i879)
+            uint32_t _size893;
+            ::apache::thrift::protocol::TType _etype896;
+            xfer += iprot->readListBegin(_etype896, _size893);
+            this->success.resize(_size893);
+            uint32_t _i897;
+            for (_i897 = 0; _i897 < _size893; ++_i897)
             {
-              xfer += this->success[_i879].read(iprot);
+              xfer += this->success[_i897].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -23457,10 +23618,10 @@ uint32_t ThriftHiveMetastore_list_privileges_result::write(::apache::thrift::pro
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
-      std::vector<HiveObjectPrivilege> ::const_iterator _iter880;
-      for (_iter880 = this->success.begin(); _iter880 != this->success.end(); ++_iter880)
+      std::vector<HiveObjectPrivilege> ::const_iterator _iter898;
+      for (_iter898 = this->success.begin(); _iter898 != this->success.end(); ++_iter898)
       {
-        xfer += (*_iter880).write(oprot);
+        xfer += (*_iter898).write(oprot);
       }
       xfer += oprot->writeListEnd();
     }
@@ -23499,14 +23660,14 @@ uint32_t ThriftHiveMetastore_list_privileges_presult::read(::apache::thrift::pro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size881;
-            ::apache::thrift::protocol::TType _etype884;
-            xfer += iprot->readListBegin(_etype884, _size881);
-            (*(this->success)).resize(_size881);
-            uint32_t _i885;
-            for (_i885 = 0; _i885 < _size881; ++_i885)
+            uint32_t _size899;
+            ::apache::thrift::protocol::TType _etype902;
+            xfer += iprot->readListBegin(_etype902, _size899);
+            (*(this->success)).resize(_size899);
+            uint32_t _i903;
+            for (_i903 = 0; _i903 < _size899; ++_i903)
             {
-              xfer += (*(this->success))[_i885].read(iprot);
+              xfer += (*(this->success))[_i903].read(iprot);
             }
             xfer += iprot->readListEnd();
           }
@@ -24113,14 +24274,14 @@ uint32_t ThriftHiveMetastore_set_ugi_args::read(::apache::thrift::protocol::TPro
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->group_names.clear();
-            uint32_t _size886;
-            ::apache::thrift::protocol::TType _etype889;
-            xfer += iprot->readListBegin(_etype889, _size886);
-            this->group_names.resize(_size886);
-            uint32_t _i890;
-            for (_i890 = 0; _i890 < _size886; ++_i890)
+            uint32_t _size904;
+            ::apache::thrift::protocol::TType _etype907;
+            xfer += iprot->readListBegin(_etype907, _size904);
+            this->group_names.resize(_size904);
+            uint32_t _i908;
+            for (_i908 = 0; _i908 < _size904; ++_i908)
             {
-              xfer += iprot->readString(this->group_names[_i890]);
+              xfer += iprot->readString(this->group_names[_i908]);
             }
             xfer += iprot->readListEnd();
           }
@@ -24152,10 +24313,10 @@ uint32_t ThriftHiveMetastore_set_ugi_args::write(::apache::thrift::protocol::TPr
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->group_names.size()));
-    std::vector<std::string> ::const_iterator _iter891;
-    for (_iter891 = this->group_names.begin(); _iter891 != this->group_names.end(); ++_iter891)
+    std::vector<std::string> ::const_iterator _iter909;
+    for (_iter909 = this->group_names.begin(); _iter909 != this->group_names.end(); ++_iter909)
     {
-      xfer += oprot->writeString((*_iter891));
+      xfer += oprot->writeString((*_iter909));
     }
     xfer += oprot->writeListEnd();
   }
@@ -24177,10 +24338,10 @@ uint32_t ThriftHiveMetastore_set_ugi_pargs::write(::apache::thrift::protocol::TP
   xfer += oprot->writeFieldBegin("group_names", ::apache::thrift::protocol::T_LIST, 2);
   {
     xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->group_names)).size()));
-    std::vector<std::string> ::const_iterator _iter892;
-    for (_iter892 = (*(this->group_names)).begin(); _iter892 != (*(this->group_names)).end(); ++_iter892)
+    std::vector<std::string> ::const_iterator _iter910;
+    for (_iter910 = (*(this->group_names)).begin(); _iter910 != (*(this->group_names)).end(); ++_iter910)
     {
-      xfer += oprot->writeString((*_iter892));
+      xfer += oprot->writeString((*_iter910));
     }
     xfer += oprot->writeListEnd();
   }
@@ -24215,14 +24376,14 @@ uint32_t ThriftHiveMetastore_set_ugi_result::read(::apache::thrift::protocol::TP
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             this->success.clear();
-            uint32_t _size893;
-            ::apache::thrift::protocol::TType _etype896;
-            xfer += iprot->readListBegin(_etype896, _size893);
-            this->success.resize(_size893);
-            uint32_t _i897;
-            for (_i897 = 0; _i897 < _size893; ++_i897)
+            uint32_t _size911;
+            ::apache::thrift::protocol::TType _etype914;
+            xfer += iprot->readListBegin(_etype914, _size911);
+            this->success.resize(_size911);
+            uint32_t _i915;
+            for (_i915 = 0; _i915 < _size911; ++_i915)
             {
-              xfer += iprot->readString(this->success[_i897]);
+              xfer += iprot->readString(this->success[_i915]);
             }
             xfer += iprot->readListEnd();
           }
@@ -24261,10 +24422,10 @@ uint32_t ThriftHiveMetastore_set_ugi_result::write(::apache::thrift::protocol::T
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
     {
       xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
-      std::vector<std::string> ::const_iterator _iter898;
-      for (_iter898 = this->success.begin(); _iter898 != this->success.end(); ++_iter898)
+      std::vector<std::string> ::const_iterator _iter916;
+      for (_iter916 = this->success.begin(); _iter916 != this->success.end(); ++_iter916)
       {
-        xfer += oprot->writeString((*_iter898));
+        xfer += oprot->writeString((*_iter916));
       }
       xfer += oprot->writeListEnd();
     }
@@ -24303,14 +24464,14 @@ uint32_t ThriftHiveMetastore_set_ugi_presult::read(::apache::thrift::protocol::T
         if (ftype == ::apache::thrift::protocol::T_LIST) {
           {
             (*(this->success)).clear();
-            uint32_t _size899;
-            ::apache::thrift::protocol::TType _etype902;
-            xfer += iprot->readListBegin(_etype902, _size899);
-            (*(this->success)).resize(_size899);
-            uint32_t _i903;
-            for (_i903 = 0; _i903 < _size899; ++_i903)
+            uint32_t _size917;
+            ::apache::thrift::protocol::TType _etype920;
+            xfer += iprot->readListBegin(_etype920, _size917);
+            (*(this->success)).resize(_size917);
+            uint32_t _i921;
+            for (_i921 = 0; _i921 < _size917; ++_i921)
             {
-              xfer += iprot->readString((*(this->success))[_i903]);
+              xfer += iprot->readString((*(this->success))[_i921]);
             }
             xfer += iprot->readListEnd();
           }
@@ -33036,6 +33197,66 @@ void ThriftHiveMetastoreClient::recv_get_function(Function& _return)
   throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_function failed: unknown result");
 }
 
+void ThriftHiveMetastoreClient::get_all_functions(GetAllFunctionsResponse& _return)
+{
+  send_get_all_functions();
+  recv_get_all_functions(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_all_functions()
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_all_functions_pargs args;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_all_functions(GetAllFunctionsResponse& _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_all_functions") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_all_functions_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_functions failed: unknown result");
+}
+
 bool ThriftHiveMetastoreClient::create_role(const Role& role)
 {
   send_create_role(role);
@@ -40272,6 +40493,63 @@ void ThriftHiveMetastoreProcessor::process_get_function(int32_t seqid, ::apache:
   }
 }
 
+void ThriftHiveMetastoreProcessor::process_get_all_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_functions", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_functions");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_functions");
+  }
+
+  ThriftHiveMetastore_get_all_functions_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_functions", bytes);
+  }
+
+  ThriftHiveMetastore_get_all_functions_result result;
+  try {
+    iface_->get_all_functions(result.success);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_functions");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_functions");
+  }
+
+  oprot->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_functions", bytes);
+  }
+}
+
 void ThriftHiveMetastoreProcessor::process_create_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
index 488c746..a191d44 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
@@ -102,6 +102,7 @@ class ThriftHiveMetastoreIf : virtual public  ::facebook::fb303::FacebookService
   virtual void alter_function(const std::string& dbName, const std::string& funcName, const Function& newFunc) = 0;
   virtual void get_functions(std::vector<std::string> & _return, const std::string& dbName, const std::string& pattern) = 0;
   virtual void get_function(Function& _return, const std::string& dbName, const std::string& funcName) = 0;
+  virtual void get_all_functions(GetAllFunctionsResponse& _return) = 0;
   virtual bool create_role(const Role& role) = 0;
   virtual bool drop_role(const std::string& role_name) = 0;
   virtual void get_role_names(std::vector<std::string> & _return) = 0;
@@ -438,6 +439,9 @@ class ThriftHiveMetastoreNull : virtual public ThriftHiveMetastoreIf , virtual p
   void get_function(Function& /* _return */, const std::string& /* dbName */, const std::string& /* funcName */) {
     return;
   }
+  void get_all_functions(GetAllFunctionsResponse& /* _return */) {
+    return;
+  }
   bool create_role(const Role& /* role */) {
     bool _return = false;
     return _return;
@@ -12903,6 +12907,110 @@ class ThriftHiveMetastore_get_function_presult {
 
 };
 
+
+class ThriftHiveMetastore_get_all_functions_args {
+ public:
+
+  ThriftHiveMetastore_get_all_functions_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_all_functions_args() throw() {}
+
+
+  bool operator == (const ThriftHiveMetastore_get_all_functions_args & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_all_functions_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_all_functions_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_all_functions_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_all_functions_pargs() throw() {}
+
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_all_functions_result__isset {
+  _ThriftHiveMetastore_get_all_functions_result__isset() : success(false), o1(false) {}
+  bool success;
+  bool o1;
+} _ThriftHiveMetastore_get_all_functions_result__isset;
+
+class ThriftHiveMetastore_get_all_functions_result {
+ public:
+
+  ThriftHiveMetastore_get_all_functions_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_all_functions_result() throw() {}
+
+  GetAllFunctionsResponse success;
+  MetaException o1;
+
+  _ThriftHiveMetastore_get_all_functions_result__isset __isset;
+
+  void __set_success(const GetAllFunctionsResponse& val) {
+    success = val;
+  }
+
+  void __set_o1(const MetaException& val) {
+    o1 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_all_functions_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    if (!(o1 == rhs.o1))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_all_functions_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_all_functions_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_all_functions_presult__isset {
+  _ThriftHiveMetastore_get_all_functions_presult__isset() : success(false), o1(false) {}
+  bool success;
+  bool o1;
+} _ThriftHiveMetastore_get_all_functions_presult__isset;
+
+class ThriftHiveMetastore_get_all_functions_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_all_functions_presult() throw() {}
+
+  GetAllFunctionsResponse* success;
+  MetaException o1;
+
+  _ThriftHiveMetastore_get_all_functions_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
 typedef struct _ThriftHiveMetastore_create_role_args__isset {
   _ThriftHiveMetastore_create_role_args__isset() : role(false) {}
   bool role;
@@ -17047,6 +17155,9 @@ class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public
   void get_function(Function& _return, const std::string& dbName, const std::string& funcName);
   void send_get_function(const std::string& dbName, const std::string& funcName);
   void recv_get_function(Function& _return);
+  void get_all_functions(GetAllFunctionsResponse& _return);
+  void send_get_all_functions();
+  void recv_get_all_functions(GetAllFunctionsResponse& _return);
   bool create_role(const Role& role);
   void send_create_role(const Role& role);
   bool recv_create_role();
@@ -17242,6 +17353,7 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
   void process_alter_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_all_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_create_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_drop_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_role_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
@@ -17365,6 +17477,7 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
     processMap_["alter_function"] = &ThriftHiveMetastoreProcessor::process_alter_function;
     processMap_["get_functions"] = &ThriftHiveMetastoreProcessor::process_get_functions;
     processMap_["get_function"] = &ThriftHiveMetastoreProcessor::process_get_function;
+    processMap_["get_all_functions"] = &ThriftHiveMetastoreProcessor::process_get_all_functions;
     processMap_["create_role"] = &ThriftHiveMetastoreProcessor::process_create_role;
     processMap_["drop_role"] = &ThriftHiveMetastoreProcessor::process_drop_role;
     processMap_["get_role_names"] = &ThriftHiveMetastoreProcessor::process_get_role_names;
@@ -18255,6 +18368,16 @@ class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, publi
     return;
   }
 
+  void get_all_functions(GetAllFunctionsResponse& _return) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_all_functions(_return);
+    }
+    ifaces_[i]->get_all_functions(_return);
+    return;
+  }
+
   bool create_role(const Role& role) {
     size_t sz = ifaces_.size();
     size_t i = 0;
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
index e2d41c1..43bbbc4 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
@@ -452,6 +452,11 @@ class ThriftHiveMetastoreHandler : virtual public ThriftHiveMetastoreIf {
     printf("get_function\n");
   }
 
+  void get_all_functions(GetAllFunctionsResponse& _return) {
+    // Your implementation goes here
+    printf("get_all_functions\n");
+  }
+
   bool create_role(const Role& role) {
     // Your implementation goes here
     printf("create_role\n");
diff --git a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
index 63180c1..681ed12 100644
--- a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.cpp
@@ -9650,6 +9650,423 @@ void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b) {
   swap(a.eventId, b.eventId);
 }
 
+const char* InsertEventRequestData::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
+const uint8_t InsertEventRequestData::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};
+
+uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+  bool isset_filesAdded = false;
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->filesAdded.clear();
+            uint32_t _size407;
+            ::apache::thrift::protocol::TType _etype410;
+            xfer += iprot->readListBegin(_etype410, _size407);
+            this->filesAdded.resize(_size407);
+            uint32_t _i411;
+            for (_i411 = 0; _i411 < _size407; ++_i411)
+            {
+              xfer += iprot->readString(this->filesAdded[_i411]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          isset_filesAdded = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  if (!isset_filesAdded)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
+  return xfer;
+}
+
+uint32_t InsertEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("InsertEventRequestData");
+
+  xfer += oprot->writeFieldBegin("filesAdded", ::apache::thrift::protocol::T_LIST, 1);
+  {
+    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filesAdded.size()));
+    std::vector<std::string> ::const_iterator _iter412;
+    for (_iter412 = this->filesAdded.begin(); _iter412 != this->filesAdded.end(); ++_iter412)
+    {
+      xfer += oprot->writeString((*_iter412));
+    }
+    xfer += oprot->writeListEnd();
+  }
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+void swap(InsertEventRequestData &a, InsertEventRequestData &b) {
+  using ::std::swap;
+  swap(a.filesAdded, b.filesAdded);
+}
+
+const char* FireEventRequestData::ascii_fingerprint = "187E754B26707EE32451E6A27FB672CE";
+const uint8_t FireEventRequestData::binary_fingerprint[16] = {0x18,0x7E,0x75,0x4B,0x26,0x70,0x7E,0xE3,0x24,0x51,0xE6,0xA2,0x7F,0xB6,0x72,0xCE};
+
+uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->insertData.read(iprot);
+          this->__isset.insertData = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t FireEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("FireEventRequestData");
+
+  xfer += oprot->writeFieldBegin("insertData", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->insertData.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+void swap(FireEventRequestData &a, FireEventRequestData &b) {
+  using ::std::swap;
+  swap(a.insertData, b.insertData);
+  swap(a.__isset, b.__isset);
+}
+
+const char* FireEventRequest::ascii_fingerprint = "1BA3A7F00159254072C3979B1429B50B";
+const uint8_t FireEventRequest::binary_fingerprint[16] = {0x1B,0xA3,0xA7,0xF0,0x01,0x59,0x25,0x40,0x72,0xC3,0x97,0x9B,0x14,0x29,0xB5,0x0B};
+
+uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+  bool isset_successful = false;
+  bool isset_data = false;
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool(this->successful);
+          isset_successful = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->data.read(iprot);
+          isset_data = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->dbName);
+          this->__isset.dbName = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 4:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->tableName);
+          this->__isset.tableName = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 5:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->partitionVals.clear();
+            uint32_t _size413;
+            ::apache::thrift::protocol::TType _etype416;
+            xfer += iprot->readListBegin(_etype416, _size413);
+            this->partitionVals.resize(_size413);
+            uint32_t _i417;
+            for (_i417 = 0; _i417 < _size413; ++_i417)
+            {
+              xfer += iprot->readString(this->partitionVals[_i417]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.partitionVals = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  if (!isset_successful)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
+  if (!isset_data)
+    throw TProtocolException(TProtocolException::INVALID_DATA);
+  return xfer;
+}
+
+uint32_t FireEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("FireEventRequest");
+
+  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 1);
+  xfer += oprot->writeBool(this->successful);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
+  xfer += this->data.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  if (this->__isset.dbName) {
+    xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 3);
+    xfer += oprot->writeString(this->dbName);
+    xfer += oprot->writeFieldEnd();
+  }
+  if (this->__isset.tableName) {
+    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 4);
+    xfer += oprot->writeString(this->tableName);
+    xfer += oprot->writeFieldEnd();
+  }
+  if (this->__isset.partitionVals) {
+    xfer += oprot->writeFieldBegin("partitionVals", ::apache::thrift::protocol::T_LIST, 5);
+    {
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionVals.size()));
+      std::vector<std::string> ::const_iterator _iter418;
+      for (_iter418 = this->partitionVals.begin(); _iter418 != this->partitionVals.end(); ++_iter418)
+      {
+        xfer += oprot->writeString((*_iter418));
+      }
+      xfer += oprot->writeListEnd();
+    }
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+void swap(FireEventRequest &a, FireEventRequest &b) {
+  using ::std::swap;
+  swap(a.successful, b.successful);
+  swap(a.data, b.data);
+  swap(a.dbName, b.dbName);
+  swap(a.tableName, b.tableName);
+  swap(a.partitionVals, b.partitionVals);
+  swap(a.__isset, b.__isset);
+}
+
+const char* FireEventResponse::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
+const uint8_t FireEventResponse::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};
+
+uint32_t FireEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t FireEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("FireEventResponse");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+void swap(FireEventResponse &a, FireEventResponse &b) {
+  using ::std::swap;
+  (void) a;
+  (void) b;
+}
+
+const char* GetAllFunctionsResponse::ascii_fingerprint = "CEE0CA1D7402D4135EF7F42C0F0E0A68";
+const uint8_t GetAllFunctionsResponse::binary_fingerprint[16] = {0xCE,0xE0,0xCA,0x1D,0x74,0x02,0xD4,0x13,0x5E,0xF7,0xF4,0x2C,0x0F,0x0E,0x0A,0x68};
+
+uint32_t GetAllFunctionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->functions.clear();
+            uint32_t _size419;
+            ::apache::thrift::protocol::TType _etype422;
+            xfer += iprot->readListBegin(_etype422, _size419);
+            this->functions.resize(_size419);
+            uint32_t _i423;
+            for (_i423 = 0; _i423 < _size419; ++_i423)
+            {
+              xfer += this->functions[_i423].read(iprot);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.functions = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t GetAllFunctionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("GetAllFunctionsResponse");
+
+  if (this->__isset.functions) {
+    xfer += oprot->writeFieldBegin("functions", ::apache::thrift::protocol::T_LIST, 1);
+    {
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->functions.size()));
+      std::vector<Function> ::const_iterator _iter424;
+      for (_iter424 = this->functions.begin(); _iter424 != this->functions.end(); ++_iter424)
+      {
+        xfer += (*_iter424).write(oprot);
+      }
+      xfer += oprot->writeListEnd();
+    }
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b) {
+  using ::std::swap;
+  swap(a.functions, b.functions);
+  swap(a.__isset, b.__isset);
+}
+
 const char* MetaException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
 const uint8_t MetaException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};
 
diff --git a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
index b818c47..fab89f9 100644
--- a/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
+++ b/metastore/src/gen/thrift/gen-cpp/hive_metastore_types.h
@@ -5290,6 +5290,244 @@ class CurrentNotificationEventId {
 
 void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b);
 
+
+class InsertEventRequestData {
+ public:
+
+  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
+  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};
+
+  InsertEventRequestData() {
+  }
+
+  virtual ~InsertEventRequestData() throw() {}
+
+  std::vector<std::string>  filesAdded;
+
+  void __set_filesAdded(const std::vector<std::string> & val) {
+    filesAdded = val;
+  }
+
+  bool operator == (const InsertEventRequestData & rhs) const
+  {
+    if (!(filesAdded == rhs.filesAdded))
+      return false;
+    return true;
+  }
+  bool operator != (const InsertEventRequestData &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const InsertEventRequestData & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+void swap(InsertEventRequestData &a, InsertEventRequestData &b);
+
+typedef struct _FireEventRequestData__isset {
+  _FireEventRequestData__isset() : insertData(false) {}
+  bool insertData;
+} _FireEventRequestData__isset;
+
+class FireEventRequestData {
+ public:
+
+  static const char* ascii_fingerprint; // = "187E754B26707EE32451E6A27FB672CE";
+  static const uint8_t binary_fingerprint[16]; // = {0x18,0x7E,0x75,0x4B,0x26,0x70,0x7E,0xE3,0x24,0x51,0xE6,0xA2,0x7F,0xB6,0x72,0xCE};
+
+  FireEventRequestData() {
+  }
+
+  virtual ~FireEventRequestData() throw() {}
+
+  InsertEventRequestData insertData;
+
+  _FireEventRequestData__isset __isset;
+
+  void __set_insertData(const InsertEventRequestData& val) {
+    insertData = val;
+  }
+
+  bool operator == (const FireEventRequestData & rhs) const
+  {
+    if (!(insertData == rhs.insertData))
+      return false;
+    return true;
+  }
+  bool operator != (const FireEventRequestData &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const FireEventRequestData & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+void swap(FireEventRequestData &a, FireEventRequestData &b);
+
+typedef struct _FireEventRequest__isset {
+  _FireEventRequest__isset() : dbName(false), tableName(false), partitionVals(false) {}
+  bool dbName;
+  bool tableName;
+  bool partitionVals;
+} _FireEventRequest__isset;
+
+class FireEventRequest {
+ public:
+
+  static const char* ascii_fingerprint; // = "1BA3A7F00159254072C3979B1429B50B";
+  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xA3,0xA7,0xF0,0x01,0x59,0x25,0x40,0x72,0xC3,0x97,0x9B,0x14,0x29,0xB5,0x0B};
+
+  FireEventRequest() : successful(0), dbName(), tableName() {
+  }
+
+  virtual ~FireEventRequest() throw() {}
+
+  bool successful;
+  FireEventRequestData data;
+  std::string dbName;
+  std::string tableName;
+  std::vector<std::string>  partitionVals;
+
+  _FireEventRequest__isset __isset;
+
+  void __set_successful(const bool val) {
+    successful = val;
+  }
+
+  void __set_data(const FireEventRequestData& val) {
+    data = val;
+  }
+
+  void __set_dbName(const std::string& val) {
+    dbName = val;
+    __isset.dbName = true;
+  }
+
+  void __set_tableName(const std::string& val) {
+    tableName = val;
+    __isset.tableName = true;
+  }
+
+  void __set_partitionVals(const std::vector<std::string> & val) {
+    partitionVals = val;
+    __isset.partitionVals = true;
+  }
+
+  bool operator == (const FireEventRequest & rhs) const
+  {
+    if (!(successful == rhs.successful))
+      return false;
+    if (!(data == rhs.data))
+      return false;
+    if (__isset.dbName != rhs.__isset.dbName)
+      return false;
+    else if (__isset.dbName && !(dbName == rhs.dbName))
+      return false;
+    if (__isset.tableName != rhs.__isset.tableName)
+      return false;
+    else if (__isset.tableName && !(tableName == rhs.tableName))
+      return false;
+    if (__isset.partitionVals != rhs.__isset.partitionVals)
+      return false;
+    else if (__isset.partitionVals && !(partitionVals == rhs.partitionVals))
+      return false;
+    return true;
+  }
+  bool operator != (const FireEventRequest &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const FireEventRequest & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+void swap(FireEventRequest &a, FireEventRequest &b);
+
+
+class FireEventResponse {
+ public:
+
+  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
+  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};
+
+  FireEventResponse() {
+  }
+
+  virtual ~FireEventResponse() throw() {}
+
+
+  bool operator == (const FireEventResponse & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const FireEventResponse &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const FireEventResponse & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+void swap(FireEventResponse &a, FireEventResponse &b);
+
+typedef struct _GetAllFunctionsResponse__isset {
+  _GetAllFunctionsResponse__isset() : functions(false) {}
+  bool functions;
+} _GetAllFunctionsResponse__isset;
+
+class GetAllFunctionsResponse {
+ public:
+
+  static const char* ascii_fingerprint; // = "CEE0CA1D7402D4135EF7F42C0F0E0A68";
+  static const uint8_t binary_fingerprint[16]; // = {0xCE,0xE0,0xCA,0x1D,0x74,0x02,0xD4,0x13,0x5E,0xF7,0xF4,0x2C,0x0F,0x0E,0x0A,0x68};
+
+  GetAllFunctionsResponse() {
+  }
+
+  virtual ~GetAllFunctionsResponse() throw() {}
+
+  std::vector<Function>  functions;
+
+  _GetAllFunctionsResponse__isset __isset;
+
+  void __set_functions(const std::vector<Function> & val) {
+    functions = val;
+    __isset.functions = true;
+  }
+
+  bool operator == (const GetAllFunctionsResponse & rhs) const
+  {
+    if (__isset.functions != rhs.__isset.functions)
+      return false;
+    else if (__isset.functions && !(functions == rhs.functions))
+      return false;
+    return true;
+  }
+  bool operator != (const GetAllFunctionsResponse &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const GetAllFunctionsResponse & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b);
+
 typedef struct _MetaException__isset {
   _MetaException__isset() : message(false) {}
   bool message;
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
new file mode 100644
index 0000000..e2dc5af
--- /dev/null
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequest.java
@@ -0,0 +1,860 @@
+/**
+ * Autogenerated by Thrift Compiler (0.9.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ *  @generated
+ */
+package org.apache.hadoop.hive.metastore.api;
+
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.thrift.scheme.IScheme;
+import org.apache.thrift.scheme.SchemeFactory;
+import org.apache.thrift.scheme.StandardScheme;
+
+import org.apache.thrift.scheme.TupleScheme;
+import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.BitSet;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class FireEventRequest implements org.apache.thrift.TBase<FireEventRequest, FireEventRequest._Fields>, java.io.Serializable, Cloneable {
+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireEventRequest");
+
+  private static final org.apache.thrift.protocol.TField SUCCESSFUL_FIELD_DESC = new org.apache.thrift.protocol.TField("successful", org.apache.thrift.protocol.TType.BOOL, (short)1);
+  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)3);
+  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)4);
+  private static final org.apache.thrift.protocol.TField PARTITION_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionVals", org.apache.thrift.protocol.TType.LIST, (short)5);
+
+  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+  static {
+    schemes.put(StandardScheme.class, new FireEventRequestStandardSchemeFactory());
+    schemes.put(TupleScheme.class, new FireEventRequestTupleSchemeFactory());
+  }
+
+  private boolean successful; // required
+  private FireEventRequestData data; // required
+  private String dbName; // optional
+  private String tableName; // optional
+  private List<String> partitionVals; // optional
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+    SUCCESSFUL((short)1, "successful"),
+    DATA((short)2, "data"),
+    DB_NAME((short)3, "dbName"),
+    TABLE_NAME((short)4, "tableName"),
+    PARTITION_VALS((short)5, "partitionVals");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // SUCCESSFUL
+          return SUCCESSFUL;
+        case 2: // DATA
+          return DATA;
+        case 3: // DB_NAME
+          return DB_NAME;
+        case 4: // TABLE_NAME
+          return TABLE_NAME;
+        case 5: // PARTITION_VALS
+          return PARTITION_VALS;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  // isset id assignments
+  private static final int __SUCCESSFUL_ISSET_ID = 0;
+  private byte __isset_bitfield = 0;
+  private _Fields optionals[] = {_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.PARTITION_VALS};
+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.SUCCESSFUL, new org.apache.thrift.meta_data.FieldMetaData("successful", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
+    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FireEventRequestData.class)));
+    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+    tmpMap.put(_Fields.PARTITION_VALS, new org.apache.thrift.meta_data.FieldMetaData("partitionVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
+        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireEventRequest.class, metaDataMap);
+  }
+
+  public FireEventRequest() {
+  }
+
+  public FireEventRequest(
+    boolean successful,
+    FireEventRequestData data)
+  {
+    this();
+    this.successful = successful;
+    setSuccessfulIsSet(true);
+    this.data = data;
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public FireEventRequest(FireEventRequest other) {
+    __isset_bitfield = other.__isset_bitfield;
+    this.successful = other.successful;
+    if (other.isSetData()) {
+      this.data = new FireEventRequestData(other.data);
+    }
+    if (other.isSetDbName()) {
+      this.dbName = other.dbName;
+    }
+    if (other.isSetTableName()) {
+      this.tableName = other.tableName;
+    }
+    if (other.isSetPartitionVals()) {
+      List<String> __this__partitionVals = new ArrayList<String>();
+      for (String other_element : other.partitionVals) {
+        __this__partitionVals.add(other_element);
+      }
+      this.partitionVals = __this__partitionVals;
+    }
+  }
+
+  public FireEventRequest deepCopy() {
+    return new FireEventRequest(this);
+  }
+
+  @Override
+  public void clear() {
+    setSuccessfulIsSet(false);
+    this.successful = false;
+    this.data = null;
+    this.dbName = null;
+    this.tableName = null;
+    this.partitionVals = null;
+  }
+
+  public boolean isSuccessful() {
+    return this.successful;
+  }
+
+  public void setSuccessful(boolean successful) {
+    this.successful = successful;
+    setSuccessfulIsSet(true);
+  }
+
+  public void unsetSuccessful() {
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID);
+  }
+
+  /** Returns true if field successful is set (has been assigned a value) and false otherwise */
+  public boolean isSetSuccessful() {
+    return EncodingUtils.testBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID);
+  }
+
+  public void setSuccessfulIsSet(boolean value) {
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESSFUL_ISSET_ID, value);
+  }
+
+  public FireEventRequestData getData() {
+    return this.data;
+  }
+
+  public void setData(FireEventRequestData data) {
+    this.data = data;
+  }
+
+  public void unsetData() {
+    this.data = null;
+  }
+
+  /** Returns true if field data is set (has been assigned a value) and false otherwise */
+  public boolean isSetData() {
+    return this.data != null;
+  }
+
+  public void setDataIsSet(boolean value) {
+    if (!value) {
+      this.data = null;
+    }
+  }
+
+  public String getDbName() {
+    return this.dbName;
+  }
+
+  public void setDbName(String dbName) {
+    this.dbName = dbName;
+  }
+
+  public void unsetDbName() {
+    this.dbName = null;
+  }
+
+  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
+  public boolean isSetDbName() {
+    return this.dbName != null;
+  }
+
+  public void setDbNameIsSet(boolean value) {
+    if (!value) {
+      this.dbName = null;
+    }
+  }
+
+  public String getTableName() {
+    return this.tableName;
+  }
+
+  public void setTableName(String tableName) {
+    this.tableName = tableName;
+  }
+
+  public void unsetTableName() {
+    this.tableName = null;
+  }
+
+  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
+  public boolean isSetTableName() {
+    return this.tableName != null;
+  }
+
+  public void setTableNameIsSet(boolean value) {
+    if (!value) {
+      this.tableName = null;
+    }
+  }
+
+  public int getPartitionValsSize() {
+    return (this.partitionVals == null) ? 0 : this.partitionVals.size();
+  }
+
+  public java.util.Iterator<String> getPartitionValsIterator() {
+    return (this.partitionVals == null) ? null : this.partitionVals.iterator();
+  }
+
+  public void addToPartitionVals(String elem) {
+    if (this.partitionVals == null) {
+      this.partitionVals = new ArrayList<String>();
+    }
+    this.partitionVals.add(elem);
+  }
+
+  public List<String> getPartitionVals() {
+    return this.partitionVals;
+  }
+
+  public void setPartitionVals(List<String> partitionVals) {
+    this.partitionVals = partitionVals;
+  }
+
+  public void unsetPartitionVals() {
+    this.partitionVals = null;
+  }
+
+  /** Returns true if field partitionVals is set (has been assigned a value) and false otherwise */
+  public boolean isSetPartitionVals() {
+    return this.partitionVals != null;
+  }
+
+  public void setPartitionValsIsSet(boolean value) {
+    if (!value) {
+      this.partitionVals = null;
+    }
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    case SUCCESSFUL:
+      if (value == null) {
+        unsetSuccessful();
+      } else {
+        setSuccessful((Boolean)value);
+      }
+      break;
+
+    case DATA:
+      if (value == null) {
+        unsetData();
+      } else {
+        setData((FireEventRequestData)value);
+      }
+      break;
+
+    case DB_NAME:
+      if (value == null) {
+        unsetDbName();
+      } else {
+        setDbName((String)value);
+      }
+      break;
+
+    case TABLE_NAME:
+      if (value == null) {
+        unsetTableName();
+      } else {
+        setTableName((String)value);
+      }
+      break;
+
+    case PARTITION_VALS:
+      if (value == null) {
+        unsetPartitionVals();
+      } else {
+        setPartitionVals((List<String>)value);
+      }
+      break;
+
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    case SUCCESSFUL:
+      return Boolean.valueOf(isSuccessful());
+
+    case DATA:
+      return getData();
+
+    case DB_NAME:
+      return getDbName();
+
+    case TABLE_NAME:
+      return getTableName();
+
+    case PARTITION_VALS:
+      return getPartitionVals();
+
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    case SUCCESSFUL:
+      return isSetSuccessful();
+    case DATA:
+      return isSetData();
+    case DB_NAME:
+      return isSetDbName();
+    case TABLE_NAME:
+      return isSetTableName();
+    case PARTITION_VALS:
+      return isSetPartitionVals();
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof FireEventRequest)
+      return this.equals((FireEventRequest)that);
+    return false;
+  }
+
+  public boolean equals(FireEventRequest that) {
+    if (that == null)
+      return false;
+
+    boolean this_present_successful = true;
+    boolean that_present_successful = true;
+    if (this_present_successful || that_present_successful) {
+      if (!(this_present_successful && that_present_successful))
+        return false;
+      if (this.successful != that.successful)
+        return false;
+    }
+
+    boolean this_present_data = true && this.isSetData();
+    boolean that_present_data = true && that.isSetData();
+    if (this_present_data || that_present_data) {
+      if (!(this_present_data && that_present_data))
+        return false;
+      if (!this.data.equals(that.data))
+        return false;
+    }
+
+    boolean this_present_dbName = true && this.isSetDbName();
+    boolean that_present_dbName = true && that.isSetDbName();
+    if (this_present_dbName || that_present_dbName) {
+      if (!(this_present_dbName && that_present_dbName))
+        return false;
+      if (!this.dbName.equals(that.dbName))
+        return false;
+    }
+
+    boolean this_present_tableName = true && this.isSetTableName();
+    boolean that_present_tableName = true && that.isSetTableName();
+    if (this_present_tableName || that_present_tableName) {
+      if (!(this_present_tableName && that_present_tableName))
+        return false;
+      if (!this.tableName.equals(that.tableName))
+        return false;
+    }
+
+    boolean this_present_partitionVals = true && this.isSetPartitionVals();
+    boolean that_present_partitionVals = true && that.isSetPartitionVals();
+    if (this_present_partitionVals || that_present_partitionVals) {
+      if (!(this_present_partitionVals && that_present_partitionVals))
+        return false;
+      if (!this.partitionVals.equals(that.partitionVals))
+        return false;
+    }
+
+    return true;
+  }
+
+  @Override
+  public int hashCode() {
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_successful = true;
+    builder.append(present_successful);
+    if (present_successful)
+      builder.append(successful);
+
+    boolean present_data = true && (isSetData());
+    builder.append(present_data);
+    if (present_data)
+      builder.append(data);
+
+    boolean present_dbName = true && (isSetDbName());
+    builder.append(present_dbName);
+    if (present_dbName)
+      builder.append(dbName);
+
+    boolean present_tableName = true && (isSetTableName());
+    builder.append(present_tableName);
+    if (present_tableName)
+      builder.append(tableName);
+
+    boolean present_partitionVals = true && (isSetPartitionVals());
+    builder.append(present_partitionVals);
+    if (present_partitionVals)
+      builder.append(partitionVals);
+
+    return builder.toHashCode();
+  }
+
+  public int compareTo(FireEventRequest other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    FireEventRequest typedOther = (FireEventRequest)other;
+
+    lastComparison = Boolean.valueOf(isSetSuccessful()).compareTo(typedOther.isSetSuccessful());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetSuccessful()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successful, typedOther.successful);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetData()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(typedOther.isSetDbName());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetDbName()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, typedOther.dbName);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetTableName()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetPartitionVals()).compareTo(typedOther.isSetPartitionVals());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetPartitionVals()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionVals, typedOther.partitionVals);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+  }
+
+  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder("FireEventRequest(");
+    boolean first = true;
+
+    sb.append("successful:");
+    sb.append(this.successful);
+    first = false;
+    if (!first) sb.append(", ");
+    sb.append("data:");
+    if (this.data == null) {
+      sb.append("null");
+    } else {
+      sb.append(this.data);
+    }
+    first = false;
+    if (isSetDbName()) {
+      if (!first) sb.append(", ");
+      sb.append("dbName:");
+      if (this.dbName == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.dbName);
+      }
+      first = false;
+    }
+    if (isSetTableName()) {
+      if (!first) sb.append(", ");
+      sb.append("tableName:");
+      if (this.tableName == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.tableName);
+      }
+      first = false;
+    }
+    if (isSetPartitionVals()) {
+      if (!first) sb.append(", ");
+      sb.append("partitionVals:");
+      if (this.partitionVals == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.partitionVals);
+      }
+      first = false;
+    }
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws org.apache.thrift.TException {
+    // check for required fields
+    if (!isSetSuccessful()) {
+      throw new org.apache.thrift.protocol.TProtocolException("Required field 'successful' is unset! Struct:" + toString());
+    }
+
+    if (!isSetData()) {
+      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' is unset! Struct:" + toString());
+    }
+
+    // check for sub-struct validity
+  }
+
+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+    try {
+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+    try {
+      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+      __isset_bitfield = 0;
+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private static class FireEventRequestStandardSchemeFactory implements SchemeFactory {
+    public FireEventRequestStandardScheme getScheme() {
+      return new FireEventRequestStandardScheme();
+    }
+  }
+
+  private static class FireEventRequestStandardScheme extends StandardScheme<FireEventRequest> {
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot, FireEventRequest struct) throws org.apache.thrift.TException {
+      org.apache.thrift.protocol.TField schemeField;
+      iprot.readStructBegin();
+      while (true)
+      {
+        schemeField = iprot.readFieldBegin();
+        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+          break;
+        }
+        switch (schemeField.id) {
+          case 1: // SUCCESSFUL
+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
+              struct.successful = iprot.readBool();
+              struct.setSuccessfulIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          case 2: // DATA
+            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+              struct.data = new FireEventRequestData();
+              struct.data.read(iprot);
+              struct.setDataIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          case 3: // DB_NAME
+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+              struct.dbName = iprot.readString();
+              struct.setDbNameIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          case 4: // TABLE_NAME
+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+              struct.tableName = iprot.readString();
+              struct.setTableNameIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          case 5: // PARTITION_VALS
+            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+              {
+                org.apache.thrift.protocol.TList _list508 = iprot.readListBegin();
+                struct.partitionVals = new ArrayList<String>(_list508.size);
+                for (int _i509 = 0; _i509 < _list508.size; ++_i509)
+                {
+                  String _elem510; // required
+                  _elem510 = iprot.readString();
+                  struct.partitionVals.add(_elem510);
+                }
+                iprot.readListEnd();
+              }
+              struct.setPartitionValsIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          default:
+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+        }
+        iprot.readFieldEnd();
+      }
+      iprot.readStructEnd();
+      struct.validate();
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot, FireEventRequest struct) throws org.apache.thrift.TException {
+      struct.validate();
+
+      oprot.writeStructBegin(STRUCT_DESC);
+      oprot.writeFieldBegin(SUCCESSFUL_FIELD_DESC);
+      oprot.writeBool(struct.successful);
+      oprot.writeFieldEnd();
+      if (struct.data != null) {
+        oprot.writeFieldBegin(DATA_FIELD_DESC);
+        struct.data.write(oprot);
+        oprot.writeFieldEnd();
+      }
+      if (struct.dbName != null) {
+        if (struct.isSetDbName()) {
+          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
+          oprot.writeString(struct.dbName);
+          oprot.writeFieldEnd();
+        }
+      }
+      if (struct.tableName != null) {
+        if (struct.isSetTableName()) {
+          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
+          oprot.writeString(struct.tableName);
+          oprot.writeFieldEnd();
+        }
+      }
+      if (struct.partitionVals != null) {
+        if (struct.isSetPartitionVals()) {
+          oprot.writeFieldBegin(PARTITION_VALS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partitionVals.size()));
+            for (String _iter511 : struct.partitionVals)
+            {
+              oprot.writeString(_iter511);
+            }
+            oprot.writeListEnd();
+          }
+          oprot.writeFieldEnd();
+        }
+      }
+      oprot.writeFieldStop();
+      oprot.writeStructEnd();
+    }
+
+  }
+
+  private static class FireEventRequestTupleSchemeFactory implements SchemeFactory {
+    public FireEventRequestTupleScheme getScheme() {
+      return new FireEventRequestTupleScheme();
+    }
+  }
+
+  private static class FireEventRequestTupleScheme extends TupleScheme<FireEventRequest> {
+
+    @Override
+    public void write(org.apache.thrift.protocol.TProtocol prot, FireEventRequest struct) throws org.apache.thrift.TException {
+      TTupleProtocol oprot = (TTupleProtocol) prot;
+      oprot.writeBool(struct.successful);
+      struct.data.write(oprot);
+      BitSet optionals = new BitSet();
+      if (struct.isSetDbName()) {
+        optionals.set(0);
+      }
+      if (struct.isSetTableName()) {
+        optionals.set(1);
+      }
+      if (struct.isSetPartitionVals()) {
+        optionals.set(2);
+      }
+      oprot.writeBitSet(optionals, 3);
+      if (struct.isSetDbName()) {
+        oprot.writeString(struct.dbName);
+      }
+      if (struct.isSetTableName()) {
+        oprot.writeString(struct.tableName);
+      }
+      if (struct.isSetPartitionVals()) {
+        {
+          oprot.writeI32(struct.partitionVals.size());
+          for (String _iter512 : struct.partitionVals)
+          {
+            oprot.writeString(_iter512);
+          }
+        }
+      }
+    }
+
+    @Override
+    public void read(org.apache.thrift.protocol.TProtocol prot, FireEventRequest struct) throws org.apache.thrift.TException {
+      TTupleProtocol iprot = (TTupleProtocol) prot;
+      struct.successful = iprot.readBool();
+      struct.setSuccessfulIsSet(true);
+      struct.data = new FireEventRequestData();
+      struct.data.read(iprot);
+      struct.setDataIsSet(true);
+      BitSet incoming = iprot.readBitSet(3);
+      if (incoming.get(0)) {
+        struct.dbName = iprot.readString();
+        struct.setDbNameIsSet(true);
+      }
+      if (incoming.get(1)) {
+        struct.tableName = iprot.readString();
+        struct.setTableNameIsSet(true);
+      }
+      if (incoming.get(2)) {
+        {
+          org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+          struct.partitionVals = new ArrayList<String>(_list513.size);
+          for (int _i514 = 0; _i514 < _list513.size; ++_i514)
+          {
+            String _elem515; // required
+            _elem515 = iprot.readString();
+            struct.partitionVals.add(_elem515);
+          }
+        }
+        struct.setPartitionValsIsSet(true);
+      }
+    }
+  }
+
+}
+
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java
new file mode 100644
index 0000000..008682e
--- /dev/null
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventRequestData.java
@@ -0,0 +1,305 @@
+/**
+ * Autogenerated by Thrift Compiler (0.9.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ *  @generated
+ */
+package org.apache.hadoop.hive.metastore.api;
+
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.thrift.scheme.IScheme;
+import org.apache.thrift.scheme.SchemeFactory;
+import org.apache.thrift.scheme.StandardScheme;
+
+import org.apache.thrift.scheme.TupleScheme;
+import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.BitSet;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class FireEventRequestData extends org.apache.thrift.TUnion<FireEventRequestData, FireEventRequestData._Fields> {
+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireEventRequestData");
+  private static final org.apache.thrift.protocol.TField INSERT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("insertData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+    INSERT_DATA((short)1, "insertData");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // INSERT_DATA
+          return INSERT_DATA;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.INSERT_DATA, new org.apache.thrift.meta_data.FieldMetaData("insertData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InsertEventRequestData.class)));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireEventRequestData.class, metaDataMap);
+  }
+
+  public FireEventRequestData() {
+    super();
+  }
+
+  public FireEventRequestData(_Fields setField, Object value) {
+    super(setField, value);
+  }
+
+  public FireEventRequestData(FireEventRequestData other) {
+    super(other);
+  }
+  public FireEventRequestData deepCopy() {
+    return new FireEventRequestData(this);
+  }
+
+  public static FireEventRequestData insertData(InsertEventRequestData value) {
+    FireEventRequestData x = new FireEventRequestData();
+    x.setInsertData(value);
+    return x;
+  }
+
+
+  @Override
+  protected void checkType(_Fields setField, Object value) throws ClassCastException {
+    switch (setField) {
+      case INSERT_DATA:
+        if (value instanceof InsertEventRequestData) {
+          break;
+        }
+        throw new ClassCastException("Was expecting value of type InsertEventRequestData for field 'insertData', but got " + value.getClass().getSimpleName());
+      default:
+        throw new IllegalArgumentException("Unknown field id " + setField);
+    }
+  }
+
+  @Override
+  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
+    _Fields setField = _Fields.findByThriftId(field.id);
+    if (setField != null) {
+      switch (setField) {
+        case INSERT_DATA:
+          if (field.type == INSERT_DATA_FIELD_DESC.type) {
+            InsertEventRequestData insertData;
+            insertData = new InsertEventRequestData();
+            insertData.read(iprot);
+            return insertData;
+          } else {
+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
+            return null;
+          }
+        default:
+          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
+      }
+    } else {
+      return null;
+    }
+  }
+
+  @Override
+  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+    switch (setField_) {
+      case INSERT_DATA:
+        InsertEventRequestData insertData = (InsertEventRequestData)value_;
+        insertData.write(oprot);
+        return;
+      default:
+        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
+    }
+  }
+
+  @Override
+  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
+    _Fields setField = _Fields.findByThriftId(fieldID);
+    if (setField != null) {
+      switch (setField) {
+        case INSERT_DATA:
+          InsertEventRequestData insertData;
+          insertData = new InsertEventRequestData();
+          insertData.read(iprot);
+          return insertData;
+        default:
+          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
+      }
+    } else {
+      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
+    }
+  }
+
+  @Override
+  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+    switch (setField_) {
+      case INSERT_DATA:
+        InsertEventRequestData insertData = (InsertEventRequestData)value_;
+        insertData.write(oprot);
+        return;
+      default:
+        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
+    }
+  }
+
+  @Override
+  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
+    switch (setField) {
+      case INSERT_DATA:
+        return INSERT_DATA_FIELD_DESC;
+      default:
+        throw new IllegalArgumentException("Unknown field id " + setField);
+    }
+  }
+
+  @Override
+  protected org.apache.thrift.protocol.TStruct getStructDesc() {
+    return STRUCT_DESC;
+  }
+
+  @Override
+  protected _Fields enumForId(short id) {
+    return _Fields.findByThriftIdOrThrow(id);
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+
+  public InsertEventRequestData getInsertData() {
+    if (getSetField() == _Fields.INSERT_DATA) {
+      return (InsertEventRequestData)getFieldValue();
+    } else {
+      throw new RuntimeException("Cannot get field 'insertData' because union is currently set to " + getFieldDesc(getSetField()).name);
+    }
+  }
+
+  public void setInsertData(InsertEventRequestData value) {
+    if (value == null) throw new NullPointerException();
+    setField_ = _Fields.INSERT_DATA;
+    value_ = value;
+  }
+
+  public boolean isSetInsertData() {
+    return setField_ == _Fields.INSERT_DATA;
+  }
+
+
+  public boolean equals(Object other) {
+    if (other instanceof FireEventRequestData) {
+      return equals((FireEventRequestData)other);
+    } else {
+      return false;
+    }
+  }
+
+  public boolean equals(FireEventRequestData other) {
+    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
+  }
+
+  @Override
+  public int compareTo(FireEventRequestData other) {
+    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
+    if (lastComparison == 0) {
+      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
+    }
+    return lastComparison;
+  }
+
+
+  @Override
+  public int hashCode() {
+    HashCodeBuilder hcb = new HashCodeBuilder();
+    hcb.append(this.getClass().getName());
+    org.apache.thrift.TFieldIdEnum setField = getSetField();
+    if (setField != null) {
+      hcb.append(setField.getThriftFieldId());
+      Object value = getFieldValue();
+      if (value instanceof org.apache.thrift.TEnum) {
+        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
+      } else {
+        hcb.append(value);
+      }
+    }
+    return hcb.toHashCode();
+  }
+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+    try {
+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+
+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+    try {
+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+
+}
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
new file mode 100644
index 0000000..051f411
--- /dev/null
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/FireEventResponse.java
@@ -0,0 +1,279 @@
+/**
+ * Autogenerated by Thrift Compiler (0.9.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ *  @generated
+ */
+package org.apache.hadoop.hive.metastore.api;
+
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.thrift.scheme.IScheme;
+import org.apache.thrift.scheme.SchemeFactory;
+import org.apache.thrift.scheme.StandardScheme;
+
+import org.apache.thrift.scheme.TupleScheme;
+import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.BitSet;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class FireEventResponse implements org.apache.thrift.TBase<FireEventResponse, FireEventResponse._Fields>, java.io.Serializable, Cloneable {
+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FireEventResponse");
+
+
+  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+  static {
+    schemes.put(StandardScheme.class, new FireEventResponseStandardSchemeFactory());
+    schemes.put(TupleScheme.class, new FireEventResponseTupleSchemeFactory());
+  }
+
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+;
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FireEventResponse.class, metaDataMap);
+  }
+
+  public FireEventResponse() {
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public FireEventResponse(FireEventResponse other) {
+  }
+
+  public FireEventResponse deepCopy() {
+    return new FireEventResponse(this);
+  }
+
+  @Override
+  public void clear() {
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof FireEventResponse)
+      return this.equals((FireEventResponse)that);
+    return false;
+  }
+
+  public boolean equals(FireEventResponse that) {
+    if (that == null)
+      return false;
+
+    return true;
+  }
+
+  @Override
+  public int hashCode() {
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    return builder.toHashCode();
+  }
+
+  public int compareTo(FireEventResponse other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    FireEventResponse typedOther = (FireEventResponse)other;
+
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+  }
+
+  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder("FireEventResponse(");
+    boolean first = true;
+
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws org.apache.thrift.TException {
+    // check for required fields
+    // check for sub-struct validity
+  }
+
+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+    try {
+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+    try {
+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private static class FireEventResponseStandardSchemeFactory implements SchemeFactory {
+    public FireEventResponseStandardScheme getScheme() {
+      return new FireEventResponseStandardScheme();
+    }
+  }
+
+  private static class FireEventResponseStandardScheme extends StandardScheme<FireEventResponse> {
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot, FireEventResponse struct) throws org.apache.thrift.TException {
+      org.apache.thrift.protocol.TField schemeField;
+      iprot.readStructBegin();
+      while (true)
+      {
+        schemeField = iprot.readFieldBegin();
+        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+          break;
+        }
+        switch (schemeField.id) {
+          default:
+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+        }
+        iprot.readFieldEnd();
+      }
+      iprot.readStructEnd();
+      struct.validate();
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot, FireEventResponse struct) throws org.apache.thrift.TException {
+      struct.validate();
+
+      oprot.writeStructBegin(STRUCT_DESC);
+      oprot.writeFieldStop();
+      oprot.writeStructEnd();
+    }
+
+  }
+
+  private static class FireEventResponseTupleSchemeFactory implements SchemeFactory {
+    public FireEventResponseTupleScheme getScheme() {
+      return new FireEventResponseTupleScheme();
+    }
+  }
+
+  private static class FireEventResponseTupleScheme extends TupleScheme<FireEventResponse> {
+
+    @Override
+    public void write(org.apache.thrift.protocol.TProtocol prot, FireEventResponse struct) throws org.apache.thrift.TException {
+      TTupleProtocol oprot = (TTupleProtocol) prot;
+    }
+
+    @Override
+    public void read(org.apache.thrift.protocol.TProtocol prot, FireEventResponse struct) throws org.apache.thrift.TException {
+      TTupleProtocol iprot = (TTupleProtocol) prot;
+    }
+  }
+
+}
+
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java
new file mode 100644
index 0000000..849bf71
--- /dev/null
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetAllFunctionsResponse.java
@@ -0,0 +1,443 @@
+/**
+ * Autogenerated by Thrift Compiler (0.9.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ *  @generated
+ */
+package org.apache.hadoop.hive.metastore.api;
+
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.thrift.scheme.IScheme;
+import org.apache.thrift.scheme.SchemeFactory;
+import org.apache.thrift.scheme.StandardScheme;
+
+import org.apache.thrift.scheme.TupleScheme;
+import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.BitSet;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class GetAllFunctionsResponse implements org.apache.thrift.TBase<GetAllFunctionsResponse, GetAllFunctionsResponse._Fields>, java.io.Serializable, Cloneable {
+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllFunctionsResponse");
+
+  private static final org.apache.thrift.protocol.TField FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("functions", org.apache.thrift.protocol.TType.LIST, (short)1);
+
+  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+  static {
+    schemes.put(StandardScheme.class, new GetAllFunctionsResponseStandardSchemeFactory());
+    schemes.put(TupleScheme.class, new GetAllFunctionsResponseTupleSchemeFactory());
+  }
+
+  private List<Function> functions; // optional
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+    FUNCTIONS((short)1, "functions");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // FUNCTIONS
+          return FUNCTIONS;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  // isset id assignments
+  private _Fields optionals[] = {_Fields.FUNCTIONS};
+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("functions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
+        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Function.class))));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllFunctionsResponse.class, metaDataMap);
+  }
+
+  public GetAllFunctionsResponse() {
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public GetAllFunctionsResponse(GetAllFunctionsResponse other) {
+    if (other.isSetFunctions()) {
+      List<Function> __this__functions = new ArrayList<Function>();
+      for (Function other_element : other.functions) {
+        __this__functions.add(new Function(other_element));
+      }
+      this.functions = __this__functions;
+    }
+  }
+
+  public GetAllFunctionsResponse deepCopy() {
+    return new GetAllFunctionsResponse(this);
+  }
+
+  @Override
+  public void clear() {
+    this.functions = null;
+  }
+
+  public int getFunctionsSize() {
+    return (this.functions == null) ? 0 : this.functions.size();
+  }
+
+  public java.util.Iterator<Function> getFunctionsIterator() {
+    return (this.functions == null) ? null : this.functions.iterator();
+  }
+
+  public void addToFunctions(Function elem) {
+    if (this.functions == null) {
+      this.functions = new ArrayList<Function>();
+    }
+    this.functions.add(elem);
+  }
+
+  public List<Function> getFunctions() {
+    return this.functions;
+  }
+
+  public void setFunctions(List<Function> functions) {
+    this.functions = functions;
+  }
+
+  public void unsetFunctions() {
+    this.functions = null;
+  }
+
+  /** Returns true if field functions is set (has been assigned a value) and false otherwise */
+  public boolean isSetFunctions() {
+    return this.functions != null;
+  }
+
+  public void setFunctionsIsSet(boolean value) {
+    if (!value) {
+      this.functions = null;
+    }
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    case FUNCTIONS:
+      if (value == null) {
+        unsetFunctions();
+      } else {
+        setFunctions((List<Function>)value);
+      }
+      break;
+
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    case FUNCTIONS:
+      return getFunctions();
+
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    case FUNCTIONS:
+      return isSetFunctions();
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof GetAllFunctionsResponse)
+      return this.equals((GetAllFunctionsResponse)that);
+    return false;
+  }
+
+  public boolean equals(GetAllFunctionsResponse that) {
+    if (that == null)
+      return false;
+
+    boolean this_present_functions = true && this.isSetFunctions();
+    boolean that_present_functions = true && that.isSetFunctions();
+    if (this_present_functions || that_present_functions) {
+      if (!(this_present_functions && that_present_functions))
+        return false;
+      if (!this.functions.equals(that.functions))
+        return false;
+    }
+
+    return true;
+  }
+
+  @Override
+  public int hashCode() {
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_functions = true && (isSetFunctions());
+    builder.append(present_functions);
+    if (present_functions)
+      builder.append(functions);
+
+    return builder.toHashCode();
+  }
+
+  public int compareTo(GetAllFunctionsResponse other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    GetAllFunctionsResponse typedOther = (GetAllFunctionsResponse)other;
+
+    lastComparison = Boolean.valueOf(isSetFunctions()).compareTo(typedOther.isSetFunctions());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetFunctions()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functions, typedOther.functions);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+  }
+
+  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder("GetAllFunctionsResponse(");
+    boolean first = true;
+
+    if (isSetFunctions()) {
+      sb.append("functions:");
+      if (this.functions == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.functions);
+      }
+      first = false;
+    }
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws org.apache.thrift.TException {
+    // check for required fields
+    // check for sub-struct validity
+  }
+
+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+    try {
+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+    try {
+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private static class GetAllFunctionsResponseStandardSchemeFactory implements SchemeFactory {
+    public GetAllFunctionsResponseStandardScheme getScheme() {
+      return new GetAllFunctionsResponseStandardScheme();
+    }
+  }
+
+  private static class GetAllFunctionsResponseStandardScheme extends StandardScheme<GetAllFunctionsResponse> {
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllFunctionsResponse struct) throws org.apache.thrift.TException {
+      org.apache.thrift.protocol.TField schemeField;
+      iprot.readStructBegin();
+      while (true)
+      {
+        schemeField = iprot.readFieldBegin();
+        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+          break;
+        }
+        switch (schemeField.id) {
+          case 1: // FUNCTIONS
+            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+              {
+                org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
+                struct.functions = new ArrayList<Function>(_list516.size);
+                for (int _i517 = 0; _i517 < _list516.size; ++_i517)
+                {
+                  Function _elem518; // required
+                  _elem518 = new Function();
+                  _elem518.read(iprot);
+                  struct.functions.add(_elem518);
+                }
+                iprot.readListEnd();
+              }
+              struct.setFunctionsIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          default:
+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+        }
+        iprot.readFieldEnd();
+      }
+      iprot.readStructEnd();
+      struct.validate();
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllFunctionsResponse struct) throws org.apache.thrift.TException {
+      struct.validate();
+
+      oprot.writeStructBegin(STRUCT_DESC);
+      if (struct.functions != null) {
+        if (struct.isSetFunctions()) {
+          oprot.writeFieldBegin(FUNCTIONS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.functions.size()));
+            for (Function _iter519 : struct.functions)
+            {
+              _iter519.write(oprot);
+            }
+            oprot.writeListEnd();
+          }
+          oprot.writeFieldEnd();
+        }
+      }
+      oprot.writeFieldStop();
+      oprot.writeStructEnd();
+    }
+
+  }
+
+  private static class GetAllFunctionsResponseTupleSchemeFactory implements SchemeFactory {
+    public GetAllFunctionsResponseTupleScheme getScheme() {
+      return new GetAllFunctionsResponseTupleScheme();
+    }
+  }
+
+  private static class GetAllFunctionsResponseTupleScheme extends TupleScheme<GetAllFunctionsResponse> {
+
+    @Override
+    public void write(org.apache.thrift.protocol.TProtocol prot, GetAllFunctionsResponse struct) throws org.apache.thrift.TException {
+      TTupleProtocol oprot = (TTupleProtocol) prot;
+      BitSet optionals = new BitSet();
+      if (struct.isSetFunctions()) {
+        optionals.set(0);
+      }
+      oprot.writeBitSet(optionals, 1);
+      if (struct.isSetFunctions()) {
+        {
+          oprot.writeI32(struct.functions.size());
+          for (Function _iter520 : struct.functions)
+          {
+            _iter520.write(oprot);
+          }
+        }
+      }
+    }
+
+    @Override
+    public void read(org.apache.thrift.protocol.TProtocol prot, GetAllFunctionsResponse struct) throws org.apache.thrift.TException {
+      TTupleProtocol iprot = (TTupleProtocol) prot;
+      BitSet incoming = iprot.readBitSet(1);
+      if (incoming.get(0)) {
+        {
+          org.apache.thrift.protocol.TList _list521 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+          struct.functions = new ArrayList<Function>(_list521.size);
+          for (int _i522 = 0; _i522 < _list521.size; ++_i522)
+          {
+            Function _elem523; // required
+            _elem523 = new Function();
+            _elem523.read(iprot);
+            struct.functions.add(_elem523);
+          }
+        }
+        struct.setFunctionsIsSet(true);
+      }
+    }
+  }
+
+}
+
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
new file mode 100644
index 0000000..5a9de92
--- /dev/null
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/InsertEventRequestData.java
@@ -0,0 +1,437 @@
+/**
+ * Autogenerated by Thrift Compiler (0.9.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ *  @generated
+ */
+package org.apache.hadoop.hive.metastore.api;
+
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.thrift.scheme.IScheme;
+import org.apache.thrift.scheme.SchemeFactory;
+import org.apache.thrift.scheme.StandardScheme;
+
+import org.apache.thrift.scheme.TupleScheme;
+import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.BitSet;
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class InsertEventRequestData implements org.apache.thrift.TBase<InsertEventRequestData, InsertEventRequestData._Fields>, java.io.Serializable, Cloneable {
+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertEventRequestData");
+
+  private static final org.apache.thrift.protocol.TField FILES_ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("filesAdded", org.apache.thrift.protocol.TType.LIST, (short)1);
+
+  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+  static {
+    schemes.put(StandardScheme.class, new InsertEventRequestDataStandardSchemeFactory());
+    schemes.put(TupleScheme.class, new InsertEventRequestDataTupleSchemeFactory());
+  }
+
+  private List<String> filesAdded; // required
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+    FILES_ADDED((short)1, "filesAdded");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // FILES_ADDED
+          return FILES_ADDED;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  // isset id assignments
+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.FILES_ADDED, new org.apache.thrift.meta_data.FieldMetaData("filesAdded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertEventRequestData.class, metaDataMap);
+  }
+
+  public InsertEventRequestData() {
+  }
+
+  public InsertEventRequestData(
+    List<String> filesAdded)
+  {
+    this();
+    this.filesAdded = filesAdded;
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public InsertEventRequestData(InsertEventRequestData other) {
+    if (other.isSetFilesAdded()) {
+      List<String> __this__filesAdded = new ArrayList<String>();
+      for (String other_element : other.filesAdded) {
+        __this__filesAdded.add(other_element);
+      }
+      this.filesAdded = __this__filesAdded;
+    }
+  }
+
+  public InsertEventRequestData deepCopy() {
+    return new InsertEventRequestData(this);
+  }
+
+  @Override
+  public void clear() {
+    this.filesAdded = null;
+  }
+
+  public int getFilesAddedSize() {
+    return (this.filesAdded == null) ? 0 : this.filesAdded.size();
+  }
+
+  public java.util.Iterator<String> getFilesAddedIterator() {
+    return (this.filesAdded == null) ? null : this.filesAdded.iterator();
+  }
+
+  public void addToFilesAdded(String elem) {
+    if (this.filesAdded == null) {
+      this.filesAdded = new ArrayList<String>();
+    }
+    this.filesAdded.add(elem);
+  }
+
+  public List<String> getFilesAdded() {
+    return this.filesAdded;
+  }
+
+  public void setFilesAdded(List<String> filesAdded) {
+    this.filesAdded = filesAdded;
+  }
+
+  public void unsetFilesAdded() {
+    this.filesAdded = null;
+  }
+
+  /** Returns true if field filesAdded is set (has been assigned a value) and false otherwise */
+  public boolean isSetFilesAdded() {
+    return this.filesAdded != null;
+  }
+
+  public void setFilesAddedIsSet(boolean value) {
+    if (!value) {
+      this.filesAdded = null;
+    }
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    case FILES_ADDED:
+      if (value == null) {
+        unsetFilesAdded();
+      } else {
+        setFilesAdded((List<String>)value);
+      }
+      break;
+
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    case FILES_ADDED:
+      return getFilesAdded();
+
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    case FILES_ADDED:
+      return isSetFilesAdded();
+    }
+    throw new IllegalStateException();
+  }
+
+  @Override
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof InsertEventRequestData)
+      return this.equals((InsertEventRequestData)that);
+    return false;
+  }
+
+  public boolean equals(InsertEventRequestData that) {
+    if (that == null)
+      return false;
+
+    boolean this_present_filesAdded = true && this.isSetFilesAdded();
+    boolean that_present_filesAdded = true && that.isSetFilesAdded();
+    if (this_present_filesAdded || that_present_filesAdded) {
+      if (!(this_present_filesAdded && that_present_filesAdded))
+        return false;
+      if (!this.filesAdded.equals(that.filesAdded))
+        return false;
+    }
+
+    return true;
+  }
+
+  @Override
+  public int hashCode() {
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_filesAdded = true && (isSetFilesAdded());
+    builder.append(present_filesAdded);
+    if (present_filesAdded)
+      builder.append(filesAdded);
+
+    return builder.toHashCode();
+  }
+
+  public int compareTo(InsertEventRequestData other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    InsertEventRequestData typedOther = (InsertEventRequestData)other;
+
+    lastComparison = Boolean.valueOf(isSetFilesAdded()).compareTo(typedOther.isSetFilesAdded());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetFilesAdded()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filesAdded, typedOther.filesAdded);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+  }
+
+  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder("InsertEventRequestData(");
+    boolean first = true;
+
+    sb.append("filesAdded:");
+    if (this.filesAdded == null) {
+      sb.append("null");
+    } else {
+      sb.append(this.filesAdded);
+    }
+    first = false;
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws org.apache.thrift.TException {
+    // check for required fields
+    if (!isSetFilesAdded()) {
+      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filesAdded' is unset! Struct:" + toString());
+    }
+
+    // check for sub-struct validity
+  }
+
+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+    try {
+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+    try {
+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+    } catch (org.apache.thrift.TException te) {
+      throw new java.io.IOException(te);
+    }
+  }
+
+  private static class InsertEventRequestDataStandardSchemeFactory implements SchemeFactory {
+    public InsertEventRequestDataStandardScheme getScheme() {
+      return new InsertEventRequestDataStandardScheme();
+    }
+  }
+
+  private static class InsertEventRequestDataStandardScheme extends StandardScheme<InsertEventRequestData> {
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot, InsertEventRequestData struct) throws org.apache.thrift.TException {
+      org.apache.thrift.protocol.TField schemeField;
+      iprot.readStructBegin();
+      while (true)
+      {
+        schemeField = iprot.readFieldBegin();
+        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+          break;
+        }
+        switch (schemeField.id) {
+          case 1: // FILES_ADDED
+            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+              {
+                org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
+                struct.filesAdded = new ArrayList<String>(_list500.size);
+                for (int _i501 = 0; _i501 < _list500.size; ++_i501)
+                {
+                  String _elem502; // required
+                  _elem502 = iprot.readString();
+                  struct.filesAdded.add(_elem502);
+                }
+                iprot.readListEnd();
+              }
+              struct.setFilesAddedIsSet(true);
+            } else { 
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+            }
+            break;
+          default:
+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+        }
+        iprot.readFieldEnd();
+      }
+      iprot.readStructEnd();
+      struct.validate();
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot, InsertEventRequestData struct) throws org.apache.thrift.TException {
+      struct.validate();
+
+      oprot.writeStructBegin(STRUCT_DESC);
+      if (struct.filesAdded != null) {
+        oprot.writeFieldBegin(FILES_ADDED_FIELD_DESC);
+        {
+          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filesAdded.size()));
+          for (String _iter503 : struct.filesAdded)
+          {
+            oprot.writeString(_iter503);
+          }
+          oprot.writeListEnd();
+        }
+        oprot.writeFieldEnd();
+      }
+      oprot.writeFieldStop();
+      oprot.writeStructEnd();
+    }
+
+  }
+
+  private static class InsertEventRequestDataTupleSchemeFactory implements SchemeFactory {
+    public InsertEventRequestDataTupleScheme getScheme() {
+      return new InsertEventRequestDataTupleScheme();
+    }
+  }
+
+  private static class InsertEventRequestDataTupleScheme extends TupleScheme<InsertEventRequestData> {
+
+    @Override
+    public void write(org.apache.thrift.protocol.TProtocol prot, InsertEventRequestData struct) throws org.apache.thrift.TException {
+      TTupleProtocol oprot = (TTupleProtocol) prot;
+      {
+        oprot.writeI32(struct.filesAdded.size());
+        for (String _iter504 : struct.filesAdded)
+        {
+          oprot.writeString(_iter504);
+        }
+      }
+    }
+
+    @Override
+    public void read(org.apache.thrift.protocol.TProtocol prot, InsertEventRequestData struct) throws org.apache.thrift.TException {
+      TTupleProtocol iprot = (TTupleProtocol) prot;
+      {
+        org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+        struct.filesAdded = new ArrayList<String>(_list505.size);
+        for (int _i506 = 0; _i506 < _list505.size; ++_i506)
+        {
+          String _elem507; // required
+          _elem507 = iprot.readString();
+          struct.filesAdded.add(_elem507);
+        }
+      }
+      struct.setFilesAddedIsSet(true);
+    }
+  }
+
+}
+
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
index 9df36b6..83438c7 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
@@ -184,7 +184,7 @@ public SkewedInfo(SkewedInfo other) {
 
         __this__skewedColValueLocationMaps.put(__this__skewedColValueLocationMaps_copy_key, __this__skewedColValueLocationMaps_copy_value);
       }
-        this.skewedColValueLocationMaps = __this__skewedColValueLocationMaps;
+      this.skewedColValueLocationMaps = __this__skewedColValueLocationMaps;
     }
   }
 
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index a72061e..b0bfb5c 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -210,6 +210,8 @@
 
     public Function get_function(String dbName, String funcName) throws MetaException, NoSuchObjectException, org.apache.thrift.TException;
 
+    public GetAllFunctionsResponse get_all_functions() throws MetaException, org.apache.thrift.TException;
+
     public boolean create_role(Role role) throws MetaException, org.apache.thrift.TException;
 
     public boolean drop_role(String role_name) throws MetaException, org.apache.thrift.TException;
@@ -452,6 +454,8 @@
 
     public void get_function(String dbName, String funcName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_function_call> resultHandler) throws org.apache.thrift.TException;
 
+    public void get_all_functions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_functions_call> resultHandler) throws org.apache.thrift.TException;
+
     public void create_role(Role role, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_role_call> resultHandler) throws org.apache.thrift.TException;
 
     public void drop_role(String role_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.drop_role_call> resultHandler) throws org.apache.thrift.TException;
@@ -3209,6 +3213,31 @@ public Function recv_get_function() throws MetaException, NoSuchObjectException,
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_function failed: unknown result");
     }
 
+    public GetAllFunctionsResponse get_all_functions() throws MetaException, org.apache.thrift.TException
+    {
+      send_get_all_functions();
+      return recv_get_all_functions();
+    }
+
+    public void send_get_all_functions() throws org.apache.thrift.TException
+    {
+      get_all_functions_args args = new get_all_functions_args();
+      sendBase("get_all_functions", args);
+    }
+
+    public GetAllFunctionsResponse recv_get_all_functions() throws MetaException, org.apache.thrift.TException
+    {
+      get_all_functions_result result = new get_all_functions_result();
+      receiveBase(result, "get_all_functions");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.o1 != null) {
+        throw result.o1;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_functions failed: unknown result");
+    }
+
     public boolean create_role(Role role) throws MetaException, org.apache.thrift.TException
     {
       send_create_role(role);
@@ -7231,6 +7260,35 @@ public Function getResult() throws MetaException, NoSuchObjectException, org.apa
       }
     }
 
+    public void get_all_functions(org.apache.thrift.async.AsyncMethodCallback<get_all_functions_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_all_functions_call method_call = new get_all_functions_call(resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_all_functions_call extends org.apache.thrift.async.TAsyncMethodCall {
+      public get_all_functions_call(org.apache.thrift.async.AsyncMethodCallback<get_all_functions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_functions", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_all_functions_args args = new get_all_functions_args();
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public GetAllFunctionsResponse getResult() throws MetaException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_all_functions();
+      }
+    }
+
     public void create_role(Role role, org.apache.thrift.async.AsyncMethodCallback<create_role_call> resultHandler) throws org.apache.thrift.TException {
       checkReady();
       create_role_call method_call = new create_role_call(role, resultHandler, this, ___protocolFactory, ___transport);
@@ -8416,6 +8474,7 @@ protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ?
       processMap.put("alter_function", new alter_function());
       processMap.put("get_functions", new get_functions());
       processMap.put("get_function", new get_function());
+      processMap.put("get_all_functions", new get_all_functions());
       processMap.put("create_role", new create_role());
       processMap.put("drop_role", new drop_role());
       processMap.put("get_role_names", new get_role_names());
@@ -10770,6 +10829,30 @@ public get_function_result getResult(I iface, get_function_args args) throws org
       }
     }
 
+    public static class get_all_functions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_functions_args> {
+      public get_all_functions() {
+        super("get_all_functions");
+      }
+
+      public get_all_functions_args getEmptyArgsInstance() {
+        return new get_all_functions_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_all_functions_result getResult(I iface, get_all_functions_args args) throws org.apache.thrift.TException {
+        get_all_functions_result result = new get_all_functions_result();
+        try {
+          result.success = iface.get_all_functions();
+        } catch (MetaException o1) {
+          result.o1 = o1;
+        }
+        return result;
+      }
+    }
+
     public static class create_role<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_role_args> {
       public create_role() {
         super("create_role");
@@ -16945,13 +17028,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_databases_resul
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list500.size);
-                  for (int _i501 = 0; _i501 < _list500.size; ++_i501)
+                  org.apache.thrift.protocol.TList _list524 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list524.size);
+                  for (int _i525 = 0; _i525 < _list524.size; ++_i525)
                   {
-                    String _elem502; // required
-                    _elem502 = iprot.readString();
-                    struct.success.add(_elem502);
+                    String _elem526; // required
+                    _elem526 = iprot.readString();
+                    struct.success.add(_elem526);
                   }
                   iprot.readListEnd();
                 }
@@ -16986,9 +17069,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_databases_resu
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter503 : struct.success)
+            for (String _iter527 : struct.success)
             {
-              oprot.writeString(_iter503);
+              oprot.writeString(_iter527);
             }
             oprot.writeListEnd();
           }
@@ -17027,9 +17110,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_databases_resul
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter504 : struct.success)
+            for (String _iter528 : struct.success)
             {
-              oprot.writeString(_iter504);
+              oprot.writeString(_iter528);
             }
           }
         }
@@ -17044,13 +17127,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_databases_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list505.size);
-            for (int _i506 = 0; _i506 < _list505.size; ++_i506)
+            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list529.size);
+            for (int _i530 = 0; _i530 < _list529.size; ++_i530)
             {
-              String _elem507; // required
-              _elem507 = iprot.readString();
-              struct.success.add(_elem507);
+              String _elem531; // required
+              _elem531 = iprot.readString();
+              struct.success.add(_elem531);
             }
           }
           struct.setSuccessIsSet(true);
@@ -17707,13 +17790,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_databases_r
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list508 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list508.size);
-                  for (int _i509 = 0; _i509 < _list508.size; ++_i509)
+                  org.apache.thrift.protocol.TList _list532 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list532.size);
+                  for (int _i533 = 0; _i533 < _list532.size; ++_i533)
                   {
-                    String _elem510; // required
-                    _elem510 = iprot.readString();
-                    struct.success.add(_elem510);
+                    String _elem534; // required
+                    _elem534 = iprot.readString();
+                    struct.success.add(_elem534);
                   }
                   iprot.readListEnd();
                 }
@@ -17748,9 +17831,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_databases_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter511 : struct.success)
+            for (String _iter535 : struct.success)
             {
-              oprot.writeString(_iter511);
+              oprot.writeString(_iter535);
             }
             oprot.writeListEnd();
           }
@@ -17789,9 +17872,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_all_databases_r
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter512 : struct.success)
+            for (String _iter536 : struct.success)
             {
-              oprot.writeString(_iter512);
+              oprot.writeString(_iter536);
             }
           }
         }
@@ -17806,13 +17889,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_all_databases_re
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list513.size);
-            for (int _i514 = 0; _i514 < _list513.size; ++_i514)
+            org.apache.thrift.protocol.TList _list537 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list537.size);
+            for (int _i538 = 0; _i538 < _list537.size; ++_i538)
             {
-              String _elem515; // required
-              _elem515 = iprot.readString();
-              struct.success.add(_elem515);
+              String _elem539; // required
+              _elem539 = iprot.readString();
+              struct.success.add(_elem539);
             }
           }
           struct.setSuccessIsSet(true);
@@ -22419,16 +22502,16 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_type_all_result
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map516 = iprot.readMapBegin();
-                  struct.success = new HashMap<String,Type>(2*_map516.size);
-                  for (int _i517 = 0; _i517 < _map516.size; ++_i517)
+                  org.apache.thrift.protocol.TMap _map540 = iprot.readMapBegin();
+                  struct.success = new HashMap<String,Type>(2*_map540.size);
+                  for (int _i541 = 0; _i541 < _map540.size; ++_i541)
                   {
-                    String _key518; // required
-                    Type _val519; // required
-                    _key518 = iprot.readString();
-                    _val519 = new Type();
-                    _val519.read(iprot);
-                    struct.success.put(_key518, _val519);
+                    String _key542; // required
+                    Type _val543; // required
+                    _key542 = iprot.readString();
+                    _val543 = new Type();
+                    _val543.read(iprot);
+                    struct.success.put(_key542, _val543);
                   }
                   iprot.readMapEnd();
                 }
@@ -22463,10 +22546,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_type_all_resul
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Map.Entry<String, Type> _iter520 : struct.success.entrySet())
+            for (Map.Entry<String, Type> _iter544 : struct.success.entrySet())
             {
-              oprot.writeString(_iter520.getKey());
-              _iter520.getValue().write(oprot);
+              oprot.writeString(_iter544.getKey());
+              _iter544.getValue().write(oprot);
             }
             oprot.writeMapEnd();
           }
@@ -22505,10 +22588,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_type_all_result
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Map.Entry<String, Type> _iter521 : struct.success.entrySet())
+            for (Map.Entry<String, Type> _iter545 : struct.success.entrySet())
             {
-              oprot.writeString(_iter521.getKey());
-              _iter521.getValue().write(oprot);
+              oprot.writeString(_iter545.getKey());
+              _iter545.getValue().write(oprot);
             }
           }
         }
@@ -22523,16 +22606,16 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_type_all_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map522 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new HashMap<String,Type>(2*_map522.size);
-            for (int _i523 = 0; _i523 < _map522.size; ++_i523)
+            org.apache.thrift.protocol.TMap _map546 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new HashMap<String,Type>(2*_map546.size);
+            for (int _i547 = 0; _i547 < _map546.size; ++_i547)
             {
-              String _key524; // required
-              Type _val525; // required
-              _key524 = iprot.readString();
-              _val525 = new Type();
-              _val525.read(iprot);
-              struct.success.put(_key524, _val525);
+              String _key548; // required
+              Type _val549; // required
+              _key548 = iprot.readString();
+              _val549 = new Type();
+              _val549.read(iprot);
+              struct.success.put(_key548, _val549);
             }
           }
           struct.setSuccessIsSet(true);
@@ -23567,14 +23650,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_fields_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list526 = iprot.readListBegin();
-                  struct.success = new ArrayList<FieldSchema>(_list526.size);
-                  for (int _i527 = 0; _i527 < _list526.size; ++_i527)
+                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list550.size);
+                  for (int _i551 = 0; _i551 < _list550.size; ++_i551)
                   {
-                    FieldSchema _elem528; // required
-                    _elem528 = new FieldSchema();
-                    _elem528.read(iprot);
-                    struct.success.add(_elem528);
+                    FieldSchema _elem552; // required
+                    _elem552 = new FieldSchema();
+                    _elem552.read(iprot);
+                    struct.success.add(_elem552);
                   }
                   iprot.readListEnd();
                 }
@@ -23627,9 +23710,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_fields_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (FieldSchema _iter529 : struct.success)
+            for (FieldSchema _iter553 : struct.success)
             {
-              _iter529.write(oprot);
+              _iter553.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -23684,9 +23767,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_fields_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (FieldSchema _iter530 : struct.success)
+            for (FieldSchema _iter554 : struct.success)
             {
-              _iter530.write(oprot);
+              _iter554.write(oprot);
             }
           }
         }
@@ -23707,14 +23790,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_fields_result st
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list531 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<FieldSchema>(_list531.size);
-            for (int _i532 = 0; _i532 < _list531.size; ++_i532)
+            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list555.size);
+            for (int _i556 = 0; _i556 < _list555.size; ++_i556)
             {
-              FieldSchema _elem533; // required
-              _elem533 = new FieldSchema();
-              _elem533.read(iprot);
-              struct.success.add(_elem533);
+              FieldSchema _elem557; // required
+              _elem557 = new FieldSchema();
+              _elem557.read(iprot);
+              struct.success.add(_elem557);
             }
           }
           struct.setSuccessIsSet(true);
@@ -24759,14 +24842,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_schema_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list534 = iprot.readListBegin();
-                  struct.success = new ArrayList<FieldSchema>(_list534.size);
-                  for (int _i535 = 0; _i535 < _list534.size; ++_i535)
+                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
+                  struct.success = new ArrayList<FieldSchema>(_list558.size);
+                  for (int _i559 = 0; _i559 < _list558.size; ++_i559)
                   {
-                    FieldSchema _elem536; // required
-                    _elem536 = new FieldSchema();
-                    _elem536.read(iprot);
-                    struct.success.add(_elem536);
+                    FieldSchema _elem560; // required
+                    _elem560 = new FieldSchema();
+                    _elem560.read(iprot);
+                    struct.success.add(_elem560);
                   }
                   iprot.readListEnd();
                 }
@@ -24819,9 +24902,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_schema_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (FieldSchema _iter537 : struct.success)
+            for (FieldSchema _iter561 : struct.success)
             {
-              _iter537.write(oprot);
+              _iter561.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -24876,9 +24959,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_schema_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (FieldSchema _iter538 : struct.success)
+            for (FieldSchema _iter562 : struct.success)
             {
-              _iter538.write(oprot);
+              _iter562.write(oprot);
             }
           }
         }
@@ -24899,14 +24982,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_schema_result st
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list539 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<FieldSchema>(_list539.size);
-            for (int _i540 = 0; _i540 < _list539.size; ++_i540)
+            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<FieldSchema>(_list563.size);
+            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
             {
-              FieldSchema _elem541; // required
-              _elem541 = new FieldSchema();
-              _elem541.read(iprot);
-              struct.success.add(_elem541);
+              FieldSchema _elem565; // required
+              _elem565 = new FieldSchema();
+              _elem565.read(iprot);
+              struct.success.add(_elem565);
             }
           }
           struct.setSuccessIsSet(true);
@@ -30149,13 +30232,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_tables_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list542 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list542.size);
-                  for (int _i543 = 0; _i543 < _list542.size; ++_i543)
+                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list566.size);
+                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
                   {
-                    String _elem544; // required
-                    _elem544 = iprot.readString();
-                    struct.success.add(_elem544);
+                    String _elem568; // required
+                    _elem568 = iprot.readString();
+                    struct.success.add(_elem568);
                   }
                   iprot.readListEnd();
                 }
@@ -30190,9 +30273,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_tables_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter545 : struct.success)
+            for (String _iter569 : struct.success)
             {
-              oprot.writeString(_iter545);
+              oprot.writeString(_iter569);
             }
             oprot.writeListEnd();
           }
@@ -30231,9 +30314,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_tables_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter546 : struct.success)
+            for (String _iter570 : struct.success)
             {
-              oprot.writeString(_iter546);
+              oprot.writeString(_iter570);
             }
           }
         }
@@ -30248,13 +30331,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_tables_result st
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list547 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list547.size);
-            for (int _i548 = 0; _i548 < _list547.size; ++_i548)
+            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list571.size);
+            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
             {
-              String _elem549; // required
-              _elem549 = iprot.readString();
-              struct.success.add(_elem549);
+              String _elem573; // required
+              _elem573 = iprot.readString();
+              struct.success.add(_elem573);
             }
           }
           struct.setSuccessIsSet(true);
@@ -31023,13 +31106,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_tables_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list550.size);
-                  for (int _i551 = 0; _i551 < _list550.size; ++_i551)
+                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list574.size);
+                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
                   {
-                    String _elem552; // required
-                    _elem552 = iprot.readString();
-                    struct.success.add(_elem552);
+                    String _elem576; // required
+                    _elem576 = iprot.readString();
+                    struct.success.add(_elem576);
                   }
                   iprot.readListEnd();
                 }
@@ -31064,9 +31147,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_tables_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter553 : struct.success)
+            for (String _iter577 : struct.success)
             {
-              oprot.writeString(_iter553);
+              oprot.writeString(_iter577);
             }
             oprot.writeListEnd();
           }
@@ -31105,9 +31188,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_all_tables_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter554 : struct.success)
+            for (String _iter578 : struct.success)
             {
-              oprot.writeString(_iter554);
+              oprot.writeString(_iter578);
             }
           }
         }
@@ -31122,13 +31205,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_all_tables_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list555.size);
-            for (int _i556 = 0; _i556 < _list555.size; ++_i556)
+            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list579.size);
+            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
             {
-              String _elem557; // required
-              _elem557 = iprot.readString();
-              struct.success.add(_elem557);
+              String _elem581; // required
+              _elem581 = iprot.readString();
+              struct.success.add(_elem581);
             }
           }
           struct.setSuccessIsSet(true);
@@ -32584,13 +32667,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_objects_b
             case 2: // TBL_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
-                  struct.tbl_names = new ArrayList<String>(_list558.size);
-                  for (int _i559 = 0; _i559 < _list558.size; ++_i559)
+                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
+                  struct.tbl_names = new ArrayList<String>(_list582.size);
+                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
                   {
-                    String _elem560; // required
-                    _elem560 = iprot.readString();
-                    struct.tbl_names.add(_elem560);
+                    String _elem584; // required
+                    _elem584 = iprot.readString();
+                    struct.tbl_names.add(_elem584);
                   }
                   iprot.readListEnd();
                 }
@@ -32621,9 +32704,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_objects_
           oprot.writeFieldBegin(TBL_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tbl_names.size()));
-            for (String _iter561 : struct.tbl_names)
+            for (String _iter585 : struct.tbl_names)
             {
-              oprot.writeString(_iter561);
+              oprot.writeString(_iter585);
             }
             oprot.writeListEnd();
           }
@@ -32660,9 +32743,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_b
         if (struct.isSetTbl_names()) {
           {
             oprot.writeI32(struct.tbl_names.size());
-            for (String _iter562 : struct.tbl_names)
+            for (String _iter586 : struct.tbl_names)
             {
-              oprot.writeString(_iter562);
+              oprot.writeString(_iter586);
             }
           }
         }
@@ -32678,13 +32761,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by
         }
         if (incoming.get(1)) {
           {
-            org.apache.thrift.protocol.TList _list563 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.tbl_names = new ArrayList<String>(_list563.size);
-            for (int _i564 = 0; _i564 < _list563.size; ++_i564)
+            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.tbl_names = new ArrayList<String>(_list587.size);
+            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
             {
-              String _elem565; // required
-              _elem565 = iprot.readString();
-              struct.tbl_names.add(_elem565);
+              String _elem589; // required
+              _elem589 = iprot.readString();
+              struct.tbl_names.add(_elem589);
             }
           }
           struct.setTbl_namesIsSet(true);
@@ -33252,14 +33335,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_objects_b
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list566 = iprot.readListBegin();
-                  struct.success = new ArrayList<Table>(_list566.size);
-                  for (int _i567 = 0; _i567 < _list566.size; ++_i567)
+                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
+                  struct.success = new ArrayList<Table>(_list590.size);
+                  for (int _i591 = 0; _i591 < _list590.size; ++_i591)
                   {
-                    Table _elem568; // required
-                    _elem568 = new Table();
-                    _elem568.read(iprot);
-                    struct.success.add(_elem568);
+                    Table _elem592; // required
+                    _elem592 = new Table();
+                    _elem592.read(iprot);
+                    struct.success.add(_elem592);
                   }
                   iprot.readListEnd();
                 }
@@ -33312,9 +33395,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_objects_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Table _iter569 : struct.success)
+            for (Table _iter593 : struct.success)
             {
-              _iter569.write(oprot);
+              _iter593.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -33369,9 +33452,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_objects_b
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Table _iter570 : struct.success)
+            for (Table _iter594 : struct.success)
             {
-              _iter570.write(oprot);
+              _iter594.write(oprot);
             }
           }
         }
@@ -33392,14 +33475,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_objects_by
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list571 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Table>(_list571.size);
-            for (int _i572 = 0; _i572 < _list571.size; ++_i572)
+            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Table>(_list595.size);
+            for (int _i596 = 0; _i596 < _list595.size; ++_i596)
             {
-              Table _elem573; // required
-              _elem573 = new Table();
-              _elem573.read(iprot);
-              struct.success.add(_elem573);
+              Table _elem597; // required
+              _elem597 = new Table();
+              _elem597.read(iprot);
+              struct.success.add(_elem597);
             }
           }
           struct.setSuccessIsSet(true);
@@ -34548,13 +34631,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_names_by_
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list574.size);
-                  for (int _i575 = 0; _i575 < _list574.size; ++_i575)
+                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list598.size);
+                  for (int _i599 = 0; _i599 < _list598.size; ++_i599)
                   {
-                    String _elem576; // required
-                    _elem576 = iprot.readString();
-                    struct.success.add(_elem576);
+                    String _elem600; // required
+                    _elem600 = iprot.readString();
+                    struct.success.add(_elem600);
                   }
                   iprot.readListEnd();
                 }
@@ -34607,9 +34690,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_names_by
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter577 : struct.success)
+            for (String _iter601 : struct.success)
             {
-              oprot.writeString(_iter577);
+              oprot.writeString(_iter601);
             }
             oprot.writeListEnd();
           }
@@ -34664,9 +34747,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_table_names_by_
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter578 : struct.success)
+            for (String _iter602 : struct.success)
             {
-              oprot.writeString(_iter578);
+              oprot.writeString(_iter602);
             }
           }
         }
@@ -34687,13 +34770,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_table_names_by_f
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list579.size);
-            for (int _i580 = 0; _i580 < _list579.size; ++_i580)
+            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list603.size);
+            for (int _i604 = 0; _i604 < _list603.size; ++_i604)
             {
-              String _elem581; // required
-              _elem581 = iprot.readString();
-              struct.success.add(_elem581);
+              String _elem605; // required
+              _elem605 = iprot.readString();
+              struct.success.add(_elem605);
             }
           }
           struct.setSuccessIsSet(true);
@@ -40552,14 +40635,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, add_partitions_args
             case 1: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<Partition>(_list582.size);
-                  for (int _i583 = 0; _i583 < _list582.size; ++_i583)
+                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<Partition>(_list606.size);
+                  for (int _i607 = 0; _i607 < _list606.size; ++_i607)
                   {
-                    Partition _elem584; // required
-                    _elem584 = new Partition();
-                    _elem584.read(iprot);
-                    struct.new_parts.add(_elem584);
+                    Partition _elem608; // required
+                    _elem608 = new Partition();
+                    _elem608.read(iprot);
+                    struct.new_parts.add(_elem608);
                   }
                   iprot.readListEnd();
                 }
@@ -40585,9 +40668,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, add_partitions_arg
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (Partition _iter585 : struct.new_parts)
+            for (Partition _iter609 : struct.new_parts)
             {
-              _iter585.write(oprot);
+              _iter609.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -40618,9 +40701,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, add_partitions_args
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (Partition _iter586 : struct.new_parts)
+            for (Partition _iter610 : struct.new_parts)
             {
-              _iter586.write(oprot);
+              _iter610.write(oprot);
             }
           }
         }
@@ -40632,14 +40715,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, add_partitions_args
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list587 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<Partition>(_list587.size);
-            for (int _i588 = 0; _i588 < _list587.size; ++_i588)
+            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<Partition>(_list611.size);
+            for (int _i612 = 0; _i612 < _list611.size; ++_i612)
             {
-              Partition _elem589; // required
-              _elem589 = new Partition();
-              _elem589.read(iprot);
-              struct.new_parts.add(_elem589);
+              Partition _elem613; // required
+              _elem613 = new Partition();
+              _elem613.read(iprot);
+              struct.new_parts.add(_elem613);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -41640,14 +41723,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, add_partitions_pspe
             case 1: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list590 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<PartitionSpec>(_list590.size);
-                  for (int _i591 = 0; _i591 < _list590.size; ++_i591)
+                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<PartitionSpec>(_list614.size);
+                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
                   {
-                    PartitionSpec _elem592; // required
-                    _elem592 = new PartitionSpec();
-                    _elem592.read(iprot);
-                    struct.new_parts.add(_elem592);
+                    PartitionSpec _elem616; // required
+                    _elem616 = new PartitionSpec();
+                    _elem616.read(iprot);
+                    struct.new_parts.add(_elem616);
                   }
                   iprot.readListEnd();
                 }
@@ -41673,9 +41756,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, add_partitions_psp
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (PartitionSpec _iter593 : struct.new_parts)
+            for (PartitionSpec _iter617 : struct.new_parts)
             {
-              _iter593.write(oprot);
+              _iter617.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -41706,9 +41789,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, add_partitions_pspe
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (PartitionSpec _iter594 : struct.new_parts)
+            for (PartitionSpec _iter618 : struct.new_parts)
             {
-              _iter594.write(oprot);
+              _iter618.write(oprot);
             }
           }
         }
@@ -41720,14 +41803,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, add_partitions_pspec
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<PartitionSpec>(_list595.size);
-            for (int _i596 = 0; _i596 < _list595.size; ++_i596)
+            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<PartitionSpec>(_list619.size);
+            for (int _i620 = 0; _i620 < _list619.size; ++_i620)
             {
-              PartitionSpec _elem597; // required
-              _elem597 = new PartitionSpec();
-              _elem597.read(iprot);
-              struct.new_parts.add(_elem597);
+              PartitionSpec _elem621; // required
+              _elem621 = new PartitionSpec();
+              _elem621.read(iprot);
+              struct.new_parts.add(_elem621);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -42906,13 +42989,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, append_partition_ar
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list598 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list598.size);
-                  for (int _i599 = 0; _i599 < _list598.size; ++_i599)
+                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list622.size);
+                  for (int _i623 = 0; _i623 < _list622.size; ++_i623)
                   {
-                    String _elem600; // required
-                    _elem600 = iprot.readString();
-                    struct.part_vals.add(_elem600);
+                    String _elem624; // required
+                    _elem624 = iprot.readString();
+                    struct.part_vals.add(_elem624);
                   }
                   iprot.readListEnd();
                 }
@@ -42948,9 +43031,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_a
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter601 : struct.part_vals)
+            for (String _iter625 : struct.part_vals)
             {
-              oprot.writeString(_iter601);
+              oprot.writeString(_iter625);
             }
             oprot.writeListEnd();
           }
@@ -42993,9 +43076,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_ar
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter602 : struct.part_vals)
+            for (String _iter626 : struct.part_vals)
             {
-              oprot.writeString(_iter602);
+              oprot.writeString(_iter626);
             }
           }
         }
@@ -43015,13 +43098,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list603 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list603.size);
-            for (int _i604 = 0; _i604 < _list603.size; ++_i604)
+            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list627.size);
+            for (int _i628 = 0; _i628 < _list627.size; ++_i628)
             {
-              String _elem605; // required
-              _elem605 = iprot.readString();
-              struct.part_vals.add(_elem605);
+              String _elem629; // required
+              _elem629 = iprot.readString();
+              struct.part_vals.add(_elem629);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -45333,13 +45416,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, append_partition_wi
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list606 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list606.size);
-                  for (int _i607 = 0; _i607 < _list606.size; ++_i607)
+                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list630.size);
+                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
                   {
-                    String _elem608; // required
-                    _elem608 = iprot.readString();
-                    struct.part_vals.add(_elem608);
+                    String _elem632; // required
+                    _elem632 = iprot.readString();
+                    struct.part_vals.add(_elem632);
                   }
                   iprot.readListEnd();
                 }
@@ -45384,9 +45467,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, append_partition_w
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter609 : struct.part_vals)
+            for (String _iter633 : struct.part_vals)
             {
-              oprot.writeString(_iter609);
+              oprot.writeString(_iter633);
             }
             oprot.writeListEnd();
           }
@@ -45437,9 +45520,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, append_partition_wi
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter610 : struct.part_vals)
+            for (String _iter634 : struct.part_vals)
             {
-              oprot.writeString(_iter610);
+              oprot.writeString(_iter634);
             }
           }
         }
@@ -45462,13 +45545,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, append_partition_wit
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list611 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list611.size);
-            for (int _i612 = 0; _i612 < _list611.size; ++_i612)
+            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list635.size);
+            for (int _i636 = 0; _i636 < _list635.size; ++_i636)
             {
-              String _elem613; // required
-              _elem613 = iprot.readString();
-              struct.part_vals.add(_elem613);
+              String _elem637; // required
+              _elem637 = iprot.readString();
+              struct.part_vals.add(_elem637);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -49341,13 +49424,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, drop_partition_args
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list614 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list614.size);
-                  for (int _i615 = 0; _i615 < _list614.size; ++_i615)
+                  org.apache.thrift.protocol.TList _list638 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list638.size);
+                  for (int _i639 = 0; _i639 < _list638.size; ++_i639)
                   {
-                    String _elem616; // required
-                    _elem616 = iprot.readString();
-                    struct.part_vals.add(_elem616);
+                    String _elem640; // required
+                    _elem640 = iprot.readString();
+                    struct.part_vals.add(_elem640);
                   }
                   iprot.readListEnd();
                 }
@@ -49391,9 +49474,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, drop_partition_arg
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter617 : struct.part_vals)
+            for (String _iter641 : struct.part_vals)
             {
-              oprot.writeString(_iter617);
+              oprot.writeString(_iter641);
             }
             oprot.writeListEnd();
           }
@@ -49442,9 +49525,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, drop_partition_args
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter618 : struct.part_vals)
+            for (String _iter642 : struct.part_vals)
             {
-              oprot.writeString(_iter618);
+              oprot.writeString(_iter642);
             }
           }
         }
@@ -49467,13 +49550,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, drop_partition_args
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list619 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list619.size);
-            for (int _i620 = 0; _i620 < _list619.size; ++_i620)
+            org.apache.thrift.protocol.TList _list643 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list643.size);
+            for (int _i644 = 0; _i644 < _list643.size; ++_i644)
             {
-              String _elem621; // required
-              _elem621 = iprot.readString();
-              struct.part_vals.add(_elem621);
+              String _elem645; // required
+              _elem645 = iprot.readString();
+              struct.part_vals.add(_elem645);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -50715,13 +50798,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, drop_partition_with
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list622 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list622.size);
-                  for (int _i623 = 0; _i623 < _list622.size; ++_i623)
+                  org.apache.thrift.protocol.TList _list646 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list646.size);
+                  for (int _i647 = 0; _i647 < _list646.size; ++_i647)
                   {
-                    String _elem624; // required
-                    _elem624 = iprot.readString();
-                    struct.part_vals.add(_elem624);
+                    String _elem648; // required
+                    _elem648 = iprot.readString();
+                    struct.part_vals.add(_elem648);
                   }
                   iprot.readListEnd();
                 }
@@ -50774,9 +50857,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, drop_partition_wit
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter625 : struct.part_vals)
+            for (String _iter649 : struct.part_vals)
             {
-              oprot.writeString(_iter625);
+              oprot.writeString(_iter649);
             }
             oprot.writeListEnd();
           }
@@ -50833,9 +50916,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, drop_partition_with
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter626 : struct.part_vals)
+            for (String _iter650 : struct.part_vals)
             {
-              oprot.writeString(_iter626);
+              oprot.writeString(_iter650);
             }
           }
         }
@@ -50861,13 +50944,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, drop_partition_with_
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list627 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list627.size);
-            for (int _i628 = 0; _i628 < _list627.size; ++_i628)
+            org.apache.thrift.protocol.TList _list651 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list651.size);
+            for (int _i652 = 0; _i652 < _list651.size; ++_i652)
             {
-              String _elem629; // required
-              _elem629 = iprot.readString();
-              struct.part_vals.add(_elem629);
+              String _elem653; // required
+              _elem653 = iprot.readString();
+              struct.part_vals.add(_elem653);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -55472,13 +55555,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_args
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list630.size);
-                  for (int _i631 = 0; _i631 < _list630.size; ++_i631)
+                  org.apache.thrift.protocol.TList _list654 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list654.size);
+                  for (int _i655 = 0; _i655 < _list654.size; ++_i655)
                   {
-                    String _elem632; // required
-                    _elem632 = iprot.readString();
-                    struct.part_vals.add(_elem632);
+                    String _elem656; // required
+                    _elem656 = iprot.readString();
+                    struct.part_vals.add(_elem656);
                   }
                   iprot.readListEnd();
                 }
@@ -55514,9 +55597,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_args
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter633 : struct.part_vals)
+            for (String _iter657 : struct.part_vals)
             {
-              oprot.writeString(_iter633);
+              oprot.writeString(_iter657);
             }
             oprot.writeListEnd();
           }
@@ -55559,9 +55642,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_args
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter634 : struct.part_vals)
+            for (String _iter658 : struct.part_vals)
             {
-              oprot.writeString(_iter634);
+              oprot.writeString(_iter658);
             }
           }
         }
@@ -55581,13 +55664,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_args s
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list635 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list635.size);
-            for (int _i636 = 0; _i636 < _list635.size; ++_i636)
+            org.apache.thrift.protocol.TList _list659 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list659.size);
+            for (int _i660 = 0; _i660 < _list659.size; ++_i660)
             {
-              String _elem637; // required
-              _elem637 = iprot.readString();
-              struct.part_vals.add(_elem637);
+              String _elem661; // required
+              _elem661 = iprot.readString();
+              struct.part_vals.add(_elem661);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -56816,15 +56899,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, exchange_partition_
             case 1: // PARTITION_SPECS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map638 = iprot.readMapBegin();
-                  struct.partitionSpecs = new HashMap<String,String>(2*_map638.size);
-                  for (int _i639 = 0; _i639 < _map638.size; ++_i639)
+                  org.apache.thrift.protocol.TMap _map662 = iprot.readMapBegin();
+                  struct.partitionSpecs = new HashMap<String,String>(2*_map662.size);
+                  for (int _i663 = 0; _i663 < _map662.size; ++_i663)
                   {
-                    String _key640; // required
-                    String _val641; // required
-                    _key640 = iprot.readString();
-                    _val641 = iprot.readString();
-                    struct.partitionSpecs.put(_key640, _val641);
+                    String _key664; // required
+                    String _val665; // required
+                    _key664 = iprot.readString();
+                    _val665 = iprot.readString();
+                    struct.partitionSpecs.put(_key664, _val665);
                   }
                   iprot.readMapEnd();
                 }
@@ -56882,10 +56965,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, exchange_partition
           oprot.writeFieldBegin(PARTITION_SPECS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.partitionSpecs.size()));
-            for (Map.Entry<String, String> _iter642 : struct.partitionSpecs.entrySet())
+            for (Map.Entry<String, String> _iter666 : struct.partitionSpecs.entrySet())
             {
-              oprot.writeString(_iter642.getKey());
-              oprot.writeString(_iter642.getValue());
+              oprot.writeString(_iter666.getKey());
+              oprot.writeString(_iter666.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -56948,10 +57031,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, exchange_partition_
         if (struct.isSetPartitionSpecs()) {
           {
             oprot.writeI32(struct.partitionSpecs.size());
-            for (Map.Entry<String, String> _iter643 : struct.partitionSpecs.entrySet())
+            for (Map.Entry<String, String> _iter667 : struct.partitionSpecs.entrySet())
             {
-              oprot.writeString(_iter643.getKey());
-              oprot.writeString(_iter643.getValue());
+              oprot.writeString(_iter667.getKey());
+              oprot.writeString(_iter667.getValue());
             }
           }
         }
@@ -56975,15 +57058,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, exchange_partition_a
         BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map644 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.partitionSpecs = new HashMap<String,String>(2*_map644.size);
-            for (int _i645 = 0; _i645 < _map644.size; ++_i645)
+            org.apache.thrift.protocol.TMap _map668 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.partitionSpecs = new HashMap<String,String>(2*_map668.size);
+            for (int _i669 = 0; _i669 < _map668.size; ++_i669)
             {
-              String _key646; // required
-              String _val647; // required
-              _key646 = iprot.readString();
-              _val647 = iprot.readString();
-              struct.partitionSpecs.put(_key646, _val647);
+              String _key670; // required
+              String _val671; // required
+              _key670 = iprot.readString();
+              _val671 = iprot.readString();
+              struct.partitionSpecs.put(_key670, _val671);
             }
           }
           struct.setPartitionSpecsIsSet(true);
@@ -58471,13 +58554,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_with_
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list648 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list648.size);
-                  for (int _i649 = 0; _i649 < _list648.size; ++_i649)
+                  org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list672.size);
+                  for (int _i673 = 0; _i673 < _list672.size; ++_i673)
                   {
-                    String _elem650; // required
-                    _elem650 = iprot.readString();
-                    struct.part_vals.add(_elem650);
+                    String _elem674; // required
+                    _elem674 = iprot.readString();
+                    struct.part_vals.add(_elem674);
                   }
                   iprot.readListEnd();
                 }
@@ -58497,13 +58580,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_with_
             case 5: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list651 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list651.size);
-                  for (int _i652 = 0; _i652 < _list651.size; ++_i652)
+                  org.apache.thrift.protocol.TList _list675 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list675.size);
+                  for (int _i676 = 0; _i676 < _list675.size; ++_i676)
                   {
-                    String _elem653; // required
-                    _elem653 = iprot.readString();
-                    struct.group_names.add(_elem653);
+                    String _elem677; // required
+                    _elem677 = iprot.readString();
+                    struct.group_names.add(_elem677);
                   }
                   iprot.readListEnd();
                 }
@@ -58539,9 +58622,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_with
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter654 : struct.part_vals)
+            for (String _iter678 : struct.part_vals)
             {
-              oprot.writeString(_iter654);
+              oprot.writeString(_iter678);
             }
             oprot.writeListEnd();
           }
@@ -58556,9 +58639,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_with
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter655 : struct.group_names)
+            for (String _iter679 : struct.group_names)
             {
-              oprot.writeString(_iter655);
+              oprot.writeString(_iter679);
             }
             oprot.writeListEnd();
           }
@@ -58607,9 +58690,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_with_
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter656 : struct.part_vals)
+            for (String _iter680 : struct.part_vals)
             {
-              oprot.writeString(_iter656);
+              oprot.writeString(_iter680);
             }
           }
         }
@@ -58619,9 +58702,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_with_
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter657 : struct.group_names)
+            for (String _iter681 : struct.group_names)
             {
-              oprot.writeString(_iter657);
+              oprot.writeString(_iter681);
             }
           }
         }
@@ -58641,13 +58724,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_with_a
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list658 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list658.size);
-            for (int _i659 = 0; _i659 < _list658.size; ++_i659)
+            org.apache.thrift.protocol.TList _list682 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list682.size);
+            for (int _i683 = 0; _i683 < _list682.size; ++_i683)
             {
-              String _elem660; // required
-              _elem660 = iprot.readString();
-              struct.part_vals.add(_elem660);
+              String _elem684; // required
+              _elem684 = iprot.readString();
+              struct.part_vals.add(_elem684);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -58658,13 +58741,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_with_a
         }
         if (incoming.get(4)) {
           {
-            org.apache.thrift.protocol.TList _list661 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list661.size);
-            for (int _i662 = 0; _i662 < _list661.size; ++_i662)
+            org.apache.thrift.protocol.TList _list685 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list685.size);
+            for (int _i686 = 0; _i686 < _list685.size; ++_i686)
             {
-              String _elem663; // required
-              _elem663 = iprot.readString();
-              struct.group_names.add(_elem663);
+              String _elem687; // required
+              _elem687 = iprot.readString();
+              struct.group_names.add(_elem687);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -61433,14 +61516,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list664 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list664.size);
-                  for (int _i665 = 0; _i665 < _list664.size; ++_i665)
+                  org.apache.thrift.protocol.TList _list688 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list688.size);
+                  for (int _i689 = 0; _i689 < _list688.size; ++_i689)
                   {
-                    Partition _elem666; // required
-                    _elem666 = new Partition();
-                    _elem666.read(iprot);
-                    struct.success.add(_elem666);
+                    Partition _elem690; // required
+                    _elem690 = new Partition();
+                    _elem690.read(iprot);
+                    struct.success.add(_elem690);
                   }
                   iprot.readListEnd();
                 }
@@ -61484,9 +61567,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter667 : struct.success)
+            for (Partition _iter691 : struct.success)
             {
-              _iter667.write(oprot);
+              _iter691.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -61533,9 +61616,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter668 : struct.success)
+            for (Partition _iter692 : struct.success)
             {
-              _iter668.write(oprot);
+              _iter692.write(oprot);
             }
           }
         }
@@ -61553,14 +61636,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_resul
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list669 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list669.size);
-            for (int _i670 = 0; _i670 < _list669.size; ++_i670)
+            org.apache.thrift.protocol.TList _list693 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list693.size);
+            for (int _i694 = 0; _i694 < _list693.size; ++_i694)
             {
-              Partition _elem671; // required
-              _elem671 = new Partition();
-              _elem671.read(iprot);
-              struct.success.add(_elem671);
+              Partition _elem695; // required
+              _elem695 = new Partition();
+              _elem695.read(iprot);
+              struct.success.add(_elem695);
             }
           }
           struct.setSuccessIsSet(true);
@@ -62253,13 +62336,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_with
             case 5: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list672.size);
-                  for (int _i673 = 0; _i673 < _list672.size; ++_i673)
+                  org.apache.thrift.protocol.TList _list696 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list696.size);
+                  for (int _i697 = 0; _i697 < _list696.size; ++_i697)
                   {
-                    String _elem674; // required
-                    _elem674 = iprot.readString();
-                    struct.group_names.add(_elem674);
+                    String _elem698; // required
+                    _elem698 = iprot.readString();
+                    struct.group_names.add(_elem698);
                   }
                   iprot.readListEnd();
                 }
@@ -62303,9 +62386,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_wit
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter675 : struct.group_names)
+            for (String _iter699 : struct.group_names)
             {
-              oprot.writeString(_iter675);
+              oprot.writeString(_iter699);
             }
             oprot.writeListEnd();
           }
@@ -62360,9 +62443,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_with
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter676 : struct.group_names)
+            for (String _iter700 : struct.group_names)
             {
-              oprot.writeString(_iter676);
+              oprot.writeString(_iter700);
             }
           }
         }
@@ -62390,13 +62473,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_with_
         }
         if (incoming.get(4)) {
           {
-            org.apache.thrift.protocol.TList _list677 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list677.size);
-            for (int _i678 = 0; _i678 < _list677.size; ++_i678)
+            org.apache.thrift.protocol.TList _list701 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list701.size);
+            for (int _i702 = 0; _i702 < _list701.size; ++_i702)
             {
-              String _elem679; // required
-              _elem679 = iprot.readString();
-              struct.group_names.add(_elem679);
+              String _elem703; // required
+              _elem703 = iprot.readString();
+              struct.group_names.add(_elem703);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -62883,14 +62966,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_with
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list680 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list680.size);
-                  for (int _i681 = 0; _i681 < _list680.size; ++_i681)
+                  org.apache.thrift.protocol.TList _list704 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list704.size);
+                  for (int _i705 = 0; _i705 < _list704.size; ++_i705)
                   {
-                    Partition _elem682; // required
-                    _elem682 = new Partition();
-                    _elem682.read(iprot);
-                    struct.success.add(_elem682);
+                    Partition _elem706; // required
+                    _elem706 = new Partition();
+                    _elem706.read(iprot);
+                    struct.success.add(_elem706);
                   }
                   iprot.readListEnd();
                 }
@@ -62934,9 +63017,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_wit
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter683 : struct.success)
+            for (Partition _iter707 : struct.success)
             {
-              _iter683.write(oprot);
+              _iter707.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -62983,9 +63066,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_with
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter684 : struct.success)
+            for (Partition _iter708 : struct.success)
             {
-              _iter684.write(oprot);
+              _iter708.write(oprot);
             }
           }
         }
@@ -63003,14 +63086,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_with_
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list685 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list685.size);
-            for (int _i686 = 0; _i686 < _list685.size; ++_i686)
+            org.apache.thrift.protocol.TList _list709 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list709.size);
+            for (int _i710 = 0; _i710 < _list709.size; ++_i710)
             {
-              Partition _elem687; // required
-              _elem687 = new Partition();
-              _elem687.read(iprot);
-              struct.success.add(_elem687);
+              Partition _elem711; // required
+              _elem711 = new Partition();
+              _elem711.read(iprot);
+              struct.success.add(_elem711);
             }
           }
           struct.setSuccessIsSet(true);
@@ -64073,14 +64156,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_pspe
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list688 = iprot.readListBegin();
-                  struct.success = new ArrayList<PartitionSpec>(_list688.size);
-                  for (int _i689 = 0; _i689 < _list688.size; ++_i689)
+                  org.apache.thrift.protocol.TList _list712 = iprot.readListBegin();
+                  struct.success = new ArrayList<PartitionSpec>(_list712.size);
+                  for (int _i713 = 0; _i713 < _list712.size; ++_i713)
                   {
-                    PartitionSpec _elem690; // required
-                    _elem690 = new PartitionSpec();
-                    _elem690.read(iprot);
-                    struct.success.add(_elem690);
+                    PartitionSpec _elem714; // required
+                    _elem714 = new PartitionSpec();
+                    _elem714.read(iprot);
+                    struct.success.add(_elem714);
                   }
                   iprot.readListEnd();
                 }
@@ -64124,9 +64207,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_psp
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (PartitionSpec _iter691 : struct.success)
+            for (PartitionSpec _iter715 : struct.success)
             {
-              _iter691.write(oprot);
+              _iter715.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -64173,9 +64256,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_pspe
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (PartitionSpec _iter692 : struct.success)
+            for (PartitionSpec _iter716 : struct.success)
             {
-              _iter692.write(oprot);
+              _iter716.write(oprot);
             }
           }
         }
@@ -64193,14 +64276,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_pspec
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list693 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<PartitionSpec>(_list693.size);
-            for (int _i694 = 0; _i694 < _list693.size; ++_i694)
+            org.apache.thrift.protocol.TList _list717 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<PartitionSpec>(_list717.size);
+            for (int _i718 = 0; _i718 < _list717.size; ++_i718)
             {
-              PartitionSpec _elem695; // required
-              _elem695 = new PartitionSpec();
-              _elem695.read(iprot);
-              struct.success.add(_elem695);
+              PartitionSpec _elem719; // required
+              _elem719 = new PartitionSpec();
+              _elem719.read(iprot);
+              struct.success.add(_elem719);
             }
           }
           struct.setSuccessIsSet(true);
@@ -65182,13 +65265,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list696 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list696.size);
-                  for (int _i697 = 0; _i697 < _list696.size; ++_i697)
+                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list720.size);
+                  for (int _i721 = 0; _i721 < _list720.size; ++_i721)
                   {
-                    String _elem698; // required
-                    _elem698 = iprot.readString();
-                    struct.success.add(_elem698);
+                    String _elem722; // required
+                    _elem722 = iprot.readString();
+                    struct.success.add(_elem722);
                   }
                   iprot.readListEnd();
                 }
@@ -65223,9 +65306,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter699 : struct.success)
+            for (String _iter723 : struct.success)
             {
-              oprot.writeString(_iter699);
+              oprot.writeString(_iter723);
             }
             oprot.writeListEnd();
           }
@@ -65264,9 +65347,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter700 : struct.success)
+            for (String _iter724 : struct.success)
             {
-              oprot.writeString(_iter700);
+              oprot.writeString(_iter724);
             }
           }
         }
@@ -65281,13 +65364,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list701 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list701.size);
-            for (int _i702 = 0; _i702 < _list701.size; ++_i702)
+            org.apache.thrift.protocol.TList _list725 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list725.size);
+            for (int _i726 = 0; _i726 < _list725.size; ++_i726)
             {
-              String _elem703; // required
-              _elem703 = iprot.readString();
-              struct.success.add(_elem703);
+              String _elem727; // required
+              _elem727 = iprot.readString();
+              struct.success.add(_elem727);
             }
           }
           struct.setSuccessIsSet(true);
@@ -65878,13 +65961,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_a
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list704 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list704.size);
-                  for (int _i705 = 0; _i705 < _list704.size; ++_i705)
+                  org.apache.thrift.protocol.TList _list728 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list728.size);
+                  for (int _i729 = 0; _i729 < _list728.size; ++_i729)
                   {
-                    String _elem706; // required
-                    _elem706 = iprot.readString();
-                    struct.part_vals.add(_elem706);
+                    String _elem730; // required
+                    _elem730 = iprot.readString();
+                    struct.part_vals.add(_elem730);
                   }
                   iprot.readListEnd();
                 }
@@ -65928,9 +66011,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter707 : struct.part_vals)
+            for (String _iter731 : struct.part_vals)
             {
-              oprot.writeString(_iter707);
+              oprot.writeString(_iter731);
             }
             oprot.writeListEnd();
           }
@@ -65979,9 +66062,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_a
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter708 : struct.part_vals)
+            for (String _iter732 : struct.part_vals)
             {
-              oprot.writeString(_iter708);
+              oprot.writeString(_iter732);
             }
           }
         }
@@ -66004,13 +66087,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_ar
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list709 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list709.size);
-            for (int _i710 = 0; _i710 < _list709.size; ++_i710)
+            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list733.size);
+            for (int _i734 = 0; _i734 < _list733.size; ++_i734)
             {
-              String _elem711; // required
-              _elem711 = iprot.readString();
-              struct.part_vals.add(_elem711);
+              String _elem735; // required
+              _elem735 = iprot.readString();
+              struct.part_vals.add(_elem735);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -66501,14 +66584,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_r
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list712 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list712.size);
-                  for (int _i713 = 0; _i713 < _list712.size; ++_i713)
+                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list736.size);
+                  for (int _i737 = 0; _i737 < _list736.size; ++_i737)
                   {
-                    Partition _elem714; // required
-                    _elem714 = new Partition();
-                    _elem714.read(iprot);
-                    struct.success.add(_elem714);
+                    Partition _elem738; // required
+                    _elem738 = new Partition();
+                    _elem738.read(iprot);
+                    struct.success.add(_elem738);
                   }
                   iprot.readListEnd();
                 }
@@ -66552,9 +66635,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter715 : struct.success)
+            for (Partition _iter739 : struct.success)
             {
-              _iter715.write(oprot);
+              _iter739.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -66601,9 +66684,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_r
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter716 : struct.success)
+            for (Partition _iter740 : struct.success)
             {
-              _iter716.write(oprot);
+              _iter740.write(oprot);
             }
           }
         }
@@ -66621,14 +66704,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_re
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list717 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list717.size);
-            for (int _i718 = 0; _i718 < _list717.size; ++_i718)
+            org.apache.thrift.protocol.TList _list741 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list741.size);
+            for (int _i742 = 0; _i742 < _list741.size; ++_i742)
             {
-              Partition _elem719; // required
-              _elem719 = new Partition();
-              _elem719.read(iprot);
-              struct.success.add(_elem719);
+              Partition _elem743; // required
+              _elem743 = new Partition();
+              _elem743.read(iprot);
+              struct.success.add(_elem743);
             }
           }
           struct.setSuccessIsSet(true);
@@ -67406,13 +67489,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list720 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list720.size);
-                  for (int _i721 = 0; _i721 < _list720.size; ++_i721)
+                  org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list744.size);
+                  for (int _i745 = 0; _i745 < _list744.size; ++_i745)
                   {
-                    String _elem722; // required
-                    _elem722 = iprot.readString();
-                    struct.part_vals.add(_elem722);
+                    String _elem746; // required
+                    _elem746 = iprot.readString();
+                    struct.part_vals.add(_elem746);
                   }
                   iprot.readListEnd();
                 }
@@ -67440,13 +67523,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 6: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list723 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list723.size);
-                  for (int _i724 = 0; _i724 < _list723.size; ++_i724)
+                  org.apache.thrift.protocol.TList _list747 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list747.size);
+                  for (int _i748 = 0; _i748 < _list747.size; ++_i748)
                   {
-                    String _elem725; // required
-                    _elem725 = iprot.readString();
-                    struct.group_names.add(_elem725);
+                    String _elem749; // required
+                    _elem749 = iprot.readString();
+                    struct.group_names.add(_elem749);
                   }
                   iprot.readListEnd();
                 }
@@ -67482,9 +67565,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter726 : struct.part_vals)
+            for (String _iter750 : struct.part_vals)
             {
-              oprot.writeString(_iter726);
+              oprot.writeString(_iter750);
             }
             oprot.writeListEnd();
           }
@@ -67502,9 +67585,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter727 : struct.group_names)
+            for (String _iter751 : struct.group_names)
             {
-              oprot.writeString(_iter727);
+              oprot.writeString(_iter751);
             }
             oprot.writeListEnd();
           }
@@ -67556,9 +67639,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter728 : struct.part_vals)
+            for (String _iter752 : struct.part_vals)
             {
-              oprot.writeString(_iter728);
+              oprot.writeString(_iter752);
             }
           }
         }
@@ -67571,9 +67654,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter729 : struct.group_names)
+            for (String _iter753 : struct.group_names)
             {
-              oprot.writeString(_iter729);
+              oprot.writeString(_iter753);
             }
           }
         }
@@ -67593,13 +67676,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list730 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list730.size);
-            for (int _i731 = 0; _i731 < _list730.size; ++_i731)
+            org.apache.thrift.protocol.TList _list754 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list754.size);
+            for (int _i755 = 0; _i755 < _list754.size; ++_i755)
             {
-              String _elem732; // required
-              _elem732 = iprot.readString();
-              struct.part_vals.add(_elem732);
+              String _elem756; // required
+              _elem756 = iprot.readString();
+              struct.part_vals.add(_elem756);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -67614,13 +67697,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         }
         if (incoming.get(5)) {
           {
-            org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list733.size);
-            for (int _i734 = 0; _i734 < _list733.size; ++_i734)
+            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list757.size);
+            for (int _i758 = 0; _i758 < _list757.size; ++_i758)
             {
-              String _elem735; // required
-              _elem735 = iprot.readString();
-              struct.group_names.add(_elem735);
+              String _elem759; // required
+              _elem759 = iprot.readString();
+              struct.group_names.add(_elem759);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -68107,14 +68190,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_ps_w
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list736 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list736.size);
-                  for (int _i737 = 0; _i737 < _list736.size; ++_i737)
+                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list760.size);
+                  for (int _i761 = 0; _i761 < _list760.size; ++_i761)
                   {
-                    Partition _elem738; // required
-                    _elem738 = new Partition();
-                    _elem738.read(iprot);
-                    struct.success.add(_elem738);
+                    Partition _elem762; // required
+                    _elem762 = new Partition();
+                    _elem762.read(iprot);
+                    struct.success.add(_elem762);
                   }
                   iprot.readListEnd();
                 }
@@ -68158,9 +68241,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_ps_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter739 : struct.success)
+            for (Partition _iter763 : struct.success)
             {
-              _iter739.write(oprot);
+              _iter763.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -68207,9 +68290,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_w
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter740 : struct.success)
+            for (Partition _iter764 : struct.success)
             {
-              _iter740.write(oprot);
+              _iter764.write(oprot);
             }
           }
         }
@@ -68227,14 +68310,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_ps_wi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list741 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list741.size);
-            for (int _i742 = 0; _i742 < _list741.size; ++_i742)
+            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list765.size);
+            for (int _i766 = 0; _i766 < _list765.size; ++_i766)
             {
-              Partition _elem743; // required
-              _elem743 = new Partition();
-              _elem743.read(iprot);
-              struct.success.add(_elem743);
+              Partition _elem767; // required
+              _elem767 = new Partition();
+              _elem767.read(iprot);
+              struct.success.add(_elem767);
             }
           }
           struct.setSuccessIsSet(true);
@@ -68830,13 +68913,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list744 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list744.size);
-                  for (int _i745 = 0; _i745 < _list744.size; ++_i745)
+                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list768.size);
+                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
                   {
-                    String _elem746; // required
-                    _elem746 = iprot.readString();
-                    struct.part_vals.add(_elem746);
+                    String _elem770; // required
+                    _elem770 = iprot.readString();
+                    struct.part_vals.add(_elem770);
                   }
                   iprot.readListEnd();
                 }
@@ -68880,9 +68963,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter747 : struct.part_vals)
+            for (String _iter771 : struct.part_vals)
             {
-              oprot.writeString(_iter747);
+              oprot.writeString(_iter771);
             }
             oprot.writeListEnd();
           }
@@ -68931,9 +69014,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter748 : struct.part_vals)
+            for (String _iter772 : struct.part_vals)
             {
-              oprot.writeString(_iter748);
+              oprot.writeString(_iter772);
             }
           }
         }
@@ -68956,13 +69039,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list749 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list749.size);
-            for (int _i750 = 0; _i750 < _list749.size; ++_i750)
+            org.apache.thrift.protocol.TList _list773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list773.size);
+            for (int _i774 = 0; _i774 < _list773.size; ++_i774)
             {
-              String _elem751; // required
-              _elem751 = iprot.readString();
-              struct.part_vals.add(_elem751);
+              String _elem775; // required
+              _elem775 = iprot.readString();
+              struct.part_vals.add(_elem775);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -69453,13 +69536,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partition_names
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list752 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list752.size);
-                  for (int _i753 = 0; _i753 < _list752.size; ++_i753)
+                  org.apache.thrift.protocol.TList _list776 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list776.size);
+                  for (int _i777 = 0; _i777 < _list776.size; ++_i777)
                   {
-                    String _elem754; // required
-                    _elem754 = iprot.readString();
-                    struct.success.add(_elem754);
+                    String _elem778; // required
+                    _elem778 = iprot.readString();
+                    struct.success.add(_elem778);
                   }
                   iprot.readListEnd();
                 }
@@ -69503,9 +69586,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partition_name
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter755 : struct.success)
+            for (String _iter779 : struct.success)
             {
-              oprot.writeString(_iter755);
+              oprot.writeString(_iter779);
             }
             oprot.writeListEnd();
           }
@@ -69552,9 +69635,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partition_names
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter756 : struct.success)
+            for (String _iter780 : struct.success)
             {
-              oprot.writeString(_iter756);
+              oprot.writeString(_iter780);
             }
           }
         }
@@ -69572,13 +69655,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partition_names_
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list757.size);
-            for (int _i758 = 0; _i758 < _list757.size; ++_i758)
+            org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list781.size);
+            for (int _i782 = 0; _i782 < _list781.size; ++_i782)
             {
-              String _elem759; // required
-              _elem759 = iprot.readString();
-              struct.success.add(_elem759);
+              String _elem783; // required
+              _elem783 = iprot.readString();
+              struct.success.add(_elem783);
             }
           }
           struct.setSuccessIsSet(true);
@@ -70745,14 +70828,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_f
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list760 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list760.size);
-                  for (int _i761 = 0; _i761 < _list760.size; ++_i761)
+                  org.apache.thrift.protocol.TList _list784 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list784.size);
+                  for (int _i785 = 0; _i785 < _list784.size; ++_i785)
                   {
-                    Partition _elem762; // required
-                    _elem762 = new Partition();
-                    _elem762.read(iprot);
-                    struct.success.add(_elem762);
+                    Partition _elem786; // required
+                    _elem786 = new Partition();
+                    _elem786.read(iprot);
+                    struct.success.add(_elem786);
                   }
                   iprot.readListEnd();
                 }
@@ -70796,9 +70879,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter763 : struct.success)
+            for (Partition _iter787 : struct.success)
             {
-              _iter763.write(oprot);
+              _iter787.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -70845,9 +70928,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_f
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter764 : struct.success)
+            for (Partition _iter788 : struct.success)
             {
-              _iter764.write(oprot);
+              _iter788.write(oprot);
             }
           }
         }
@@ -70865,14 +70948,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_fi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list765 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list765.size);
-            for (int _i766 = 0; _i766 < _list765.size; ++_i766)
+            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list789.size);
+            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
             {
-              Partition _elem767; // required
-              _elem767 = new Partition();
-              _elem767.read(iprot);
-              struct.success.add(_elem767);
+              Partition _elem791; // required
+              _elem791 = new Partition();
+              _elem791.read(iprot);
+              struct.success.add(_elem791);
             }
           }
           struct.setSuccessIsSet(true);
@@ -72039,14 +72122,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_part_specs_by_f
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list768 = iprot.readListBegin();
-                  struct.success = new ArrayList<PartitionSpec>(_list768.size);
-                  for (int _i769 = 0; _i769 < _list768.size; ++_i769)
+                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
+                  struct.success = new ArrayList<PartitionSpec>(_list792.size);
+                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
                   {
-                    PartitionSpec _elem770; // required
-                    _elem770 = new PartitionSpec();
-                    _elem770.read(iprot);
-                    struct.success.add(_elem770);
+                    PartitionSpec _elem794; // required
+                    _elem794 = new PartitionSpec();
+                    _elem794.read(iprot);
+                    struct.success.add(_elem794);
                   }
                   iprot.readListEnd();
                 }
@@ -72090,9 +72173,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_part_specs_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (PartitionSpec _iter771 : struct.success)
+            for (PartitionSpec _iter795 : struct.success)
             {
-              _iter771.write(oprot);
+              _iter795.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -72139,9 +72222,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_part_specs_by_f
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (PartitionSpec _iter772 : struct.success)
+            for (PartitionSpec _iter796 : struct.success)
             {
-              _iter772.write(oprot);
+              _iter796.write(oprot);
             }
           }
         }
@@ -72159,14 +72242,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_part_specs_by_fi
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list773 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<PartitionSpec>(_list773.size);
-            for (int _i774 = 0; _i774 < _list773.size; ++_i774)
+            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<PartitionSpec>(_list797.size);
+            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
             {
-              PartitionSpec _elem775; // required
-              _elem775 = new PartitionSpec();
-              _elem775.read(iprot);
-              struct.success.add(_elem775);
+              PartitionSpec _elem799; // required
+              _elem799 = new PartitionSpec();
+              _elem799.read(iprot);
+              struct.success.add(_elem799);
             }
           }
           struct.setSuccessIsSet(true);
@@ -73617,13 +73700,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_n
             case 3: // NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list776 = iprot.readListBegin();
-                  struct.names = new ArrayList<String>(_list776.size);
-                  for (int _i777 = 0; _i777 < _list776.size; ++_i777)
+                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
+                  struct.names = new ArrayList<String>(_list800.size);
+                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
                   {
-                    String _elem778; // required
-                    _elem778 = iprot.readString();
-                    struct.names.add(_elem778);
+                    String _elem802; // required
+                    _elem802 = iprot.readString();
+                    struct.names.add(_elem802);
                   }
                   iprot.readListEnd();
                 }
@@ -73659,9 +73742,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
-            for (String _iter779 : struct.names)
+            for (String _iter803 : struct.names)
             {
-              oprot.writeString(_iter779);
+              oprot.writeString(_iter803);
             }
             oprot.writeListEnd();
           }
@@ -73704,9 +73787,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_n
         if (struct.isSetNames()) {
           {
             oprot.writeI32(struct.names.size());
-            for (String _iter780 : struct.names)
+            for (String _iter804 : struct.names)
             {
-              oprot.writeString(_iter780);
+              oprot.writeString(_iter804);
             }
           }
         }
@@ -73726,13 +73809,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_na
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list781 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.names = new ArrayList<String>(_list781.size);
-            for (int _i782 = 0; _i782 < _list781.size; ++_i782)
+            org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.names = new ArrayList<String>(_list805.size);
+            for (int _i806 = 0; _i806 < _list805.size; ++_i806)
             {
-              String _elem783; // required
-              _elem783 = iprot.readString();
-              struct.names.add(_elem783);
+              String _elem807; // required
+              _elem807 = iprot.readString();
+              struct.names.add(_elem807);
             }
           }
           struct.setNamesIsSet(true);
@@ -74219,14 +74302,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_partitions_by_n
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list784 = iprot.readListBegin();
-                  struct.success = new ArrayList<Partition>(_list784.size);
-                  for (int _i785 = 0; _i785 < _list784.size; ++_i785)
+                  org.apache.thrift.protocol.TList _list808 = iprot.readListBegin();
+                  struct.success = new ArrayList<Partition>(_list808.size);
+                  for (int _i809 = 0; _i809 < _list808.size; ++_i809)
                   {
-                    Partition _elem786; // required
-                    _elem786 = new Partition();
-                    _elem786.read(iprot);
-                    struct.success.add(_elem786);
+                    Partition _elem810; // required
+                    _elem810 = new Partition();
+                    _elem810.read(iprot);
+                    struct.success.add(_elem810);
                   }
                   iprot.readListEnd();
                 }
@@ -74270,9 +74353,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_partitions_by_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Partition _iter787 : struct.success)
+            for (Partition _iter811 : struct.success)
             {
-              _iter787.write(oprot);
+              _iter811.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -74319,9 +74402,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_n
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Partition _iter788 : struct.success)
+            for (Partition _iter812 : struct.success)
             {
-              _iter788.write(oprot);
+              _iter812.write(oprot);
             }
           }
         }
@@ -74339,14 +74422,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_partitions_by_na
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list789 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Partition>(_list789.size);
-            for (int _i790 = 0; _i790 < _list789.size; ++_i790)
+            org.apache.thrift.protocol.TList _list813 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Partition>(_list813.size);
+            for (int _i814 = 0; _i814 < _list813.size; ++_i814)
             {
-              Partition _elem791; // required
-              _elem791 = new Partition();
-              _elem791.read(iprot);
-              struct.success.add(_elem791);
+              Partition _elem815; // required
+              _elem815 = new Partition();
+              _elem815.read(iprot);
+              struct.success.add(_elem815);
             }
           }
           struct.setSuccessIsSet(true);
@@ -75896,14 +75979,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, alter_partitions_ar
             case 3: // NEW_PARTS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list792 = iprot.readListBegin();
-                  struct.new_parts = new ArrayList<Partition>(_list792.size);
-                  for (int _i793 = 0; _i793 < _list792.size; ++_i793)
+                  org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
+                  struct.new_parts = new ArrayList<Partition>(_list816.size);
+                  for (int _i817 = 0; _i817 < _list816.size; ++_i817)
                   {
-                    Partition _elem794; // required
-                    _elem794 = new Partition();
-                    _elem794.read(iprot);
-                    struct.new_parts.add(_elem794);
+                    Partition _elem818; // required
+                    _elem818 = new Partition();
+                    _elem818.read(iprot);
+                    struct.new_parts.add(_elem818);
                   }
                   iprot.readListEnd();
                 }
@@ -75939,9 +76022,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, alter_partitions_a
           oprot.writeFieldBegin(NEW_PARTS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.new_parts.size()));
-            for (Partition _iter795 : struct.new_parts)
+            for (Partition _iter819 : struct.new_parts)
             {
-              _iter795.write(oprot);
+              _iter819.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -75984,9 +76067,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, alter_partitions_ar
         if (struct.isSetNew_parts()) {
           {
             oprot.writeI32(struct.new_parts.size());
-            for (Partition _iter796 : struct.new_parts)
+            for (Partition _iter820 : struct.new_parts)
             {
-              _iter796.write(oprot);
+              _iter820.write(oprot);
             }
           }
         }
@@ -76006,14 +76089,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, alter_partitions_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list797 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.new_parts = new ArrayList<Partition>(_list797.size);
-            for (int _i798 = 0; _i798 < _list797.size; ++_i798)
+            org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.new_parts = new ArrayList<Partition>(_list821.size);
+            for (int _i822 = 0; _i822 < _list821.size; ++_i822)
             {
-              Partition _elem799; // required
-              _elem799 = new Partition();
-              _elem799.read(iprot);
-              struct.new_parts.add(_elem799);
+              Partition _elem823; // required
+              _elem823 = new Partition();
+              _elem823.read(iprot);
+              struct.new_parts.add(_elem823);
             }
           }
           struct.setNew_partsIsSet(true);
@@ -78212,13 +78295,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, rename_partition_ar
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list800 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list800.size);
-                  for (int _i801 = 0; _i801 < _list800.size; ++_i801)
+                  org.apache.thrift.protocol.TList _list824 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list824.size);
+                  for (int _i825 = 0; _i825 < _list824.size; ++_i825)
                   {
-                    String _elem802; // required
-                    _elem802 = iprot.readString();
-                    struct.part_vals.add(_elem802);
+                    String _elem826; // required
+                    _elem826 = iprot.readString();
+                    struct.part_vals.add(_elem826);
                   }
                   iprot.readListEnd();
                 }
@@ -78263,9 +78346,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, rename_partition_a
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter803 : struct.part_vals)
+            for (String _iter827 : struct.part_vals)
             {
-              oprot.writeString(_iter803);
+              oprot.writeString(_iter827);
             }
             oprot.writeListEnd();
           }
@@ -78316,9 +78399,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, rename_partition_ar
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter804 : struct.part_vals)
+            for (String _iter828 : struct.part_vals)
             {
-              oprot.writeString(_iter804);
+              oprot.writeString(_iter828);
             }
           }
         }
@@ -78341,13 +78424,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, rename_partition_arg
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list805 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list805.size);
-            for (int _i806 = 0; _i806 < _list805.size; ++_i806)
+            org.apache.thrift.protocol.TList _list829 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list829.size);
+            for (int _i830 = 0; _i830 < _list829.size; ++_i830)
             {
-              String _elem807; // required
-              _elem807 = iprot.readString();
-              struct.part_vals.add(_elem807);
+              String _elem831; // required
+              _elem831 = iprot.readString();
+              struct.part_vals.add(_elem831);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -79224,13 +79307,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_has_
             case 1: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list808 = iprot.readListBegin();
-                  struct.part_vals = new ArrayList<String>(_list808.size);
-                  for (int _i809 = 0; _i809 < _list808.size; ++_i809)
+                  org.apache.thrift.protocol.TList _list832 = iprot.readListBegin();
+                  struct.part_vals = new ArrayList<String>(_list832.size);
+                  for (int _i833 = 0; _i833 < _list832.size; ++_i833)
                   {
-                    String _elem810; // required
-                    _elem810 = iprot.readString();
-                    struct.part_vals.add(_elem810);
+                    String _elem834; // required
+                    _elem834 = iprot.readString();
+                    struct.part_vals.add(_elem834);
                   }
                   iprot.readListEnd();
                 }
@@ -79264,9 +79347,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_has
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (String _iter811 : struct.part_vals)
+            for (String _iter835 : struct.part_vals)
             {
-              oprot.writeString(_iter811);
+              oprot.writeString(_iter835);
             }
             oprot.writeListEnd();
           }
@@ -79303,9 +79386,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_has_
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (String _iter812 : struct.part_vals)
+            for (String _iter836 : struct.part_vals)
             {
-              oprot.writeString(_iter812);
+              oprot.writeString(_iter836);
             }
           }
         }
@@ -79320,13 +79403,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_has_v
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list813 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new ArrayList<String>(_list813.size);
-            for (int _i814 = 0; _i814 < _list813.size; ++_i814)
+            org.apache.thrift.protocol.TList _list837 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new ArrayList<String>(_list837.size);
+            for (int _i838 = 0; _i838 < _list837.size; ++_i838)
             {
-              String _elem815; // required
-              _elem815 = iprot.readString();
-              struct.part_vals.add(_elem815);
+              String _elem839; // required
+              _elem839 = iprot.readString();
+              struct.part_vals.add(_elem839);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -81484,13 +81567,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_to_v
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list816 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list816.size);
-                  for (int _i817 = 0; _i817 < _list816.size; ++_i817)
+                  org.apache.thrift.protocol.TList _list840 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list840.size);
+                  for (int _i841 = 0; _i841 < _list840.size; ++_i841)
                   {
-                    String _elem818; // required
-                    _elem818 = iprot.readString();
-                    struct.success.add(_elem818);
+                    String _elem842; // required
+                    _elem842 = iprot.readString();
+                    struct.success.add(_elem842);
                   }
                   iprot.readListEnd();
                 }
@@ -81525,9 +81608,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_to_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter819 : struct.success)
+            for (String _iter843 : struct.success)
             {
-              oprot.writeString(_iter819);
+              oprot.writeString(_iter843);
             }
             oprot.writeListEnd();
           }
@@ -81566,9 +81649,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_to_v
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter820 : struct.success)
+            for (String _iter844 : struct.success)
             {
-              oprot.writeString(_iter820);
+              oprot.writeString(_iter844);
             }
           }
         }
@@ -81583,13 +81666,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_to_va
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list821 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list821.size);
-            for (int _i822 = 0; _i822 < _list821.size; ++_i822)
+            org.apache.thrift.protocol.TList _list845 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list845.size);
+            for (int _i846 = 0; _i846 < _list845.size; ++_i846)
             {
-              String _elem823; // required
-              _elem823 = iprot.readString();
-              struct.success.add(_elem823);
+              String _elem847; // required
+              _elem847 = iprot.readString();
+              struct.success.add(_elem847);
             }
           }
           struct.setSuccessIsSet(true);
@@ -82363,15 +82446,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, partition_name_to_s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map824 = iprot.readMapBegin();
-                  struct.success = new HashMap<String,String>(2*_map824.size);
-                  for (int _i825 = 0; _i825 < _map824.size; ++_i825)
+                  org.apache.thrift.protocol.TMap _map848 = iprot.readMapBegin();
+                  struct.success = new HashMap<String,String>(2*_map848.size);
+                  for (int _i849 = 0; _i849 < _map848.size; ++_i849)
                   {
-                    String _key826; // required
-                    String _val827; // required
-                    _key826 = iprot.readString();
-                    _val827 = iprot.readString();
-                    struct.success.put(_key826, _val827);
+                    String _key850; // required
+                    String _val851; // required
+                    _key850 = iprot.readString();
+                    _val851 = iprot.readString();
+                    struct.success.put(_key850, _val851);
                   }
                   iprot.readMapEnd();
                 }
@@ -82406,10 +82489,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, partition_name_to_
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (Map.Entry<String, String> _iter828 : struct.success.entrySet())
+            for (Map.Entry<String, String> _iter852 : struct.success.entrySet())
             {
-              oprot.writeString(_iter828.getKey());
-              oprot.writeString(_iter828.getValue());
+              oprot.writeString(_iter852.getKey());
+              oprot.writeString(_iter852.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -82448,10 +82531,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, partition_name_to_s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Map.Entry<String, String> _iter829 : struct.success.entrySet())
+            for (Map.Entry<String, String> _iter853 : struct.success.entrySet())
             {
-              oprot.writeString(_iter829.getKey());
-              oprot.writeString(_iter829.getValue());
+              oprot.writeString(_iter853.getKey());
+              oprot.writeString(_iter853.getValue());
             }
           }
         }
@@ -82466,15 +82549,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, partition_name_to_sp
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TMap _map830 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new HashMap<String,String>(2*_map830.size);
-            for (int _i831 = 0; _i831 < _map830.size; ++_i831)
+            org.apache.thrift.protocol.TMap _map854 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new HashMap<String,String>(2*_map854.size);
+            for (int _i855 = 0; _i855 < _map854.size; ++_i855)
             {
-              String _key832; // required
-              String _val833; // required
-              _key832 = iprot.readString();
-              _val833 = iprot.readString();
-              struct.success.put(_key832, _val833);
+              String _key856; // required
+              String _val857; // required
+              _key856 = iprot.readString();
+              _val857 = iprot.readString();
+              struct.success.put(_key856, _val857);
             }
           }
           struct.setSuccessIsSet(true);
@@ -83080,15 +83163,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, markPartitionForEve
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map834 = iprot.readMapBegin();
-                  struct.part_vals = new HashMap<String,String>(2*_map834.size);
-                  for (int _i835 = 0; _i835 < _map834.size; ++_i835)
+                  org.apache.thrift.protocol.TMap _map858 = iprot.readMapBegin();
+                  struct.part_vals = new HashMap<String,String>(2*_map858.size);
+                  for (int _i859 = 0; _i859 < _map858.size; ++_i859)
                   {
-                    String _key836; // required
-                    String _val837; // required
-                    _key836 = iprot.readString();
-                    _val837 = iprot.readString();
-                    struct.part_vals.put(_key836, _val837);
+                    String _key860; // required
+                    String _val861; // required
+                    _key860 = iprot.readString();
+                    _val861 = iprot.readString();
+                    struct.part_vals.put(_key860, _val861);
                   }
                   iprot.readMapEnd();
                 }
@@ -83132,10 +83215,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, markPartitionForEv
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (Map.Entry<String, String> _iter838 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter862 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter838.getKey());
-              oprot.writeString(_iter838.getValue());
+              oprot.writeString(_iter862.getKey());
+              oprot.writeString(_iter862.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -83186,10 +83269,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, markPartitionForEve
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (Map.Entry<String, String> _iter839 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter863 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter839.getKey());
-              oprot.writeString(_iter839.getValue());
+              oprot.writeString(_iter863.getKey());
+              oprot.writeString(_iter863.getValue());
             }
           }
         }
@@ -83212,15 +83295,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, markPartitionForEven
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TMap _map840 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new HashMap<String,String>(2*_map840.size);
-            for (int _i841 = 0; _i841 < _map840.size; ++_i841)
+            org.apache.thrift.protocol.TMap _map864 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new HashMap<String,String>(2*_map864.size);
+            for (int _i865 = 0; _i865 < _map864.size; ++_i865)
             {
-              String _key842; // required
-              String _val843; // required
-              _key842 = iprot.readString();
-              _val843 = iprot.readString();
-              struct.part_vals.put(_key842, _val843);
+              String _key866; // required
+              String _val867; // required
+              _key866 = iprot.readString();
+              _val867 = iprot.readString();
+              struct.part_vals.put(_key866, _val867);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -84715,15 +84798,15 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, isPartitionMarkedFo
             case 3: // PART_VALS
               if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                 {
-                  org.apache.thrift.protocol.TMap _map844 = iprot.readMapBegin();
-                  struct.part_vals = new HashMap<String,String>(2*_map844.size);
-                  for (int _i845 = 0; _i845 < _map844.size; ++_i845)
+                  org.apache.thrift.protocol.TMap _map868 = iprot.readMapBegin();
+                  struct.part_vals = new HashMap<String,String>(2*_map868.size);
+                  for (int _i869 = 0; _i869 < _map868.size; ++_i869)
                   {
-                    String _key846; // required
-                    String _val847; // required
-                    _key846 = iprot.readString();
-                    _val847 = iprot.readString();
-                    struct.part_vals.put(_key846, _val847);
+                    String _key870; // required
+                    String _val871; // required
+                    _key870 = iprot.readString();
+                    _val871 = iprot.readString();
+                    struct.part_vals.put(_key870, _val871);
                   }
                   iprot.readMapEnd();
                 }
@@ -84767,10 +84850,10 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, isPartitionMarkedF
           oprot.writeFieldBegin(PART_VALS_FIELD_DESC);
           {
             oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.part_vals.size()));
-            for (Map.Entry<String, String> _iter848 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter872 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter848.getKey());
-              oprot.writeString(_iter848.getValue());
+              oprot.writeString(_iter872.getKey());
+              oprot.writeString(_iter872.getValue());
             }
             oprot.writeMapEnd();
           }
@@ -84821,10 +84904,10 @@ public void write(org.apache.thrift.protocol.TProtocol prot, isPartitionMarkedFo
         if (struct.isSetPart_vals()) {
           {
             oprot.writeI32(struct.part_vals.size());
-            for (Map.Entry<String, String> _iter849 : struct.part_vals.entrySet())
+            for (Map.Entry<String, String> _iter873 : struct.part_vals.entrySet())
             {
-              oprot.writeString(_iter849.getKey());
-              oprot.writeString(_iter849.getValue());
+              oprot.writeString(_iter873.getKey());
+              oprot.writeString(_iter873.getValue());
             }
           }
         }
@@ -84847,15 +84930,15 @@ public void read(org.apache.thrift.protocol.TProtocol prot, isPartitionMarkedFor
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TMap _map850 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.part_vals = new HashMap<String,String>(2*_map850.size);
-            for (int _i851 = 0; _i851 < _map850.size; ++_i851)
+            org.apache.thrift.protocol.TMap _map874 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.part_vals = new HashMap<String,String>(2*_map874.size);
+            for (int _i875 = 0; _i875 < _map874.size; ++_i875)
             {
-              String _key852; // required
-              String _val853; // required
-              _key852 = iprot.readString();
-              _val853 = iprot.readString();
-              struct.part_vals.put(_key852, _val853);
+              String _key876; // required
+              String _val877; // required
+              _key876 = iprot.readString();
+              _val877 = iprot.readString();
+              struct.part_vals.put(_key876, _val877);
             }
           }
           struct.setPart_valsIsSet(true);
@@ -91579,14 +91662,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_indexes_result
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list854 = iprot.readListBegin();
-                  struct.success = new ArrayList<Index>(_list854.size);
-                  for (int _i855 = 0; _i855 < _list854.size; ++_i855)
+                  org.apache.thrift.protocol.TList _list878 = iprot.readListBegin();
+                  struct.success = new ArrayList<Index>(_list878.size);
+                  for (int _i879 = 0; _i879 < _list878.size; ++_i879)
                   {
-                    Index _elem856; // required
-                    _elem856 = new Index();
-                    _elem856.read(iprot);
-                    struct.success.add(_elem856);
+                    Index _elem880; // required
+                    _elem880 = new Index();
+                    _elem880.read(iprot);
+                    struct.success.add(_elem880);
                   }
                   iprot.readListEnd();
                 }
@@ -91630,9 +91713,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_indexes_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Index _iter857 : struct.success)
+            for (Index _iter881 : struct.success)
             {
-              _iter857.write(oprot);
+              _iter881.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -91679,9 +91762,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_indexes_result
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Index _iter858 : struct.success)
+            for (Index _iter882 : struct.success)
             {
-              _iter858.write(oprot);
+              _iter882.write(oprot);
             }
           }
         }
@@ -91699,14 +91782,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_indexes_result s
         BitSet incoming = iprot.readBitSet(3);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list859 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Index>(_list859.size);
-            for (int _i860 = 0; _i860 < _list859.size; ++_i860)
+            org.apache.thrift.protocol.TList _list883 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Index>(_list883.size);
+            for (int _i884 = 0; _i884 < _list883.size; ++_i884)
             {
-              Index _elem861; // required
-              _elem861 = new Index();
-              _elem861.read(iprot);
-              struct.success.add(_elem861);
+              Index _elem885; // required
+              _elem885 = new Index();
+              _elem885.read(iprot);
+              struct.success.add(_elem885);
             }
           }
           struct.setSuccessIsSet(true);
@@ -92688,13 +92771,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_index_names_res
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list862 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list862.size);
-                  for (int _i863 = 0; _i863 < _list862.size; ++_i863)
+                  org.apache.thrift.protocol.TList _list886 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list886.size);
+                  for (int _i887 = 0; _i887 < _list886.size; ++_i887)
                   {
-                    String _elem864; // required
-                    _elem864 = iprot.readString();
-                    struct.success.add(_elem864);
+                    String _elem888; // required
+                    _elem888 = iprot.readString();
+                    struct.success.add(_elem888);
                   }
                   iprot.readListEnd();
                 }
@@ -92729,9 +92812,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_index_names_re
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter865 : struct.success)
+            for (String _iter889 : struct.success)
             {
-              oprot.writeString(_iter865);
+              oprot.writeString(_iter889);
             }
             oprot.writeListEnd();
           }
@@ -92770,9 +92853,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_index_names_res
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter866 : struct.success)
+            for (String _iter890 : struct.success)
             {
-              oprot.writeString(_iter866);
+              oprot.writeString(_iter890);
             }
           }
         }
@@ -92787,13 +92870,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_index_names_resu
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list867 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list867.size);
-            for (int _i868 = 0; _i868 < _list867.size; ++_i868)
+            org.apache.thrift.protocol.TList _list891 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list891.size);
+            for (int _i892 = 0; _i892 < _list891.size; ++_i892)
             {
-              String _elem869; // required
-              _elem869 = iprot.readString();
-              struct.success.add(_elem869);
+              String _elem893; // required
+              _elem893 = iprot.readString();
+              struct.success.add(_elem893);
             }
           }
           struct.setSuccessIsSet(true);
@@ -108531,13 +108614,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_functions_resul
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list870 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list870.size);
-                  for (int _i871 = 0; _i871 < _list870.size; ++_i871)
+                  org.apache.thrift.protocol.TList _list894 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list894.size);
+                  for (int _i895 = 0; _i895 < _list894.size; ++_i895)
                   {
-                    String _elem872; // required
-                    _elem872 = iprot.readString();
-                    struct.success.add(_elem872);
+                    String _elem896; // required
+                    _elem896 = iprot.readString();
+                    struct.success.add(_elem896);
                   }
                   iprot.readListEnd();
                 }
@@ -108572,9 +108655,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_functions_resu
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter873 : struct.success)
+            for (String _iter897 : struct.success)
             {
-              oprot.writeString(_iter873);
+              oprot.writeString(_iter897);
             }
             oprot.writeListEnd();
           }
@@ -108613,9 +108696,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_functions_resul
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter874 : struct.success)
+            for (String _iter898 : struct.success)
             {
-              oprot.writeString(_iter874);
+              oprot.writeString(_iter898);
             }
           }
         }
@@ -108630,13 +108713,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_functions_result
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list875 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list875.size);
-            for (int _i876 = 0; _i876 < _list875.size; ++_i876)
+            org.apache.thrift.protocol.TList _list899 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list899.size);
+            for (int _i900 = 0; _i900 < _list899.size; ++_i900)
             {
-              String _elem877; // required
-              _elem877 = iprot.readString();
-              struct.success.add(_elem877);
+              String _elem901; // required
+              _elem901 = iprot.readString();
+              struct.success.add(_elem901);
             }
           }
           struct.setSuccessIsSet(true);
@@ -109006,15 +109089,885 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_function_argsStandardSchemeFactory implements SchemeFactory {
-      public get_function_argsStandardScheme getScheme() {
-        return new get_function_argsStandardScheme();
+    private static class get_function_argsStandardSchemeFactory implements SchemeFactory {
+      public get_function_argsStandardScheme getScheme() {
+        return new get_function_argsStandardScheme();
+      }
+    }
+
+    private static class get_function_argsStandardScheme extends StandardScheme<get_function_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // DB_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.dbName = iprot.readString();
+                struct.setDbNameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // FUNC_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.funcName = iprot.readString();
+                struct.setFuncNameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_function_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.dbName != null) {
+          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
+          oprot.writeString(struct.dbName);
+          oprot.writeFieldEnd();
+        }
+        if (struct.funcName != null) {
+          oprot.writeFieldBegin(FUNC_NAME_FIELD_DESC);
+          oprot.writeString(struct.funcName);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_function_argsTupleSchemeFactory implements SchemeFactory {
+      public get_function_argsTupleScheme getScheme() {
+        return new get_function_argsTupleScheme();
+      }
+    }
+
+    private static class get_function_argsTupleScheme extends TupleScheme<get_function_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_function_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetDbName()) {
+          optionals.set(0);
+        }
+        if (struct.isSetFuncName()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetDbName()) {
+          oprot.writeString(struct.dbName);
+        }
+        if (struct.isSetFuncName()) {
+          oprot.writeString(struct.funcName);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_function_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          struct.dbName = iprot.readString();
+          struct.setDbNameIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.funcName = iprot.readString();
+          struct.setFuncNameIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_function_result implements org.apache.thrift.TBase<get_function_result, get_function_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_function_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_function_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_function_resultTupleSchemeFactory());
+    }
+
+    private Function success; // required
+    private MetaException o1; // required
+    private NoSuchObjectException o2; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
+      O1((short)1, "o1"),
+      O2((short)2, "o2");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          case 1: // O1
+            return O1;
+          case 2: // O2
+            return O2;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Function.class)));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData("o2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_function_result.class, metaDataMap);
+    }
+
+    public get_function_result() {
+    }
+
+    public get_function_result(
+      Function success,
+      MetaException o1,
+      NoSuchObjectException o2)
+    {
+      this();
+      this.success = success;
+      this.o1 = o1;
+      this.o2 = o2;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_function_result(get_function_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new Function(other.success);
+      }
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+      if (other.isSetO2()) {
+        this.o2 = new NoSuchObjectException(other.o2);
+      }
+    }
+
+    public get_function_result deepCopy() {
+      return new get_function_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+      this.o1 = null;
+      this.o2 = null;
+    }
+
+    public Function getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(Function success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public NoSuchObjectException getO2() {
+      return this.o2;
+    }
+
+    public void setO2(NoSuchObjectException o2) {
+      this.o2 = o2;
+    }
+
+    public void unsetO2() {
+      this.o2 = null;
+    }
+
+    /** Returns true if field o2 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO2() {
+      return this.o2 != null;
+    }
+
+    public void setO2IsSet(boolean value) {
+      if (!value) {
+        this.o2 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((Function)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      case O2:
+        if (value == null) {
+          unsetO2();
+        } else {
+          setO2((NoSuchObjectException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      case O1:
+        return getO1();
+
+      case O2:
+        return getO2();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case O1:
+        return isSetO1();
+      case O2:
+        return isSetO2();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_function_result)
+        return this.equals((get_function_result)that);
+      return false;
+    }
+
+    public boolean equals(get_function_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      boolean this_present_o2 = true && this.isSetO2();
+      boolean that_present_o2 = true && that.isSetO2();
+      if (this_present_o2 || that_present_o2) {
+        if (!(this_present_o2 && that_present_o2))
+          return false;
+        if (!this.o2.equals(that.o2))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_function_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_function_result typedOther = (get_function_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO2()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, typedOther.o2);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_function_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o2:");
+      if (this.o2 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o2);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_function_resultStandardSchemeFactory implements SchemeFactory {
+      public get_function_resultStandardScheme getScheme() {
+        return new get_function_resultStandardScheme();
+      }
+    }
+
+    private static class get_function_resultStandardScheme extends StandardScheme<get_function_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.success = new Function();
+                struct.success.read(iprot);
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // O2
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o2 = new NoSuchObjectException();
+                struct.o2.read(iprot);
+                struct.setO2IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_function_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          struct.success.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o2 != null) {
+          oprot.writeFieldBegin(O2_FIELD_DESC);
+          struct.o2.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_function_resultTupleSchemeFactory implements SchemeFactory {
+      public get_function_resultTupleScheme getScheme() {
+        return new get_function_resultTupleScheme();
+      }
+    }
+
+    private static class get_function_resultTupleScheme extends TupleScheme<get_function_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_function_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        if (struct.isSetO2()) {
+          optionals.set(2);
+        }
+        oprot.writeBitSet(optionals, 3);
+        if (struct.isSetSuccess()) {
+          struct.success.write(oprot);
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+        if (struct.isSetO2()) {
+          struct.o2.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_function_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(3);
+        if (incoming.get(0)) {
+          struct.success = new Function();
+          struct.success.read(iprot);
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+        if (incoming.get(2)) {
+          struct.o2 = new NoSuchObjectException();
+          struct.o2.read(iprot);
+          struct.setO2IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_all_functions_args implements org.apache.thrift.TBase<get_all_functions_args, get_all_functions_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_functions_args");
+
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_all_functions_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_all_functions_argsTupleSchemeFactory());
+    }
+
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+;
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_functions_args.class, metaDataMap);
+    }
+
+    public get_all_functions_args() {
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_all_functions_args(get_all_functions_args other) {
+    }
+
+    public get_all_functions_args deepCopy() {
+      return new get_all_functions_args(this);
+    }
+
+    @Override
+    public void clear() {
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_all_functions_args)
+        return this.equals((get_all_functions_args)that);
+      return false;
+    }
+
+    public boolean equals(get_all_functions_args that) {
+      if (that == null)
+        return false;
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_all_functions_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_all_functions_args typedOther = (get_all_functions_args)other;
+
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_all_functions_args(");
+      boolean first = true;
+
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_all_functions_argsStandardSchemeFactory implements SchemeFactory {
+      public get_all_functions_argsStandardScheme getScheme() {
+        return new get_all_functions_argsStandardScheme();
       }
     }
 
-    private static class get_function_argsStandardScheme extends StandardScheme<get_function_args> {
+    private static class get_all_functions_argsStandardScheme extends StandardScheme<get_all_functions_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_functions_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -109024,22 +109977,6 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_args s
             break;
           }
           switch (schemeField.id) {
-            case 1: // DB_NAME
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.dbName = iprot.readString();
-                struct.setDbNameIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // FUNC_NAME
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.funcName = iprot.readString();
-                struct.setFuncNameIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -109049,92 +109986,56 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_args s
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_function_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_functions_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.dbName != null) {
-          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
-          oprot.writeString(struct.dbName);
-          oprot.writeFieldEnd();
-        }
-        if (struct.funcName != null) {
-          oprot.writeFieldBegin(FUNC_NAME_FIELD_DESC);
-          oprot.writeString(struct.funcName);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class get_function_argsTupleSchemeFactory implements SchemeFactory {
-      public get_function_argsTupleScheme getScheme() {
-        return new get_function_argsTupleScheme();
+    private static class get_all_functions_argsTupleSchemeFactory implements SchemeFactory {
+      public get_all_functions_argsTupleScheme getScheme() {
+        return new get_all_functions_argsTupleScheme();
       }
     }
 
-    private static class get_function_argsTupleScheme extends TupleScheme<get_function_args> {
+    private static class get_all_functions_argsTupleScheme extends TupleScheme<get_all_functions_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_function_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_functions_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetDbName()) {
-          optionals.set(0);
-        }
-        if (struct.isSetFuncName()) {
-          optionals.set(1);
-        }
-        oprot.writeBitSet(optionals, 2);
-        if (struct.isSetDbName()) {
-          oprot.writeString(struct.dbName);
-        }
-        if (struct.isSetFuncName()) {
-          oprot.writeString(struct.funcName);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_function_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_functions_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(2);
-        if (incoming.get(0)) {
-          struct.dbName = iprot.readString();
-          struct.setDbNameIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.funcName = iprot.readString();
-          struct.setFuncNameIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class get_function_result implements org.apache.thrift.TBase<get_function_result, get_function_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_function_result");
+  public static class get_all_functions_result implements org.apache.thrift.TBase<get_all_functions_result, get_all_functions_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_functions_result");
 
     private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
     private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_function_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_function_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_all_functions_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_all_functions_resultTupleSchemeFactory());
     }
 
-    private Function success; // required
+    private GetAllFunctionsResponse success; // required
     private MetaException o1; // required
-    private NoSuchObjectException o2; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
       SUCCESS((short)0, "success"),
-      O1((short)1, "o1"),
-      O2((short)2, "o2");
+      O1((short)1, "o1");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -109153,8 +110054,6 @@ public static _Fields findByThriftId(int fieldId) {
             return SUCCESS;
           case 1: // O1
             return O1;
-          case 2: // O2
-            return O2;
           default:
             return null;
         }
@@ -109199,60 +110098,52 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Function.class)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetAllFunctionsResponse.class)));
       tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData("o2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_function_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_functions_result.class, metaDataMap);
     }
 
-    public get_function_result() {
+    public get_all_functions_result() {
     }
 
-    public get_function_result(
-      Function success,
-      MetaException o1,
-      NoSuchObjectException o2)
+    public get_all_functions_result(
+      GetAllFunctionsResponse success,
+      MetaException o1)
     {
       this();
       this.success = success;
       this.o1 = o1;
-      this.o2 = o2;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_function_result(get_function_result other) {
+    public get_all_functions_result(get_all_functions_result other) {
       if (other.isSetSuccess()) {
-        this.success = new Function(other.success);
+        this.success = new GetAllFunctionsResponse(other.success);
       }
       if (other.isSetO1()) {
         this.o1 = new MetaException(other.o1);
       }
-      if (other.isSetO2()) {
-        this.o2 = new NoSuchObjectException(other.o2);
-      }
     }
 
-    public get_function_result deepCopy() {
-      return new get_function_result(this);
+    public get_all_functions_result deepCopy() {
+      return new get_all_functions_result(this);
     }
 
     @Override
     public void clear() {
       this.success = null;
       this.o1 = null;
-      this.o2 = null;
     }
 
-    public Function getSuccess() {
+    public GetAllFunctionsResponse getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(Function success) {
+    public void setSuccess(GetAllFunctionsResponse success) {
       this.success = success;
     }
 
@@ -109294,36 +110185,13 @@ public void setO1IsSet(boolean value) {
       }
     }
 
-    public NoSuchObjectException getO2() {
-      return this.o2;
-    }
-
-    public void setO2(NoSuchObjectException o2) {
-      this.o2 = o2;
-    }
-
-    public void unsetO2() {
-      this.o2 = null;
-    }
-
-    /** Returns true if field o2 is set (has been assigned a value) and false otherwise */
-    public boolean isSetO2() {
-      return this.o2 != null;
-    }
-
-    public void setO2IsSet(boolean value) {
-      if (!value) {
-        this.o2 = null;
-      }
-    }
-
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case SUCCESS:
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Function)value);
+          setSuccess((GetAllFunctionsResponse)value);
         }
         break;
 
@@ -109335,14 +110203,6 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case O2:
-        if (value == null) {
-          unsetO2();
-        } else {
-          setO2((NoSuchObjectException)value);
-        }
-        break;
-
       }
     }
 
@@ -109354,9 +110214,6 @@ public Object getFieldValue(_Fields field) {
       case O1:
         return getO1();
 
-      case O2:
-        return getO2();
-
       }
       throw new IllegalStateException();
     }
@@ -109372,8 +110229,6 @@ public boolean isSet(_Fields field) {
         return isSetSuccess();
       case O1:
         return isSetO1();
-      case O2:
-        return isSetO2();
       }
       throw new IllegalStateException();
     }
@@ -109382,12 +110237,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_function_result)
-        return this.equals((get_function_result)that);
+      if (that instanceof get_all_functions_result)
+        return this.equals((get_all_functions_result)that);
       return false;
     }
 
-    public boolean equals(get_function_result that) {
+    public boolean equals(get_all_functions_result that) {
       if (that == null)
         return false;
 
@@ -109409,15 +110264,6 @@ public boolean equals(get_function_result that) {
           return false;
       }
 
-      boolean this_present_o2 = true && this.isSetO2();
-      boolean that_present_o2 = true && that.isSetO2();
-      if (this_present_o2 || that_present_o2) {
-        if (!(this_present_o2 && that_present_o2))
-          return false;
-        if (!this.o2.equals(that.o2))
-          return false;
-      }
-
       return true;
     }
 
@@ -109435,21 +110281,16 @@ public int hashCode() {
       if (present_o1)
         builder.append(o1);
 
-      boolean present_o2 = true && (isSetO2());
-      builder.append(present_o2);
-      if (present_o2)
-        builder.append(o2);
-
       return builder.toHashCode();
     }
 
-    public int compareTo(get_function_result other) {
+    public int compareTo(get_all_functions_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_function_result typedOther = (get_function_result)other;
+      get_all_functions_result typedOther = (get_all_functions_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -109471,16 +110312,6 @@ public int compareTo(get_function_result other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetO2()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, typedOther.o2);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -109498,7 +110329,7 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_function_result(");
+      StringBuilder sb = new StringBuilder("get_all_functions_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -109516,14 +110347,6 @@ public String toString() {
         sb.append(this.o1);
       }
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("o2:");
-      if (this.o2 == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.o2);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -109552,15 +110375,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_function_resultStandardSchemeFactory implements SchemeFactory {
-      public get_function_resultStandardScheme getScheme() {
-        return new get_function_resultStandardScheme();
+    private static class get_all_functions_resultStandardSchemeFactory implements SchemeFactory {
+      public get_all_functions_resultStandardScheme getScheme() {
+        return new get_all_functions_resultStandardScheme();
       }
     }
 
-    private static class get_function_resultStandardScheme extends StandardScheme<get_function_result> {
+    private static class get_all_functions_resultStandardScheme extends StandardScheme<get_all_functions_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_functions_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -109572,7 +110395,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_result
           switch (schemeField.id) {
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new Function();
+                struct.success = new GetAllFunctionsResponse();
                 struct.success.read(iprot);
                 struct.setSuccessIsSet(true);
               } else { 
@@ -109588,15 +110411,6 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_result
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // O2
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.o2 = new NoSuchObjectException();
-                struct.o2.read(iprot);
-                struct.setO2IsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -109606,7 +110420,7 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_function_result
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_function_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_functions_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -109620,27 +110434,22 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_function_resul
           struct.o1.write(oprot);
           oprot.writeFieldEnd();
         }
-        if (struct.o2 != null) {
-          oprot.writeFieldBegin(O2_FIELD_DESC);
-          struct.o2.write(oprot);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class get_function_resultTupleSchemeFactory implements SchemeFactory {
-      public get_function_resultTupleScheme getScheme() {
-        return new get_function_resultTupleScheme();
+    private static class get_all_functions_resultTupleSchemeFactory implements SchemeFactory {
+      public get_all_functions_resultTupleScheme getScheme() {
+        return new get_all_functions_resultTupleScheme();
       }
     }
 
-    private static class get_function_resultTupleScheme extends TupleScheme<get_function_result> {
+    private static class get_all_functions_resultTupleScheme extends TupleScheme<get_all_functions_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_function_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_functions_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -109649,27 +110458,21 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_function_result
         if (struct.isSetO1()) {
           optionals.set(1);
         }
-        if (struct.isSetO2()) {
-          optionals.set(2);
-        }
-        oprot.writeBitSet(optionals, 3);
+        oprot.writeBitSet(optionals, 2);
         if (struct.isSetSuccess()) {
           struct.success.write(oprot);
         }
         if (struct.isSetO1()) {
           struct.o1.write(oprot);
         }
-        if (struct.isSetO2()) {
-          struct.o2.write(oprot);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_function_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_functions_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(3);
+        BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          struct.success = new Function();
+          struct.success = new GetAllFunctionsResponse();
           struct.success.read(iprot);
           struct.setSuccessIsSet(true);
         }
@@ -109678,11 +110481,6 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_function_result
           struct.o1.read(iprot);
           struct.setO1IsSet(true);
         }
-        if (incoming.get(2)) {
-          struct.o2 = new NoSuchObjectException();
-          struct.o2.read(iprot);
-          struct.setO2IsSet(true);
-        }
       }
     }
 
@@ -111979,13 +112777,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_role_names_resu
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list878 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list878.size);
-                  for (int _i879 = 0; _i879 < _list878.size; ++_i879)
+                  org.apache.thrift.protocol.TList _list902 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list902.size);
+                  for (int _i903 = 0; _i903 < _list902.size; ++_i903)
                   {
-                    String _elem880; // required
-                    _elem880 = iprot.readString();
-                    struct.success.add(_elem880);
+                    String _elem904; // required
+                    _elem904 = iprot.readString();
+                    struct.success.add(_elem904);
                   }
                   iprot.readListEnd();
                 }
@@ -112020,9 +112818,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_role_names_res
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter881 : struct.success)
+            for (String _iter905 : struct.success)
             {
-              oprot.writeString(_iter881);
+              oprot.writeString(_iter905);
             }
             oprot.writeListEnd();
           }
@@ -112061,9 +112859,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_role_names_resu
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter882 : struct.success)
+            for (String _iter906 : struct.success)
             {
-              oprot.writeString(_iter882);
+              oprot.writeString(_iter906);
             }
           }
         }
@@ -112078,13 +112876,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_role_names_resul
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list883 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list883.size);
-            for (int _i884 = 0; _i884 < _list883.size; ++_i884)
+            org.apache.thrift.protocol.TList _list907 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list907.size);
+            for (int _i908 = 0; _i908 < _list907.size; ++_i908)
             {
-              String _elem885; // required
-              _elem885 = iprot.readString();
-              struct.success.add(_elem885);
+              String _elem909; // required
+              _elem909 = iprot.readString();
+              struct.success.add(_elem909);
             }
           }
           struct.setSuccessIsSet(true);
@@ -115375,14 +116173,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, list_roles_result s
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list886 = iprot.readListBegin();
-                  struct.success = new ArrayList<Role>(_list886.size);
-                  for (int _i887 = 0; _i887 < _list886.size; ++_i887)
+                  org.apache.thrift.protocol.TList _list910 = iprot.readListBegin();
+                  struct.success = new ArrayList<Role>(_list910.size);
+                  for (int _i911 = 0; _i911 < _list910.size; ++_i911)
                   {
-                    Role _elem888; // required
-                    _elem888 = new Role();
-                    _elem888.read(iprot);
-                    struct.success.add(_elem888);
+                    Role _elem912; // required
+                    _elem912 = new Role();
+                    _elem912.read(iprot);
+                    struct.success.add(_elem912);
                   }
                   iprot.readListEnd();
                 }
@@ -115417,9 +116215,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, list_roles_result
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Role _iter889 : struct.success)
+            for (Role _iter913 : struct.success)
             {
-              _iter889.write(oprot);
+              _iter913.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -115458,9 +116256,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, list_roles_result s
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (Role _iter890 : struct.success)
+            for (Role _iter914 : struct.success)
             {
-              _iter890.write(oprot);
+              _iter914.write(oprot);
             }
           }
         }
@@ -115475,14 +116273,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, list_roles_result st
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list891 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<Role>(_list891.size);
-            for (int _i892 = 0; _i892 < _list891.size; ++_i892)
+            org.apache.thrift.protocol.TList _list915 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<Role>(_list915.size);
+            for (int _i916 = 0; _i916 < _list915.size; ++_i916)
             {
-              Role _elem893; // required
-              _elem893 = new Role();
-              _elem893.read(iprot);
-              struct.success.add(_elem893);
+              Role _elem917; // required
+              _elem917 = new Role();
+              _elem917.read(iprot);
+              struct.success.add(_elem917);
             }
           }
           struct.setSuccessIsSet(true);
@@ -118490,13 +119288,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_privilege_set_a
             case 3: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list894 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list894.size);
-                  for (int _i895 = 0; _i895 < _list894.size; ++_i895)
+                  org.apache.thrift.protocol.TList _list918 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list918.size);
+                  for (int _i919 = 0; _i919 < _list918.size; ++_i919)
                   {
-                    String _elem896; // required
-                    _elem896 = iprot.readString();
-                    struct.group_names.add(_elem896);
+                    String _elem920; // required
+                    _elem920 = iprot.readString();
+                    struct.group_names.add(_elem920);
                   }
                   iprot.readListEnd();
                 }
@@ -118532,9 +119330,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_privilege_set_
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter897 : struct.group_names)
+            for (String _iter921 : struct.group_names)
             {
-              oprot.writeString(_iter897);
+              oprot.writeString(_iter921);
             }
             oprot.writeListEnd();
           }
@@ -118577,9 +119375,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, get_privilege_set_a
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter898 : struct.group_names)
+            for (String _iter922 : struct.group_names)
             {
-              oprot.writeString(_iter898);
+              oprot.writeString(_iter922);
             }
           }
         }
@@ -118600,13 +119398,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_privilege_set_ar
         }
         if (incoming.get(2)) {
           {
-            org.apache.thrift.protocol.TList _list899 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list899.size);
-            for (int _i900 = 0; _i900 < _list899.size; ++_i900)
+            org.apache.thrift.protocol.TList _list923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list923.size);
+            for (int _i924 = 0; _i924 < _list923.size; ++_i924)
             {
-              String _elem901; // required
-              _elem901 = iprot.readString();
-              struct.group_names.add(_elem901);
+              String _elem925; // required
+              _elem925 = iprot.readString();
+              struct.group_names.add(_elem925);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -120064,14 +120862,14 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, list_privileges_res
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list902 = iprot.readListBegin();
-                  struct.success = new ArrayList<HiveObjectPrivilege>(_list902.size);
-                  for (int _i903 = 0; _i903 < _list902.size; ++_i903)
+                  org.apache.thrift.protocol.TList _list926 = iprot.readListBegin();
+                  struct.success = new ArrayList<HiveObjectPrivilege>(_list926.size);
+                  for (int _i927 = 0; _i927 < _list926.size; ++_i927)
                   {
-                    HiveObjectPrivilege _elem904; // required
-                    _elem904 = new HiveObjectPrivilege();
-                    _elem904.read(iprot);
-                    struct.success.add(_elem904);
+                    HiveObjectPrivilege _elem928; // required
+                    _elem928 = new HiveObjectPrivilege();
+                    _elem928.read(iprot);
+                    struct.success.add(_elem928);
                   }
                   iprot.readListEnd();
                 }
@@ -120106,9 +120904,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, list_privileges_re
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (HiveObjectPrivilege _iter905 : struct.success)
+            for (HiveObjectPrivilege _iter929 : struct.success)
             {
-              _iter905.write(oprot);
+              _iter929.write(oprot);
             }
             oprot.writeListEnd();
           }
@@ -120147,9 +120945,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, list_privileges_res
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (HiveObjectPrivilege _iter906 : struct.success)
+            for (HiveObjectPrivilege _iter930 : struct.success)
             {
-              _iter906.write(oprot);
+              _iter930.write(oprot);
             }
           }
         }
@@ -120164,14 +120962,14 @@ public void read(org.apache.thrift.protocol.TProtocol prot, list_privileges_resu
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list907 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<HiveObjectPrivilege>(_list907.size);
-            for (int _i908 = 0; _i908 < _list907.size; ++_i908)
+            org.apache.thrift.protocol.TList _list931 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<HiveObjectPrivilege>(_list931.size);
+            for (int _i932 = 0; _i932 < _list931.size; ++_i932)
             {
-              HiveObjectPrivilege _elem909; // required
-              _elem909 = new HiveObjectPrivilege();
-              _elem909.read(iprot);
-              struct.success.add(_elem909);
+              HiveObjectPrivilege _elem933; // required
+              _elem933 = new HiveObjectPrivilege();
+              _elem933.read(iprot);
+              struct.success.add(_elem933);
             }
           }
           struct.setSuccessIsSet(true);
@@ -123076,13 +123874,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_args struct
             case 2: // GROUP_NAMES
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list910 = iprot.readListBegin();
-                  struct.group_names = new ArrayList<String>(_list910.size);
-                  for (int _i911 = 0; _i911 < _list910.size; ++_i911)
+                  org.apache.thrift.protocol.TList _list934 = iprot.readListBegin();
+                  struct.group_names = new ArrayList<String>(_list934.size);
+                  for (int _i935 = 0; _i935 < _list934.size; ++_i935)
                   {
-                    String _elem912; // required
-                    _elem912 = iprot.readString();
-                    struct.group_names.add(_elem912);
+                    String _elem936; // required
+                    _elem936 = iprot.readString();
+                    struct.group_names.add(_elem936);
                   }
                   iprot.readListEnd();
                 }
@@ -123113,9 +123911,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_args struc
           oprot.writeFieldBegin(GROUP_NAMES_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.group_names.size()));
-            for (String _iter913 : struct.group_names)
+            for (String _iter937 : struct.group_names)
             {
-              oprot.writeString(_iter913);
+              oprot.writeString(_iter937);
             }
             oprot.writeListEnd();
           }
@@ -123152,9 +123950,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_args struct
         if (struct.isSetGroup_names()) {
           {
             oprot.writeI32(struct.group_names.size());
-            for (String _iter914 : struct.group_names)
+            for (String _iter938 : struct.group_names)
             {
-              oprot.writeString(_iter914);
+              oprot.writeString(_iter938);
             }
           }
         }
@@ -123170,13 +123968,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_args struct)
         }
         if (incoming.get(1)) {
           {
-            org.apache.thrift.protocol.TList _list915 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.group_names = new ArrayList<String>(_list915.size);
-            for (int _i916 = 0; _i916 < _list915.size; ++_i916)
+            org.apache.thrift.protocol.TList _list939 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.group_names = new ArrayList<String>(_list939.size);
+            for (int _i940 = 0; _i940 < _list939.size; ++_i940)
             {
-              String _elem917; // required
-              _elem917 = iprot.readString();
-              struct.group_names.add(_elem917);
+              String _elem941; // required
+              _elem941 = iprot.readString();
+              struct.group_names.add(_elem941);
             }
           }
           struct.setGroup_namesIsSet(true);
@@ -123582,13 +124380,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result stru
             case 0: // SUCCESS
               if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                 {
-                  org.apache.thrift.protocol.TList _list918 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list918.size);
-                  for (int _i919 = 0; _i919 < _list918.size; ++_i919)
+                  org.apache.thrift.protocol.TList _list942 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list942.size);
+                  for (int _i943 = 0; _i943 < _list942.size; ++_i943)
                   {
-                    String _elem920; // required
-                    _elem920 = iprot.readString();
-                    struct.success.add(_elem920);
+                    String _elem944; // required
+                    _elem944 = iprot.readString();
+                    struct.success.add(_elem944);
                   }
                   iprot.readListEnd();
                 }
@@ -123623,9 +124421,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_result str
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter921 : struct.success)
+            for (String _iter945 : struct.success)
             {
-              oprot.writeString(_iter921);
+              oprot.writeString(_iter945);
             }
             oprot.writeListEnd();
           }
@@ -123664,9 +124462,9 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result stru
         if (struct.isSetSuccess()) {
           {
             oprot.writeI32(struct.success.size());
-            for (String _iter922 : struct.success)
+            for (String _iter946 : struct.success)
             {
-              oprot.writeString(_iter922);
+              oprot.writeString(_iter946);
             }
           }
         }
@@ -123681,13 +124479,13 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struc
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
           {
-            org.apache.thrift.protocol.TList _list923 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list923.size);
-            for (int _i924 = 0; _i924 < _list923.size; ++_i924)
+            org.apache.thrift.protocol.TList _list947 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list947.size);
+            for (int _i948 = 0; _i948 < _list947.size; ++_i948)
             {
-              String _elem925; // required
-              _elem925 = iprot.readString();
-              struct.success.add(_elem925);
+              String _elem949; // required
+              _elem949 = iprot.readString();
+              struct.success.add(_elem949);
             }
           }
           struct.setSuccessIsSet(true);
diff --git a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
index 2d1f935..a458bce 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
@@ -102,6 +102,7 @@ interface ThriftHiveMetastoreIf extends \FacebookServiceIf {
   public function alter_function($dbName, $funcName, \metastore\Function $newFunc);
   public function get_functions($dbName, $pattern);
   public function get_function($dbName, $funcName);
+  public function get_all_functions();
   public function create_role(\metastore\Role $role);
   public function drop_role($role_name);
   public function get_role_names();
@@ -5219,6 +5220,59 @@ class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metas
     throw new \Exception("get_function failed: unknown result");
   }
 
+  public function get_all_functions()
+  {
+    $this->send_get_all_functions();
+    return $this->recv_get_all_functions();
+  }
+
+  public function send_get_all_functions()
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_all_functions_args();
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_all_functions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_all_functions', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_all_functions()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_all_functions_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_all_functions_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    if ($result->o1 !== null) {
+      throw $result->o1;
+    }
+    throw new \Exception("get_all_functions failed: unknown result");
+  }
+
   public function create_role(\metastore\Role $role)
   {
     $this->send_create_role($role);
@@ -8069,14 +8123,14 @@ class ThriftHiveMetastore_get_databases_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size444 = 0;
-            $_etype447 = 0;
-            $xfer += $input->readListBegin($_etype447, $_size444);
-            for ($_i448 = 0; $_i448 < $_size444; ++$_i448)
+            $_size465 = 0;
+            $_etype468 = 0;
+            $xfer += $input->readListBegin($_etype468, $_size465);
+            for ($_i469 = 0; $_i469 < $_size465; ++$_i469)
             {
-              $elem449 = null;
-              $xfer += $input->readString($elem449);
-              $this->success []= $elem449;
+              $elem470 = null;
+              $xfer += $input->readString($elem470);
+              $this->success []= $elem470;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -8112,9 +8166,9 @@ class ThriftHiveMetastore_get_databases_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter450)
+          foreach ($this->success as $iter471)
           {
-            $xfer += $output->writeString($iter450);
+            $xfer += $output->writeString($iter471);
           }
         }
         $output->writeListEnd();
@@ -8239,14 +8293,14 @@ class ThriftHiveMetastore_get_all_databases_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size451 = 0;
-            $_etype454 = 0;
-            $xfer += $input->readListBegin($_etype454, $_size451);
-            for ($_i455 = 0; $_i455 < $_size451; ++$_i455)
+            $_size472 = 0;
+            $_etype475 = 0;
+            $xfer += $input->readListBegin($_etype475, $_size472);
+            for ($_i476 = 0; $_i476 < $_size472; ++$_i476)
             {
-              $elem456 = null;
-              $xfer += $input->readString($elem456);
-              $this->success []= $elem456;
+              $elem477 = null;
+              $xfer += $input->readString($elem477);
+              $this->success []= $elem477;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -8282,9 +8336,9 @@ class ThriftHiveMetastore_get_all_databases_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter457)
+          foreach ($this->success as $iter478)
           {
-            $xfer += $output->writeString($iter457);
+            $xfer += $output->writeString($iter478);
           }
         }
         $output->writeListEnd();
@@ -9225,18 +9279,18 @@ class ThriftHiveMetastore_get_type_all_result {
         case 0:
           if ($ftype == TType::MAP) {
             $this->success = array();
-            $_size458 = 0;
-            $_ktype459 = 0;
-            $_vtype460 = 0;
-            $xfer += $input->readMapBegin($_ktype459, $_vtype460, $_size458);
-            for ($_i462 = 0; $_i462 < $_size458; ++$_i462)
+            $_size479 = 0;
+            $_ktype480 = 0;
+            $_vtype481 = 0;
+            $xfer += $input->readMapBegin($_ktype480, $_vtype481, $_size479);
+            for ($_i483 = 0; $_i483 < $_size479; ++$_i483)
             {
-              $key463 = '';
-              $val464 = new \metastore\Type();
-              $xfer += $input->readString($key463);
-              $val464 = new \metastore\Type();
-              $xfer += $val464->read($input);
-              $this->success[$key463] = $val464;
+              $key484 = '';
+              $val485 = new \metastore\Type();
+              $xfer += $input->readString($key484);
+              $val485 = new \metastore\Type();
+              $xfer += $val485->read($input);
+              $this->success[$key484] = $val485;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -9272,10 +9326,10 @@ class ThriftHiveMetastore_get_type_all_result {
       {
         $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $kiter465 => $viter466)
+          foreach ($this->success as $kiter486 => $viter487)
           {
-            $xfer += $output->writeString($kiter465);
-            $xfer += $viter466->write($output);
+            $xfer += $output->writeString($kiter486);
+            $xfer += $viter487->write($output);
           }
         }
         $output->writeMapEnd();
@@ -9461,15 +9515,15 @@ class ThriftHiveMetastore_get_fields_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size467 = 0;
-            $_etype470 = 0;
-            $xfer += $input->readListBegin($_etype470, $_size467);
-            for ($_i471 = 0; $_i471 < $_size467; ++$_i471)
+            $_size488 = 0;
+            $_etype491 = 0;
+            $xfer += $input->readListBegin($_etype491, $_size488);
+            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
             {
-              $elem472 = null;
-              $elem472 = new \metastore\FieldSchema();
-              $xfer += $elem472->read($input);
-              $this->success []= $elem472;
+              $elem493 = null;
+              $elem493 = new \metastore\FieldSchema();
+              $xfer += $elem493->read($input);
+              $this->success []= $elem493;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -9521,9 +9575,9 @@ class ThriftHiveMetastore_get_fields_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter473)
+          foreach ($this->success as $iter494)
           {
-            $xfer += $iter473->write($output);
+            $xfer += $iter494->write($output);
           }
         }
         $output->writeListEnd();
@@ -9719,15 +9773,15 @@ class ThriftHiveMetastore_get_schema_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size474 = 0;
-            $_etype477 = 0;
-            $xfer += $input->readListBegin($_etype477, $_size474);
-            for ($_i478 = 0; $_i478 < $_size474; ++$_i478)
+            $_size495 = 0;
+            $_etype498 = 0;
+            $xfer += $input->readListBegin($_etype498, $_size495);
+            for ($_i499 = 0; $_i499 < $_size495; ++$_i499)
             {
-              $elem479 = null;
-              $elem479 = new \metastore\FieldSchema();
-              $xfer += $elem479->read($input);
-              $this->success []= $elem479;
+              $elem500 = null;
+              $elem500 = new \metastore\FieldSchema();
+              $xfer += $elem500->read($input);
+              $this->success []= $elem500;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -9779,9 +9833,9 @@ class ThriftHiveMetastore_get_schema_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter480)
+          foreach ($this->success as $iter501)
           {
-            $xfer += $iter480->write($output);
+            $xfer += $iter501->write($output);
           }
         }
         $output->writeListEnd();
@@ -10858,14 +10912,14 @@ class ThriftHiveMetastore_get_tables_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size481 = 0;
-            $_etype484 = 0;
-            $xfer += $input->readListBegin($_etype484, $_size481);
-            for ($_i485 = 0; $_i485 < $_size481; ++$_i485)
+            $_size502 = 0;
+            $_etype505 = 0;
+            $xfer += $input->readListBegin($_etype505, $_size502);
+            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
             {
-              $elem486 = null;
-              $xfer += $input->readString($elem486);
-              $this->success []= $elem486;
+              $elem507 = null;
+              $xfer += $input->readString($elem507);
+              $this->success []= $elem507;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -10901,9 +10955,9 @@ class ThriftHiveMetastore_get_tables_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter487)
+          foreach ($this->success as $iter508)
           {
-            $xfer += $output->writeString($iter487);
+            $xfer += $output->writeString($iter508);
           }
         }
         $output->writeListEnd();
@@ -11050,14 +11104,14 @@ class ThriftHiveMetastore_get_all_tables_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size488 = 0;
-            $_etype491 = 0;
-            $xfer += $input->readListBegin($_etype491, $_size488);
-            for ($_i492 = 0; $_i492 < $_size488; ++$_i492)
+            $_size509 = 0;
+            $_etype512 = 0;
+            $xfer += $input->readListBegin($_etype512, $_size509);
+            for ($_i513 = 0; $_i513 < $_size509; ++$_i513)
             {
-              $elem493 = null;
-              $xfer += $input->readString($elem493);
-              $this->success []= $elem493;
+              $elem514 = null;
+              $xfer += $input->readString($elem514);
+              $this->success []= $elem514;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11093,9 +11147,9 @@ class ThriftHiveMetastore_get_all_tables_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter494)
+          foreach ($this->success as $iter515)
           {
-            $xfer += $output->writeString($iter494);
+            $xfer += $output->writeString($iter515);
           }
         }
         $output->writeListEnd();
@@ -11389,14 +11443,14 @@ class ThriftHiveMetastore_get_table_objects_by_name_args {
         case 2:
           if ($ftype == TType::LST) {
             $this->tbl_names = array();
-            $_size495 = 0;
-            $_etype498 = 0;
-            $xfer += $input->readListBegin($_etype498, $_size495);
-            for ($_i499 = 0; $_i499 < $_size495; ++$_i499)
+            $_size516 = 0;
+            $_etype519 = 0;
+            $xfer += $input->readListBegin($_etype519, $_size516);
+            for ($_i520 = 0; $_i520 < $_size516; ++$_i520)
             {
-              $elem500 = null;
-              $xfer += $input->readString($elem500);
-              $this->tbl_names []= $elem500;
+              $elem521 = null;
+              $xfer += $input->readString($elem521);
+              $this->tbl_names []= $elem521;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11429,9 +11483,9 @@ class ThriftHiveMetastore_get_table_objects_by_name_args {
       {
         $output->writeListBegin(TType::STRING, count($this->tbl_names));
         {
-          foreach ($this->tbl_names as $iter501)
+          foreach ($this->tbl_names as $iter522)
           {
-            $xfer += $output->writeString($iter501);
+            $xfer += $output->writeString($iter522);
           }
         }
         $output->writeListEnd();
@@ -11520,15 +11574,15 @@ class ThriftHiveMetastore_get_table_objects_by_name_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size502 = 0;
-            $_etype505 = 0;
-            $xfer += $input->readListBegin($_etype505, $_size502);
-            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
+            $_size523 = 0;
+            $_etype526 = 0;
+            $xfer += $input->readListBegin($_etype526, $_size523);
+            for ($_i527 = 0; $_i527 < $_size523; ++$_i527)
             {
-              $elem507 = null;
-              $elem507 = new \metastore\Table();
-              $xfer += $elem507->read($input);
-              $this->success []= $elem507;
+              $elem528 = null;
+              $elem528 = new \metastore\Table();
+              $xfer += $elem528->read($input);
+              $this->success []= $elem528;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11580,9 +11634,9 @@ class ThriftHiveMetastore_get_table_objects_by_name_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter508)
+          foreach ($this->success as $iter529)
           {
-            $xfer += $iter508->write($output);
+            $xfer += $iter529->write($output);
           }
         }
         $output->writeListEnd();
@@ -11797,14 +11851,14 @@ class ThriftHiveMetastore_get_table_names_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size509 = 0;
-            $_etype512 = 0;
-            $xfer += $input->readListBegin($_etype512, $_size509);
-            for ($_i513 = 0; $_i513 < $_size509; ++$_i513)
+            $_size530 = 0;
+            $_etype533 = 0;
+            $xfer += $input->readListBegin($_etype533, $_size530);
+            for ($_i534 = 0; $_i534 < $_size530; ++$_i534)
             {
-              $elem514 = null;
-              $xfer += $input->readString($elem514);
-              $this->success []= $elem514;
+              $elem535 = null;
+              $xfer += $input->readString($elem535);
+              $this->success []= $elem535;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -11856,9 +11910,9 @@ class ThriftHiveMetastore_get_table_names_by_filter_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter515)
+          foreach ($this->success as $iter536)
           {
-            $xfer += $output->writeString($iter515);
+            $xfer += $output->writeString($iter536);
           }
         }
         $output->writeListEnd();
@@ -13084,15 +13138,15 @@ class ThriftHiveMetastore_add_partitions_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size516 = 0;
-            $_etype519 = 0;
-            $xfer += $input->readListBegin($_etype519, $_size516);
-            for ($_i520 = 0; $_i520 < $_size516; ++$_i520)
+            $_size537 = 0;
+            $_etype540 = 0;
+            $xfer += $input->readListBegin($_etype540, $_size537);
+            for ($_i541 = 0; $_i541 < $_size537; ++$_i541)
             {
-              $elem521 = null;
-              $elem521 = new \metastore\Partition();
-              $xfer += $elem521->read($input);
-              $this->new_parts []= $elem521;
+              $elem542 = null;
+              $elem542 = new \metastore\Partition();
+              $xfer += $elem542->read($input);
+              $this->new_parts []= $elem542;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -13120,9 +13174,9 @@ class ThriftHiveMetastore_add_partitions_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter522)
+          foreach ($this->new_parts as $iter543)
           {
-            $xfer += $iter522->write($output);
+            $xfer += $iter543->write($output);
           }
         }
         $output->writeListEnd();
@@ -13322,15 +13376,15 @@ class ThriftHiveMetastore_add_partitions_pspec_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size523 = 0;
-            $_etype526 = 0;
-            $xfer += $input->readListBegin($_etype526, $_size523);
-            for ($_i527 = 0; $_i527 < $_size523; ++$_i527)
+            $_size544 = 0;
+            $_etype547 = 0;
+            $xfer += $input->readListBegin($_etype547, $_size544);
+            for ($_i548 = 0; $_i548 < $_size544; ++$_i548)
             {
-              $elem528 = null;
-              $elem528 = new \metastore\PartitionSpec();
-              $xfer += $elem528->read($input);
-              $this->new_parts []= $elem528;
+              $elem549 = null;
+              $elem549 = new \metastore\PartitionSpec();
+              $xfer += $elem549->read($input);
+              $this->new_parts []= $elem549;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -13358,9 +13412,9 @@ class ThriftHiveMetastore_add_partitions_pspec_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter529)
+          foreach ($this->new_parts as $iter550)
           {
-            $xfer += $iter529->write($output);
+            $xfer += $iter550->write($output);
           }
         }
         $output->writeListEnd();
@@ -13589,14 +13643,14 @@ class ThriftHiveMetastore_append_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size530 = 0;
-            $_etype533 = 0;
-            $xfer += $input->readListBegin($_etype533, $_size530);
-            for ($_i534 = 0; $_i534 < $_size530; ++$_i534)
+            $_size551 = 0;
+            $_etype554 = 0;
+            $xfer += $input->readListBegin($_etype554, $_size551);
+            for ($_i555 = 0; $_i555 < $_size551; ++$_i555)
             {
-              $elem535 = null;
-              $xfer += $input->readString($elem535);
-              $this->part_vals []= $elem535;
+              $elem556 = null;
+              $xfer += $input->readString($elem556);
+              $this->part_vals []= $elem556;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -13634,9 +13688,9 @@ class ThriftHiveMetastore_append_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter536)
+          foreach ($this->part_vals as $iter557)
           {
-            $xfer += $output->writeString($iter536);
+            $xfer += $output->writeString($iter557);
           }
         }
         $output->writeListEnd();
@@ -14099,14 +14153,14 @@ class ThriftHiveMetastore_append_partition_with_environment_context_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size537 = 0;
-            $_etype540 = 0;
-            $xfer += $input->readListBegin($_etype540, $_size537);
-            for ($_i541 = 0; $_i541 < $_size537; ++$_i541)
+            $_size558 = 0;
+            $_etype561 = 0;
+            $xfer += $input->readListBegin($_etype561, $_size558);
+            for ($_i562 = 0; $_i562 < $_size558; ++$_i562)
             {
-              $elem542 = null;
-              $xfer += $input->readString($elem542);
-              $this->part_vals []= $elem542;
+              $elem563 = null;
+              $xfer += $input->readString($elem563);
+              $this->part_vals []= $elem563;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14152,9 +14206,9 @@ class ThriftHiveMetastore_append_partition_with_environment_context_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter543)
+          foreach ($this->part_vals as $iter564)
           {
-            $xfer += $output->writeString($iter543);
+            $xfer += $output->writeString($iter564);
           }
         }
         $output->writeListEnd();
@@ -14939,14 +14993,14 @@ class ThriftHiveMetastore_drop_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size544 = 0;
-            $_etype547 = 0;
-            $xfer += $input->readListBegin($_etype547, $_size544);
-            for ($_i548 = 0; $_i548 < $_size544; ++$_i548)
+            $_size565 = 0;
+            $_etype568 = 0;
+            $xfer += $input->readListBegin($_etype568, $_size565);
+            for ($_i569 = 0; $_i569 < $_size565; ++$_i569)
             {
-              $elem549 = null;
-              $xfer += $input->readString($elem549);
-              $this->part_vals []= $elem549;
+              $elem570 = null;
+              $xfer += $input->readString($elem570);
+              $this->part_vals []= $elem570;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -14991,9 +15045,9 @@ class ThriftHiveMetastore_drop_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter550)
+          foreach ($this->part_vals as $iter571)
           {
-            $xfer += $output->writeString($iter550);
+            $xfer += $output->writeString($iter571);
           }
         }
         $output->writeListEnd();
@@ -15222,14 +15276,14 @@ class ThriftHiveMetastore_drop_partition_with_environment_context_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size551 = 0;
-            $_etype554 = 0;
-            $xfer += $input->readListBegin($_etype554, $_size551);
-            for ($_i555 = 0; $_i555 < $_size551; ++$_i555)
+            $_size572 = 0;
+            $_etype575 = 0;
+            $xfer += $input->readListBegin($_etype575, $_size572);
+            for ($_i576 = 0; $_i576 < $_size572; ++$_i576)
             {
-              $elem556 = null;
-              $xfer += $input->readString($elem556);
-              $this->part_vals []= $elem556;
+              $elem577 = null;
+              $xfer += $input->readString($elem577);
+              $this->part_vals []= $elem577;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -15282,9 +15336,9 @@ class ThriftHiveMetastore_drop_partition_with_environment_context_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter557)
+          foreach ($this->part_vals as $iter578)
           {
-            $xfer += $output->writeString($iter557);
+            $xfer += $output->writeString($iter578);
           }
         }
         $output->writeListEnd();
@@ -16223,14 +16277,14 @@ class ThriftHiveMetastore_get_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size558 = 0;
-            $_etype561 = 0;
-            $xfer += $input->readListBegin($_etype561, $_size558);
-            for ($_i562 = 0; $_i562 < $_size558; ++$_i562)
+            $_size579 = 0;
+            $_etype582 = 0;
+            $xfer += $input->readListBegin($_etype582, $_size579);
+            for ($_i583 = 0; $_i583 < $_size579; ++$_i583)
             {
-              $elem563 = null;
-              $xfer += $input->readString($elem563);
-              $this->part_vals []= $elem563;
+              $elem584 = null;
+              $xfer += $input->readString($elem584);
+              $this->part_vals []= $elem584;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16268,9 +16322,9 @@ class ThriftHiveMetastore_get_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter564)
+          foreach ($this->part_vals as $iter585)
           {
-            $xfer += $output->writeString($iter564);
+            $xfer += $output->writeString($iter585);
           }
         }
         $output->writeListEnd();
@@ -16488,17 +16542,17 @@ class ThriftHiveMetastore_exchange_partition_args {
         case 1:
           if ($ftype == TType::MAP) {
             $this->partitionSpecs = array();
-            $_size565 = 0;
-            $_ktype566 = 0;
-            $_vtype567 = 0;
-            $xfer += $input->readMapBegin($_ktype566, $_vtype567, $_size565);
-            for ($_i569 = 0; $_i569 < $_size565; ++$_i569)
+            $_size586 = 0;
+            $_ktype587 = 0;
+            $_vtype588 = 0;
+            $xfer += $input->readMapBegin($_ktype587, $_vtype588, $_size586);
+            for ($_i590 = 0; $_i590 < $_size586; ++$_i590)
             {
-              $key570 = '';
-              $val571 = '';
-              $xfer += $input->readString($key570);
-              $xfer += $input->readString($val571);
-              $this->partitionSpecs[$key570] = $val571;
+              $key591 = '';
+              $val592 = '';
+              $xfer += $input->readString($key591);
+              $xfer += $input->readString($val592);
+              $this->partitionSpecs[$key591] = $val592;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -16554,10 +16608,10 @@ class ThriftHiveMetastore_exchange_partition_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->partitionSpecs));
         {
-          foreach ($this->partitionSpecs as $kiter572 => $viter573)
+          foreach ($this->partitionSpecs as $kiter593 => $viter594)
           {
-            $xfer += $output->writeString($kiter572);
-            $xfer += $output->writeString($viter573);
+            $xfer += $output->writeString($kiter593);
+            $xfer += $output->writeString($viter594);
           }
         }
         $output->writeMapEnd();
@@ -16853,14 +16907,14 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size574 = 0;
-            $_etype577 = 0;
-            $xfer += $input->readListBegin($_etype577, $_size574);
-            for ($_i578 = 0; $_i578 < $_size574; ++$_i578)
+            $_size595 = 0;
+            $_etype598 = 0;
+            $xfer += $input->readListBegin($_etype598, $_size595);
+            for ($_i599 = 0; $_i599 < $_size595; ++$_i599)
             {
-              $elem579 = null;
-              $xfer += $input->readString($elem579);
-              $this->part_vals []= $elem579;
+              $elem600 = null;
+              $xfer += $input->readString($elem600);
+              $this->part_vals []= $elem600;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16877,14 +16931,14 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
         case 5:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size580 = 0;
-            $_etype583 = 0;
-            $xfer += $input->readListBegin($_etype583, $_size580);
-            for ($_i584 = 0; $_i584 < $_size580; ++$_i584)
+            $_size601 = 0;
+            $_etype604 = 0;
+            $xfer += $input->readListBegin($_etype604, $_size601);
+            for ($_i605 = 0; $_i605 < $_size601; ++$_i605)
             {
-              $elem585 = null;
-              $xfer += $input->readString($elem585);
-              $this->group_names []= $elem585;
+              $elem606 = null;
+              $xfer += $input->readString($elem606);
+              $this->group_names []= $elem606;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -16922,9 +16976,9 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter586)
+          foreach ($this->part_vals as $iter607)
           {
-            $xfer += $output->writeString($iter586);
+            $xfer += $output->writeString($iter607);
           }
         }
         $output->writeListEnd();
@@ -16944,9 +16998,9 @@ class ThriftHiveMetastore_get_partition_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter587)
+          foreach ($this->group_names as $iter608)
           {
-            $xfer += $output->writeString($iter587);
+            $xfer += $output->writeString($iter608);
           }
         }
         $output->writeListEnd();
@@ -17492,15 +17546,15 @@ class ThriftHiveMetastore_get_partitions_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size588 = 0;
-            $_etype591 = 0;
-            $xfer += $input->readListBegin($_etype591, $_size588);
-            for ($_i592 = 0; $_i592 < $_size588; ++$_i592)
+            $_size609 = 0;
+            $_etype612 = 0;
+            $xfer += $input->readListBegin($_etype612, $_size609);
+            for ($_i613 = 0; $_i613 < $_size609; ++$_i613)
             {
-              $elem593 = null;
-              $elem593 = new \metastore\Partition();
-              $xfer += $elem593->read($input);
-              $this->success []= $elem593;
+              $elem614 = null;
+              $elem614 = new \metastore\Partition();
+              $xfer += $elem614->read($input);
+              $this->success []= $elem614;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17544,9 +17598,9 @@ class ThriftHiveMetastore_get_partitions_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter594)
+          foreach ($this->success as $iter615)
           {
-            $xfer += $iter594->write($output);
+            $xfer += $iter615->write($output);
           }
         }
         $output->writeListEnd();
@@ -17677,14 +17731,14 @@ class ThriftHiveMetastore_get_partitions_with_auth_args {
         case 5:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size595 = 0;
-            $_etype598 = 0;
-            $xfer += $input->readListBegin($_etype598, $_size595);
-            for ($_i599 = 0; $_i599 < $_size595; ++$_i599)
+            $_size616 = 0;
+            $_etype619 = 0;
+            $xfer += $input->readListBegin($_etype619, $_size616);
+            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
             {
-              $elem600 = null;
-              $xfer += $input->readString($elem600);
-              $this->group_names []= $elem600;
+              $elem621 = null;
+              $xfer += $input->readString($elem621);
+              $this->group_names []= $elem621;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17732,9 +17786,9 @@ class ThriftHiveMetastore_get_partitions_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter601)
+          foreach ($this->group_names as $iter622)
           {
-            $xfer += $output->writeString($iter601);
+            $xfer += $output->writeString($iter622);
           }
         }
         $output->writeListEnd();
@@ -17814,15 +17868,15 @@ class ThriftHiveMetastore_get_partitions_with_auth_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size602 = 0;
-            $_etype605 = 0;
-            $xfer += $input->readListBegin($_etype605, $_size602);
-            for ($_i606 = 0; $_i606 < $_size602; ++$_i606)
+            $_size623 = 0;
+            $_etype626 = 0;
+            $xfer += $input->readListBegin($_etype626, $_size623);
+            for ($_i627 = 0; $_i627 < $_size623; ++$_i627)
             {
-              $elem607 = null;
-              $elem607 = new \metastore\Partition();
-              $xfer += $elem607->read($input);
-              $this->success []= $elem607;
+              $elem628 = null;
+              $elem628 = new \metastore\Partition();
+              $xfer += $elem628->read($input);
+              $this->success []= $elem628;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -17866,9 +17920,9 @@ class ThriftHiveMetastore_get_partitions_with_auth_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter608)
+          foreach ($this->success as $iter629)
           {
-            $xfer += $iter608->write($output);
+            $xfer += $iter629->write($output);
           }
         }
         $output->writeListEnd();
@@ -18070,15 +18124,15 @@ class ThriftHiveMetastore_get_partitions_pspec_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size609 = 0;
-            $_etype612 = 0;
-            $xfer += $input->readListBegin($_etype612, $_size609);
-            for ($_i613 = 0; $_i613 < $_size609; ++$_i613)
+            $_size630 = 0;
+            $_etype633 = 0;
+            $xfer += $input->readListBegin($_etype633, $_size630);
+            for ($_i634 = 0; $_i634 < $_size630; ++$_i634)
             {
-              $elem614 = null;
-              $elem614 = new \metastore\PartitionSpec();
-              $xfer += $elem614->read($input);
-              $this->success []= $elem614;
+              $elem635 = null;
+              $elem635 = new \metastore\PartitionSpec();
+              $xfer += $elem635->read($input);
+              $this->success []= $elem635;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18122,9 +18176,9 @@ class ThriftHiveMetastore_get_partitions_pspec_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter615)
+          foreach ($this->success as $iter636)
           {
-            $xfer += $iter615->write($output);
+            $xfer += $iter636->write($output);
           }
         }
         $output->writeListEnd();
@@ -18316,14 +18370,14 @@ class ThriftHiveMetastore_get_partition_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size616 = 0;
-            $_etype619 = 0;
-            $xfer += $input->readListBegin($_etype619, $_size616);
-            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
+            $_size637 = 0;
+            $_etype640 = 0;
+            $xfer += $input->readListBegin($_etype640, $_size637);
+            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
             {
-              $elem621 = null;
-              $xfer += $input->readString($elem621);
-              $this->success []= $elem621;
+              $elem642 = null;
+              $xfer += $input->readString($elem642);
+              $this->success []= $elem642;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18359,9 +18413,9 @@ class ThriftHiveMetastore_get_partition_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter622)
+          foreach ($this->success as $iter643)
           {
-            $xfer += $output->writeString($iter622);
+            $xfer += $output->writeString($iter643);
           }
         }
         $output->writeListEnd();
@@ -18465,14 +18519,14 @@ class ThriftHiveMetastore_get_partitions_ps_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size623 = 0;
-            $_etype626 = 0;
-            $xfer += $input->readListBegin($_etype626, $_size623);
-            for ($_i627 = 0; $_i627 < $_size623; ++$_i627)
+            $_size644 = 0;
+            $_etype647 = 0;
+            $xfer += $input->readListBegin($_etype647, $_size644);
+            for ($_i648 = 0; $_i648 < $_size644; ++$_i648)
             {
-              $elem628 = null;
-              $xfer += $input->readString($elem628);
-              $this->part_vals []= $elem628;
+              $elem649 = null;
+              $xfer += $input->readString($elem649);
+              $this->part_vals []= $elem649;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18517,9 +18571,9 @@ class ThriftHiveMetastore_get_partitions_ps_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter629)
+          foreach ($this->part_vals as $iter650)
           {
-            $xfer += $output->writeString($iter629);
+            $xfer += $output->writeString($iter650);
           }
         }
         $output->writeListEnd();
@@ -18604,15 +18658,15 @@ class ThriftHiveMetastore_get_partitions_ps_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size630 = 0;
-            $_etype633 = 0;
-            $xfer += $input->readListBegin($_etype633, $_size630);
-            for ($_i634 = 0; $_i634 < $_size630; ++$_i634)
+            $_size651 = 0;
+            $_etype654 = 0;
+            $xfer += $input->readListBegin($_etype654, $_size651);
+            for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
             {
-              $elem635 = null;
-              $elem635 = new \metastore\Partition();
-              $xfer += $elem635->read($input);
-              $this->success []= $elem635;
+              $elem656 = null;
+              $elem656 = new \metastore\Partition();
+              $xfer += $elem656->read($input);
+              $this->success []= $elem656;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18656,9 +18710,9 @@ class ThriftHiveMetastore_get_partitions_ps_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter636)
+          foreach ($this->success as $iter657)
           {
-            $xfer += $iter636->write($output);
+            $xfer += $iter657->write($output);
           }
         }
         $output->writeListEnd();
@@ -18787,14 +18841,14 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size637 = 0;
-            $_etype640 = 0;
-            $xfer += $input->readListBegin($_etype640, $_size637);
-            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
+            $_size658 = 0;
+            $_etype661 = 0;
+            $xfer += $input->readListBegin($_etype661, $_size658);
+            for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
             {
-              $elem642 = null;
-              $xfer += $input->readString($elem642);
-              $this->part_vals []= $elem642;
+              $elem663 = null;
+              $xfer += $input->readString($elem663);
+              $this->part_vals []= $elem663;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18818,14 +18872,14 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
         case 6:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size643 = 0;
-            $_etype646 = 0;
-            $xfer += $input->readListBegin($_etype646, $_size643);
-            for ($_i647 = 0; $_i647 < $_size643; ++$_i647)
+            $_size664 = 0;
+            $_etype667 = 0;
+            $xfer += $input->readListBegin($_etype667, $_size664);
+            for ($_i668 = 0; $_i668 < $_size664; ++$_i668)
             {
-              $elem648 = null;
-              $xfer += $input->readString($elem648);
-              $this->group_names []= $elem648;
+              $elem669 = null;
+              $xfer += $input->readString($elem669);
+              $this->group_names []= $elem669;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -18863,9 +18917,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter649)
+          foreach ($this->part_vals as $iter670)
           {
-            $xfer += $output->writeString($iter649);
+            $xfer += $output->writeString($iter670);
           }
         }
         $output->writeListEnd();
@@ -18890,9 +18944,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter650)
+          foreach ($this->group_names as $iter671)
           {
-            $xfer += $output->writeString($iter650);
+            $xfer += $output->writeString($iter671);
           }
         }
         $output->writeListEnd();
@@ -18972,15 +19026,15 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size651 = 0;
-            $_etype654 = 0;
-            $xfer += $input->readListBegin($_etype654, $_size651);
-            for ($_i655 = 0; $_i655 < $_size651; ++$_i655)
+            $_size672 = 0;
+            $_etype675 = 0;
+            $xfer += $input->readListBegin($_etype675, $_size672);
+            for ($_i676 = 0; $_i676 < $_size672; ++$_i676)
             {
-              $elem656 = null;
-              $elem656 = new \metastore\Partition();
-              $xfer += $elem656->read($input);
-              $this->success []= $elem656;
+              $elem677 = null;
+              $elem677 = new \metastore\Partition();
+              $xfer += $elem677->read($input);
+              $this->success []= $elem677;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19024,9 +19078,9 @@ class ThriftHiveMetastore_get_partitions_ps_with_auth_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter657)
+          foreach ($this->success as $iter678)
           {
-            $xfer += $iter657->write($output);
+            $xfer += $iter678->write($output);
           }
         }
         $output->writeListEnd();
@@ -19135,14 +19189,14 @@ class ThriftHiveMetastore_get_partition_names_ps_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size658 = 0;
-            $_etype661 = 0;
-            $xfer += $input->readListBegin($_etype661, $_size658);
-            for ($_i662 = 0; $_i662 < $_size658; ++$_i662)
+            $_size679 = 0;
+            $_etype682 = 0;
+            $xfer += $input->readListBegin($_etype682, $_size679);
+            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
             {
-              $elem663 = null;
-              $xfer += $input->readString($elem663);
-              $this->part_vals []= $elem663;
+              $elem684 = null;
+              $xfer += $input->readString($elem684);
+              $this->part_vals []= $elem684;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19187,9 +19241,9 @@ class ThriftHiveMetastore_get_partition_names_ps_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter664)
+          foreach ($this->part_vals as $iter685)
           {
-            $xfer += $output->writeString($iter664);
+            $xfer += $output->writeString($iter685);
           }
         }
         $output->writeListEnd();
@@ -19273,14 +19327,14 @@ class ThriftHiveMetastore_get_partition_names_ps_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size665 = 0;
-            $_etype668 = 0;
-            $xfer += $input->readListBegin($_etype668, $_size665);
-            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
+            $_size686 = 0;
+            $_etype689 = 0;
+            $xfer += $input->readListBegin($_etype689, $_size686);
+            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
             {
-              $elem670 = null;
-              $xfer += $input->readString($elem670);
-              $this->success []= $elem670;
+              $elem691 = null;
+              $xfer += $input->readString($elem691);
+              $this->success []= $elem691;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19324,9 +19378,9 @@ class ThriftHiveMetastore_get_partition_names_ps_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter671)
+          foreach ($this->success as $iter692)
           {
-            $xfer += $output->writeString($iter671);
+            $xfer += $output->writeString($iter692);
           }
         }
         $output->writeListEnd();
@@ -19548,15 +19602,15 @@ class ThriftHiveMetastore_get_partitions_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size672 = 0;
-            $_etype675 = 0;
-            $xfer += $input->readListBegin($_etype675, $_size672);
-            for ($_i676 = 0; $_i676 < $_size672; ++$_i676)
+            $_size693 = 0;
+            $_etype696 = 0;
+            $xfer += $input->readListBegin($_etype696, $_size693);
+            for ($_i697 = 0; $_i697 < $_size693; ++$_i697)
             {
-              $elem677 = null;
-              $elem677 = new \metastore\Partition();
-              $xfer += $elem677->read($input);
-              $this->success []= $elem677;
+              $elem698 = null;
+              $elem698 = new \metastore\Partition();
+              $xfer += $elem698->read($input);
+              $this->success []= $elem698;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19600,9 +19654,9 @@ class ThriftHiveMetastore_get_partitions_by_filter_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter678)
+          foreach ($this->success as $iter699)
           {
-            $xfer += $iter678->write($output);
+            $xfer += $iter699->write($output);
           }
         }
         $output->writeListEnd();
@@ -19824,15 +19878,15 @@ class ThriftHiveMetastore_get_part_specs_by_filter_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size679 = 0;
-            $_etype682 = 0;
-            $xfer += $input->readListBegin($_etype682, $_size679);
-            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
+            $_size700 = 0;
+            $_etype703 = 0;
+            $xfer += $input->readListBegin($_etype703, $_size700);
+            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
             {
-              $elem684 = null;
-              $elem684 = new \metastore\PartitionSpec();
-              $xfer += $elem684->read($input);
-              $this->success []= $elem684;
+              $elem705 = null;
+              $elem705 = new \metastore\PartitionSpec();
+              $xfer += $elem705->read($input);
+              $this->success []= $elem705;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -19876,9 +19930,9 @@ class ThriftHiveMetastore_get_part_specs_by_filter_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter685)
+          foreach ($this->success as $iter706)
           {
-            $xfer += $iter685->write($output);
+            $xfer += $iter706->write($output);
           }
         }
         $output->writeListEnd();
@@ -20177,14 +20231,14 @@ class ThriftHiveMetastore_get_partitions_by_names_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->names = array();
-            $_size686 = 0;
-            $_etype689 = 0;
-            $xfer += $input->readListBegin($_etype689, $_size686);
-            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
+            $_size707 = 0;
+            $_etype710 = 0;
+            $xfer += $input->readListBegin($_etype710, $_size707);
+            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
             {
-              $elem691 = null;
-              $xfer += $input->readString($elem691);
-              $this->names []= $elem691;
+              $elem712 = null;
+              $xfer += $input->readString($elem712);
+              $this->names []= $elem712;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20222,9 +20276,9 @@ class ThriftHiveMetastore_get_partitions_by_names_args {
       {
         $output->writeListBegin(TType::STRING, count($this->names));
         {
-          foreach ($this->names as $iter692)
+          foreach ($this->names as $iter713)
           {
-            $xfer += $output->writeString($iter692);
+            $xfer += $output->writeString($iter713);
           }
         }
         $output->writeListEnd();
@@ -20304,15 +20358,15 @@ class ThriftHiveMetastore_get_partitions_by_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size693 = 0;
-            $_etype696 = 0;
-            $xfer += $input->readListBegin($_etype696, $_size693);
-            for ($_i697 = 0; $_i697 < $_size693; ++$_i697)
+            $_size714 = 0;
+            $_etype717 = 0;
+            $xfer += $input->readListBegin($_etype717, $_size714);
+            for ($_i718 = 0; $_i718 < $_size714; ++$_i718)
             {
-              $elem698 = null;
-              $elem698 = new \metastore\Partition();
-              $xfer += $elem698->read($input);
-              $this->success []= $elem698;
+              $elem719 = null;
+              $elem719 = new \metastore\Partition();
+              $xfer += $elem719->read($input);
+              $this->success []= $elem719;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20356,9 +20410,9 @@ class ThriftHiveMetastore_get_partitions_by_names_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter699)
+          foreach ($this->success as $iter720)
           {
-            $xfer += $iter699->write($output);
+            $xfer += $iter720->write($output);
           }
         }
         $output->writeListEnd();
@@ -20673,15 +20727,15 @@ class ThriftHiveMetastore_alter_partitions_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->new_parts = array();
-            $_size700 = 0;
-            $_etype703 = 0;
-            $xfer += $input->readListBegin($_etype703, $_size700);
-            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
+            $_size721 = 0;
+            $_etype724 = 0;
+            $xfer += $input->readListBegin($_etype724, $_size721);
+            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
             {
-              $elem705 = null;
-              $elem705 = new \metastore\Partition();
-              $xfer += $elem705->read($input);
-              $this->new_parts []= $elem705;
+              $elem726 = null;
+              $elem726 = new \metastore\Partition();
+              $xfer += $elem726->read($input);
+              $this->new_parts []= $elem726;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -20719,9 +20773,9 @@ class ThriftHiveMetastore_alter_partitions_args {
       {
         $output->writeListBegin(TType::STRUCT, count($this->new_parts));
         {
-          foreach ($this->new_parts as $iter706)
+          foreach ($this->new_parts as $iter727)
           {
-            $xfer += $iter706->write($output);
+            $xfer += $iter727->write($output);
           }
         }
         $output->writeListEnd();
@@ -21155,14 +21209,14 @@ class ThriftHiveMetastore_rename_partition_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size707 = 0;
-            $_etype710 = 0;
-            $xfer += $input->readListBegin($_etype710, $_size707);
-            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
+            $_size728 = 0;
+            $_etype731 = 0;
+            $xfer += $input->readListBegin($_etype731, $_size728);
+            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
             {
-              $elem712 = null;
-              $xfer += $input->readString($elem712);
-              $this->part_vals []= $elem712;
+              $elem733 = null;
+              $xfer += $input->readString($elem733);
+              $this->part_vals []= $elem733;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21208,9 +21262,9 @@ class ThriftHiveMetastore_rename_partition_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter713)
+          foreach ($this->part_vals as $iter734)
           {
-            $xfer += $output->writeString($iter713);
+            $xfer += $output->writeString($iter734);
           }
         }
         $output->writeListEnd();
@@ -21383,14 +21437,14 @@ class ThriftHiveMetastore_partition_name_has_valid_characters_args {
         case 1:
           if ($ftype == TType::LST) {
             $this->part_vals = array();
-            $_size714 = 0;
-            $_etype717 = 0;
-            $xfer += $input->readListBegin($_etype717, $_size714);
-            for ($_i718 = 0; $_i718 < $_size714; ++$_i718)
+            $_size735 = 0;
+            $_etype738 = 0;
+            $xfer += $input->readListBegin($_etype738, $_size735);
+            for ($_i739 = 0; $_i739 < $_size735; ++$_i739)
             {
-              $elem719 = null;
-              $xfer += $input->readString($elem719);
-              $this->part_vals []= $elem719;
+              $elem740 = null;
+              $xfer += $input->readString($elem740);
+              $this->part_vals []= $elem740;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21425,9 +21479,9 @@ class ThriftHiveMetastore_partition_name_has_valid_characters_args {
       {
         $output->writeListBegin(TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $iter720)
+          foreach ($this->part_vals as $iter741)
           {
-            $xfer += $output->writeString($iter720);
+            $xfer += $output->writeString($iter741);
           }
         }
         $output->writeListEnd();
@@ -21854,14 +21908,14 @@ class ThriftHiveMetastore_partition_name_to_vals_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size721 = 0;
-            $_etype724 = 0;
-            $xfer += $input->readListBegin($_etype724, $_size721);
-            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
+            $_size742 = 0;
+            $_etype745 = 0;
+            $xfer += $input->readListBegin($_etype745, $_size742);
+            for ($_i746 = 0; $_i746 < $_size742; ++$_i746)
             {
-              $elem726 = null;
-              $xfer += $input->readString($elem726);
-              $this->success []= $elem726;
+              $elem747 = null;
+              $xfer += $input->readString($elem747);
+              $this->success []= $elem747;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -21897,9 +21951,9 @@ class ThriftHiveMetastore_partition_name_to_vals_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter727)
+          foreach ($this->success as $iter748)
           {
-            $xfer += $output->writeString($iter727);
+            $xfer += $output->writeString($iter748);
           }
         }
         $output->writeListEnd();
@@ -22050,17 +22104,17 @@ class ThriftHiveMetastore_partition_name_to_spec_result {
         case 0:
           if ($ftype == TType::MAP) {
             $this->success = array();
-            $_size728 = 0;
-            $_ktype729 = 0;
-            $_vtype730 = 0;
-            $xfer += $input->readMapBegin($_ktype729, $_vtype730, $_size728);
-            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
+            $_size749 = 0;
+            $_ktype750 = 0;
+            $_vtype751 = 0;
+            $xfer += $input->readMapBegin($_ktype750, $_vtype751, $_size749);
+            for ($_i753 = 0; $_i753 < $_size749; ++$_i753)
             {
-              $key733 = '';
-              $val734 = '';
-              $xfer += $input->readString($key733);
-              $xfer += $input->readString($val734);
-              $this->success[$key733] = $val734;
+              $key754 = '';
+              $val755 = '';
+              $xfer += $input->readString($key754);
+              $xfer += $input->readString($val755);
+              $this->success[$key754] = $val755;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -22096,10 +22150,10 @@ class ThriftHiveMetastore_partition_name_to_spec_result {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
         {
-          foreach ($this->success as $kiter735 => $viter736)
+          foreach ($this->success as $kiter756 => $viter757)
           {
-            $xfer += $output->writeString($kiter735);
-            $xfer += $output->writeString($viter736);
+            $xfer += $output->writeString($kiter756);
+            $xfer += $output->writeString($viter757);
           }
         }
         $output->writeMapEnd();
@@ -22207,17 +22261,17 @@ class ThriftHiveMetastore_markPartitionForEvent_args {
         case 3:
           if ($ftype == TType::MAP) {
             $this->part_vals = array();
-            $_size737 = 0;
-            $_ktype738 = 0;
-            $_vtype739 = 0;
-            $xfer += $input->readMapBegin($_ktype738, $_vtype739, $_size737);
-            for ($_i741 = 0; $_i741 < $_size737; ++$_i741)
+            $_size758 = 0;
+            $_ktype759 = 0;
+            $_vtype760 = 0;
+            $xfer += $input->readMapBegin($_ktype759, $_vtype760, $_size758);
+            for ($_i762 = 0; $_i762 < $_size758; ++$_i762)
             {
-              $key742 = '';
-              $val743 = '';
-              $xfer += $input->readString($key742);
-              $xfer += $input->readString($val743);
-              $this->part_vals[$key742] = $val743;
+              $key763 = '';
+              $val764 = '';
+              $xfer += $input->readString($key763);
+              $xfer += $input->readString($val764);
+              $this->part_vals[$key763] = $val764;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -22262,10 +22316,10 @@ class ThriftHiveMetastore_markPartitionForEvent_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $kiter744 => $viter745)
+          foreach ($this->part_vals as $kiter765 => $viter766)
           {
-            $xfer += $output->writeString($kiter744);
-            $xfer += $output->writeString($viter745);
+            $xfer += $output->writeString($kiter765);
+            $xfer += $output->writeString($viter766);
           }
         }
         $output->writeMapEnd();
@@ -22557,17 +22611,17 @@ class ThriftHiveMetastore_isPartitionMarkedForEvent_args {
         case 3:
           if ($ftype == TType::MAP) {
             $this->part_vals = array();
-            $_size746 = 0;
-            $_ktype747 = 0;
-            $_vtype748 = 0;
-            $xfer += $input->readMapBegin($_ktype747, $_vtype748, $_size746);
-            for ($_i750 = 0; $_i750 < $_size746; ++$_i750)
+            $_size767 = 0;
+            $_ktype768 = 0;
+            $_vtype769 = 0;
+            $xfer += $input->readMapBegin($_ktype768, $_vtype769, $_size767);
+            for ($_i771 = 0; $_i771 < $_size767; ++$_i771)
             {
-              $key751 = '';
-              $val752 = '';
-              $xfer += $input->readString($key751);
-              $xfer += $input->readString($val752);
-              $this->part_vals[$key751] = $val752;
+              $key772 = '';
+              $val773 = '';
+              $xfer += $input->readString($key772);
+              $xfer += $input->readString($val773);
+              $this->part_vals[$key772] = $val773;
             }
             $xfer += $input->readMapEnd();
           } else {
@@ -22612,10 +22666,10 @@ class ThriftHiveMetastore_isPartitionMarkedForEvent_args {
       {
         $output->writeMapBegin(TType::STRING, TType::STRING, count($this->part_vals));
         {
-          foreach ($this->part_vals as $kiter753 => $viter754)
+          foreach ($this->part_vals as $kiter774 => $viter775)
           {
-            $xfer += $output->writeString($kiter753);
-            $xfer += $output->writeString($viter754);
+            $xfer += $output->writeString($kiter774);
+            $xfer += $output->writeString($viter775);
           }
         }
         $output->writeMapEnd();
@@ -23975,15 +24029,15 @@ class ThriftHiveMetastore_get_indexes_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size755 = 0;
-            $_etype758 = 0;
-            $xfer += $input->readListBegin($_etype758, $_size755);
-            for ($_i759 = 0; $_i759 < $_size755; ++$_i759)
+            $_size776 = 0;
+            $_etype779 = 0;
+            $xfer += $input->readListBegin($_etype779, $_size776);
+            for ($_i780 = 0; $_i780 < $_size776; ++$_i780)
             {
-              $elem760 = null;
-              $elem760 = new \metastore\Index();
-              $xfer += $elem760->read($input);
-              $this->success []= $elem760;
+              $elem781 = null;
+              $elem781 = new \metastore\Index();
+              $xfer += $elem781->read($input);
+              $this->success []= $elem781;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -24027,9 +24081,9 @@ class ThriftHiveMetastore_get_indexes_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter761)
+          foreach ($this->success as $iter782)
           {
-            $xfer += $iter761->write($output);
+            $xfer += $iter782->write($output);
           }
         }
         $output->writeListEnd();
@@ -24221,14 +24275,14 @@ class ThriftHiveMetastore_get_index_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size762 = 0;
-            $_etype765 = 0;
-            $xfer += $input->readListBegin($_etype765, $_size762);
-            for ($_i766 = 0; $_i766 < $_size762; ++$_i766)
+            $_size783 = 0;
+            $_etype786 = 0;
+            $xfer += $input->readListBegin($_etype786, $_size783);
+            for ($_i787 = 0; $_i787 < $_size783; ++$_i787)
             {
-              $elem767 = null;
-              $xfer += $input->readString($elem767);
-              $this->success []= $elem767;
+              $elem788 = null;
+              $xfer += $input->readString($elem788);
+              $this->success []= $elem788;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -24264,9 +24318,9 @@ class ThriftHiveMetastore_get_index_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter768)
+          foreach ($this->success as $iter789)
           {
-            $xfer += $output->writeString($iter768);
+            $xfer += $output->writeString($iter789);
           }
         }
         $output->writeListEnd();
@@ -27494,14 +27548,14 @@ class ThriftHiveMetastore_get_functions_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size769 = 0;
-            $_etype772 = 0;
-            $xfer += $input->readListBegin($_etype772, $_size769);
-            for ($_i773 = 0; $_i773 < $_size769; ++$_i773)
+            $_size790 = 0;
+            $_etype793 = 0;
+            $xfer += $input->readListBegin($_etype793, $_size790);
+            for ($_i794 = 0; $_i794 < $_size790; ++$_i794)
             {
-              $elem774 = null;
-              $xfer += $input->readString($elem774);
-              $this->success []= $elem774;
+              $elem795 = null;
+              $xfer += $input->readString($elem795);
+              $this->success []= $elem795;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -27537,9 +27591,9 @@ class ThriftHiveMetastore_get_functions_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter775)
+          foreach ($this->success as $iter796)
           {
-            $xfer += $output->writeString($iter775);
+            $xfer += $output->writeString($iter796);
           }
         }
         $output->writeListEnd();
@@ -27771,6 +27825,155 @@ class ThriftHiveMetastore_get_function_result {
 
 }
 
+class ThriftHiveMetastore_get_all_functions_args {
+  static $_TSPEC;
+
+
+  public function __construct() {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        );
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_all_functions_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_all_functions_args');
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_all_functions_result {
+  static $_TSPEC;
+
+  public $success = null;
+  public $o1 = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\GetAllFunctionsResponse',
+          ),
+        1 => array(
+          'var' => 'o1',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\MetaException',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+      if (isset($vals['o1'])) {
+        $this->o1 = $vals['o1'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_all_functions_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::STRUCT) {
+            $this->success = new \metastore\GetAllFunctionsResponse();
+            $xfer += $this->success->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->o1 = new \metastore\MetaException();
+            $xfer += $this->o1->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_all_functions_result');
+    if ($this->success !== null) {
+      if (!is_object($this->success)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
+      $xfer += $this->success->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
 class ThriftHiveMetastore_create_role_args {
   static $_TSPEC;
 
@@ -28214,14 +28417,14 @@ class ThriftHiveMetastore_get_role_names_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size776 = 0;
-            $_etype779 = 0;
-            $xfer += $input->readListBegin($_etype779, $_size776);
-            for ($_i780 = 0; $_i780 < $_size776; ++$_i780)
+            $_size797 = 0;
+            $_etype800 = 0;
+            $xfer += $input->readListBegin($_etype800, $_size797);
+            for ($_i801 = 0; $_i801 < $_size797; ++$_i801)
             {
-              $elem781 = null;
-              $xfer += $input->readString($elem781);
-              $this->success []= $elem781;
+              $elem802 = null;
+              $xfer += $input->readString($elem802);
+              $this->success []= $elem802;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -28257,9 +28460,9 @@ class ThriftHiveMetastore_get_role_names_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter782)
+          foreach ($this->success as $iter803)
           {
-            $xfer += $output->writeString($iter782);
+            $xfer += $output->writeString($iter803);
           }
         }
         $output->writeListEnd();
@@ -28899,15 +29102,15 @@ class ThriftHiveMetastore_list_roles_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size783 = 0;
-            $_etype786 = 0;
-            $xfer += $input->readListBegin($_etype786, $_size783);
-            for ($_i787 = 0; $_i787 < $_size783; ++$_i787)
+            $_size804 = 0;
+            $_etype807 = 0;
+            $xfer += $input->readListBegin($_etype807, $_size804);
+            for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
             {
-              $elem788 = null;
-              $elem788 = new \metastore\Role();
-              $xfer += $elem788->read($input);
-              $this->success []= $elem788;
+              $elem809 = null;
+              $elem809 = new \metastore\Role();
+              $xfer += $elem809->read($input);
+              $this->success []= $elem809;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -28943,9 +29146,9 @@ class ThriftHiveMetastore_list_roles_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter789)
+          foreach ($this->success as $iter810)
           {
-            $xfer += $iter789->write($output);
+            $xfer += $iter810->write($output);
           }
         }
         $output->writeListEnd();
@@ -29571,14 +29774,14 @@ class ThriftHiveMetastore_get_privilege_set_args {
         case 3:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size790 = 0;
-            $_etype793 = 0;
-            $xfer += $input->readListBegin($_etype793, $_size790);
-            for ($_i794 = 0; $_i794 < $_size790; ++$_i794)
+            $_size811 = 0;
+            $_etype814 = 0;
+            $xfer += $input->readListBegin($_etype814, $_size811);
+            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
             {
-              $elem795 = null;
-              $xfer += $input->readString($elem795);
-              $this->group_names []= $elem795;
+              $elem816 = null;
+              $xfer += $input->readString($elem816);
+              $this->group_names []= $elem816;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -29619,9 +29822,9 @@ class ThriftHiveMetastore_get_privilege_set_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter796)
+          foreach ($this->group_names as $iter817)
           {
-            $xfer += $output->writeString($iter796);
+            $xfer += $output->writeString($iter817);
           }
         }
         $output->writeListEnd();
@@ -29908,15 +30111,15 @@ class ThriftHiveMetastore_list_privileges_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size797 = 0;
-            $_etype800 = 0;
-            $xfer += $input->readListBegin($_etype800, $_size797);
-            for ($_i801 = 0; $_i801 < $_size797; ++$_i801)
+            $_size818 = 0;
+            $_etype821 = 0;
+            $xfer += $input->readListBegin($_etype821, $_size818);
+            for ($_i822 = 0; $_i822 < $_size818; ++$_i822)
             {
-              $elem802 = null;
-              $elem802 = new \metastore\HiveObjectPrivilege();
-              $xfer += $elem802->read($input);
-              $this->success []= $elem802;
+              $elem823 = null;
+              $elem823 = new \metastore\HiveObjectPrivilege();
+              $xfer += $elem823->read($input);
+              $this->success []= $elem823;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -29952,9 +30155,9 @@ class ThriftHiveMetastore_list_privileges_result {
       {
         $output->writeListBegin(TType::STRUCT, count($this->success));
         {
-          foreach ($this->success as $iter803)
+          foreach ($this->success as $iter824)
           {
-            $xfer += $iter803->write($output);
+            $xfer += $iter824->write($output);
           }
         }
         $output->writeListEnd();
@@ -30553,14 +30756,14 @@ class ThriftHiveMetastore_set_ugi_args {
         case 2:
           if ($ftype == TType::LST) {
             $this->group_names = array();
-            $_size804 = 0;
-            $_etype807 = 0;
-            $xfer += $input->readListBegin($_etype807, $_size804);
-            for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
+            $_size825 = 0;
+            $_etype828 = 0;
+            $xfer += $input->readListBegin($_etype828, $_size825);
+            for ($_i829 = 0; $_i829 < $_size825; ++$_i829)
             {
-              $elem809 = null;
-              $xfer += $input->readString($elem809);
-              $this->group_names []= $elem809;
+              $elem830 = null;
+              $xfer += $input->readString($elem830);
+              $this->group_names []= $elem830;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -30593,9 +30796,9 @@ class ThriftHiveMetastore_set_ugi_args {
       {
         $output->writeListBegin(TType::STRING, count($this->group_names));
         {
-          foreach ($this->group_names as $iter810)
+          foreach ($this->group_names as $iter831)
           {
-            $xfer += $output->writeString($iter810);
+            $xfer += $output->writeString($iter831);
           }
         }
         $output->writeListEnd();
@@ -30665,14 +30868,14 @@ class ThriftHiveMetastore_set_ugi_result {
         case 0:
           if ($ftype == TType::LST) {
             $this->success = array();
-            $_size811 = 0;
-            $_etype814 = 0;
-            $xfer += $input->readListBegin($_etype814, $_size811);
-            for ($_i815 = 0; $_i815 < $_size811; ++$_i815)
+            $_size832 = 0;
+            $_etype835 = 0;
+            $xfer += $input->readListBegin($_etype835, $_size832);
+            for ($_i836 = 0; $_i836 < $_size832; ++$_i836)
             {
-              $elem816 = null;
-              $xfer += $input->readString($elem816);
-              $this->success []= $elem816;
+              $elem837 = null;
+              $xfer += $input->readString($elem837);
+              $this->success []= $elem837;
             }
             $xfer += $input->readListEnd();
           } else {
@@ -30708,9 +30911,9 @@ class ThriftHiveMetastore_set_ugi_result {
       {
         $output->writeListBegin(TType::STRING, count($this->success));
         {
-          foreach ($this->success as $iter817)
+          foreach ($this->success as $iter838)
           {
-            $xfer += $output->writeString($iter817);
+            $xfer += $output->writeString($iter838);
           }
         }
         $output->writeListEnd();
diff --git a/metastore/src/gen/thrift/gen-php/metastore/Types.php b/metastore/src/gen/thrift/gen-php/metastore/Types.php
index 9111dea..b218bdf 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/Types.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/Types.php
@@ -12132,6 +12132,514 @@ class CurrentNotificationEventId {
 
 }
 
+class InsertEventRequestData {
+  static $_TSPEC;
+
+  public $filesAdded = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'filesAdded',
+          'type' => TType::LST,
+          'etype' => TType::STRING,
+          'elem' => array(
+            'type' => TType::STRING,
+            ),
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['filesAdded'])) {
+        $this->filesAdded = $vals['filesAdded'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'InsertEventRequestData';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::LST) {
+            $this->filesAdded = array();
+            $_size444 = 0;
+            $_etype447 = 0;
+            $xfer += $input->readListBegin($_etype447, $_size444);
+            for ($_i448 = 0; $_i448 < $_size444; ++$_i448)
+            {
+              $elem449 = null;
+              $xfer += $input->readString($elem449);
+              $this->filesAdded []= $elem449;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('InsertEventRequestData');
+    if ($this->filesAdded !== null) {
+      if (!is_array($this->filesAdded)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('filesAdded', TType::LST, 1);
+      {
+        $output->writeListBegin(TType::STRING, count($this->filesAdded));
+        {
+          foreach ($this->filesAdded as $iter450)
+          {
+            $xfer += $output->writeString($iter450);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class FireEventRequestData {
+  static $_TSPEC;
+
+  public $insertData = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'insertData',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\InsertEventRequestData',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['insertData'])) {
+        $this->insertData = $vals['insertData'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'FireEventRequestData';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->insertData = new \metastore\InsertEventRequestData();
+            $xfer += $this->insertData->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('FireEventRequestData');
+    if ($this->insertData !== null) {
+      if (!is_object($this->insertData)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('insertData', TType::STRUCT, 1);
+      $xfer += $this->insertData->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class FireEventRequest {
+  static $_TSPEC;
+
+  public $successful = null;
+  public $data = null;
+  public $dbName = null;
+  public $tableName = null;
+  public $partitionVals = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'successful',
+          'type' => TType::BOOL,
+          ),
+        2 => array(
+          'var' => 'data',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\FireEventRequestData',
+          ),
+        3 => array(
+          'var' => 'dbName',
+          'type' => TType::STRING,
+          ),
+        4 => array(
+          'var' => 'tableName',
+          'type' => TType::STRING,
+          ),
+        5 => array(
+          'var' => 'partitionVals',
+          'type' => TType::LST,
+          'etype' => TType::STRING,
+          'elem' => array(
+            'type' => TType::STRING,
+            ),
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['successful'])) {
+        $this->successful = $vals['successful'];
+      }
+      if (isset($vals['data'])) {
+        $this->data = $vals['data'];
+      }
+      if (isset($vals['dbName'])) {
+        $this->dbName = $vals['dbName'];
+      }
+      if (isset($vals['tableName'])) {
+        $this->tableName = $vals['tableName'];
+      }
+      if (isset($vals['partitionVals'])) {
+        $this->partitionVals = $vals['partitionVals'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'FireEventRequest';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::BOOL) {
+            $xfer += $input->readBool($this->successful);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRUCT) {
+            $this->data = new \metastore\FireEventRequestData();
+            $xfer += $this->data->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 3:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->dbName);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 4:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->tableName);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 5:
+          if ($ftype == TType::LST) {
+            $this->partitionVals = array();
+            $_size451 = 0;
+            $_etype454 = 0;
+            $xfer += $input->readListBegin($_etype454, $_size451);
+            for ($_i455 = 0; $_i455 < $_size451; ++$_i455)
+            {
+              $elem456 = null;
+              $xfer += $input->readString($elem456);
+              $this->partitionVals []= $elem456;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('FireEventRequest');
+    if ($this->successful !== null) {
+      $xfer += $output->writeFieldBegin('successful', TType::BOOL, 1);
+      $xfer += $output->writeBool($this->successful);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->data !== null) {
+      if (!is_object($this->data)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 2);
+      $xfer += $this->data->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->dbName !== null) {
+      $xfer += $output->writeFieldBegin('dbName', TType::STRING, 3);
+      $xfer += $output->writeString($this->dbName);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->tableName !== null) {
+      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 4);
+      $xfer += $output->writeString($this->tableName);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->partitionVals !== null) {
+      if (!is_array($this->partitionVals)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('partitionVals', TType::LST, 5);
+      {
+        $output->writeListBegin(TType::STRING, count($this->partitionVals));
+        {
+          foreach ($this->partitionVals as $iter457)
+          {
+            $xfer += $output->writeString($iter457);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class FireEventResponse {
+  static $_TSPEC;
+
+
+  public function __construct() {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        );
+    }
+  }
+
+  public function getName() {
+    return 'FireEventResponse';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('FireEventResponse');
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class GetAllFunctionsResponse {
+  static $_TSPEC;
+
+  public $functions = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'functions',
+          'type' => TType::LST,
+          'etype' => TType::STRUCT,
+          'elem' => array(
+            'type' => TType::STRUCT,
+            'class' => '\metastore\Function',
+            ),
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['functions'])) {
+        $this->functions = $vals['functions'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'GetAllFunctionsResponse';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::LST) {
+            $this->functions = array();
+            $_size458 = 0;
+            $_etype461 = 0;
+            $xfer += $input->readListBegin($_etype461, $_size458);
+            for ($_i462 = 0; $_i462 < $_size458; ++$_i462)
+            {
+              $elem463 = null;
+              $elem463 = new \metastore\Function();
+              $xfer += $elem463->read($input);
+              $this->functions []= $elem463;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('GetAllFunctionsResponse');
+    if ($this->functions !== null) {
+      if (!is_array($this->functions)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('functions', TType::LST, 1);
+      {
+        $output->writeListBegin(TType::STRUCT, count($this->functions));
+        {
+          foreach ($this->functions as $iter464)
+          {
+            $xfer += $iter464->write($output);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
 class MetaException extends TException {
   static $_TSPEC;
 
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
old mode 100644
new mode 100755
index 197b35e..cc76fce
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
@@ -109,6 +109,7 @@ if len(sys.argv) <= 1 or sys.argv[1] == '--help':
   print '  void alter_function(string dbName, string funcName, Function newFunc)'
   print '   get_functions(string dbName, string pattern)'
   print '  Function get_function(string dbName, string funcName)'
+  print '  GetAllFunctionsResponse get_all_functions()'
   print '  bool create_role(Role role)'
   print '  bool drop_role(string role_name)'
   print '   get_role_names()'
@@ -709,6 +710,12 @@ elif cmd == 'get_function':
     sys.exit(1)
   pp.pprint(client.get_function(args[0],args[1],))
 
+elif cmd == 'get_all_functions':
+  if len(args) != 0:
+    print 'get_all_functions requires 0 args'
+    sys.exit(1)
+  pp.pprint(client.get_all_functions())
+
 elif cmd == 'create_role':
   if len(args) != 1:
     print 'create_role requires 1 args'
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
index 1357e41..775e3d7 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
@@ -757,6 +757,9 @@ def get_function(self, dbName, funcName):
     """
     pass
 
+  def get_all_functions(self, ):
+    pass
+
   def create_role(self, role):
     """
     Parameters:
@@ -4213,6 +4216,33 @@ def recv_get_function(self, ):
       raise result.o2
     raise TApplicationException(TApplicationException.MISSING_RESULT, "get_function failed: unknown result");
 
+  def get_all_functions(self, ):
+    self.send_get_all_functions()
+    return self.recv_get_all_functions()
+
+  def send_get_all_functions(self, ):
+    self._oprot.writeMessageBegin('get_all_functions', TMessageType.CALL, self._seqid)
+    args = get_all_functions_args()
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_all_functions(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_all_functions_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    if result.o1 is not None:
+      raise result.o1
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_functions failed: unknown result");
+
   def create_role(self, role):
     """
     Parameters:
@@ -5351,6 +5381,7 @@ def __init__(self, handler):
     self._processMap["alter_function"] = Processor.process_alter_function
     self._processMap["get_functions"] = Processor.process_get_functions
     self._processMap["get_function"] = Processor.process_get_function
+    self._processMap["get_all_functions"] = Processor.process_get_all_functions
     self._processMap["create_role"] = Processor.process_create_role
     self._processMap["drop_role"] = Processor.process_drop_role
     self._processMap["get_role_names"] = Processor.process_get_role_names
@@ -6842,6 +6873,20 @@ def process_get_function(self, seqid, iprot, oprot):
     oprot.writeMessageEnd()
     oprot.trans.flush()
 
+  def process_get_all_functions(self, seqid, iprot, oprot):
+    args = get_all_functions_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_all_functions_result()
+    try:
+      result.success = self._handler.get_all_functions()
+    except MetaException as o1:
+      result.o1 = o1
+    oprot.writeMessageBegin("get_all_functions", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
   def process_create_role(self, seqid, iprot, oprot):
     args = create_role_args()
     args.read(iprot)
@@ -8112,10 +8157,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype444, _size441) = iprot.readListBegin()
-          for _i445 in xrange(_size441):
-            _elem446 = iprot.readString();
-            self.success.append(_elem446)
+          (_etype465, _size462) = iprot.readListBegin()
+          for _i466 in xrange(_size462):
+            _elem467 = iprot.readString();
+            self.success.append(_elem467)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -8138,8 +8183,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter447 in self.success:
-        oprot.writeString(iter447)
+      for iter468 in self.success:
+        oprot.writeString(iter468)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -8234,10 +8279,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype451, _size448) = iprot.readListBegin()
-          for _i452 in xrange(_size448):
-            _elem453 = iprot.readString();
-            self.success.append(_elem453)
+          (_etype472, _size469) = iprot.readListBegin()
+          for _i473 in xrange(_size469):
+            _elem474 = iprot.readString();
+            self.success.append(_elem474)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -8260,8 +8305,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter454 in self.success:
-        oprot.writeString(iter454)
+      for iter475 in self.success:
+        oprot.writeString(iter475)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -8971,12 +9016,12 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.MAP:
           self.success = {}
-          (_ktype456, _vtype457, _size455 ) = iprot.readMapBegin() 
-          for _i459 in xrange(_size455):
-            _key460 = iprot.readString();
-            _val461 = Type()
-            _val461.read(iprot)
-            self.success[_key460] = _val461
+          (_ktype477, _vtype478, _size476 ) = iprot.readMapBegin() 
+          for _i480 in xrange(_size476):
+            _key481 = iprot.readString();
+            _val482 = Type()
+            _val482.read(iprot)
+            self.success[_key481] = _val482
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -8999,9 +9044,9 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.MAP, 0)
       oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
-      for kiter462,viter463 in self.success.items():
-        oprot.writeString(kiter462)
-        viter463.write(oprot)
+      for kiter483,viter484 in self.success.items():
+        oprot.writeString(kiter483)
+        viter484.write(oprot)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -9132,11 +9177,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype467, _size464) = iprot.readListBegin()
-          for _i468 in xrange(_size464):
-            _elem469 = FieldSchema()
-            _elem469.read(iprot)
-            self.success.append(_elem469)
+          (_etype488, _size485) = iprot.readListBegin()
+          for _i489 in xrange(_size485):
+            _elem490 = FieldSchema()
+            _elem490.read(iprot)
+            self.success.append(_elem490)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -9171,8 +9216,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter470 in self.success:
-        iter470.write(oprot)
+      for iter491 in self.success:
+        iter491.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -9311,11 +9356,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype474, _size471) = iprot.readListBegin()
-          for _i475 in xrange(_size471):
-            _elem476 = FieldSchema()
-            _elem476.read(iprot)
-            self.success.append(_elem476)
+          (_etype495, _size492) = iprot.readListBegin()
+          for _i496 in xrange(_size492):
+            _elem497 = FieldSchema()
+            _elem497.read(iprot)
+            self.success.append(_elem497)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -9350,8 +9395,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter477 in self.success:
-        iter477.write(oprot)
+      for iter498 in self.success:
+        iter498.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10148,10 +10193,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype481, _size478) = iprot.readListBegin()
-          for _i482 in xrange(_size478):
-            _elem483 = iprot.readString();
-            self.success.append(_elem483)
+          (_etype502, _size499) = iprot.readListBegin()
+          for _i503 in xrange(_size499):
+            _elem504 = iprot.readString();
+            self.success.append(_elem504)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10174,8 +10219,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter484 in self.success:
-        oprot.writeString(iter484)
+      for iter505 in self.success:
+        oprot.writeString(iter505)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10288,10 +10333,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype488, _size485) = iprot.readListBegin()
-          for _i489 in xrange(_size485):
-            _elem490 = iprot.readString();
-            self.success.append(_elem490)
+          (_etype509, _size506) = iprot.readListBegin()
+          for _i510 in xrange(_size506):
+            _elem511 = iprot.readString();
+            self.success.append(_elem511)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10314,8 +10359,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter491 in self.success:
-        oprot.writeString(iter491)
+      for iter512 in self.success:
+        oprot.writeString(iter512)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10532,10 +10577,10 @@ def read(self, iprot):
       elif fid == 2:
         if ftype == TType.LIST:
           self.tbl_names = []
-          (_etype495, _size492) = iprot.readListBegin()
-          for _i496 in xrange(_size492):
-            _elem497 = iprot.readString();
-            self.tbl_names.append(_elem497)
+          (_etype516, _size513) = iprot.readListBegin()
+          for _i517 in xrange(_size513):
+            _elem518 = iprot.readString();
+            self.tbl_names.append(_elem518)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10556,8 +10601,8 @@ def write(self, oprot):
     if self.tbl_names is not None:
       oprot.writeFieldBegin('tbl_names', TType.LIST, 2)
       oprot.writeListBegin(TType.STRING, len(self.tbl_names))
-      for iter498 in self.tbl_names:
-        oprot.writeString(iter498)
+      for iter519 in self.tbl_names:
+        oprot.writeString(iter519)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -10612,11 +10657,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype502, _size499) = iprot.readListBegin()
-          for _i503 in xrange(_size499):
-            _elem504 = Table()
-            _elem504.read(iprot)
-            self.success.append(_elem504)
+          (_etype523, _size520) = iprot.readListBegin()
+          for _i524 in xrange(_size520):
+            _elem525 = Table()
+            _elem525.read(iprot)
+            self.success.append(_elem525)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10651,8 +10696,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter505 in self.success:
-        iter505.write(oprot)
+      for iter526 in self.success:
+        iter526.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -10803,10 +10848,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype509, _size506) = iprot.readListBegin()
-          for _i510 in xrange(_size506):
-            _elem511 = iprot.readString();
-            self.success.append(_elem511)
+          (_etype530, _size527) = iprot.readListBegin()
+          for _i531 in xrange(_size527):
+            _elem532 = iprot.readString();
+            self.success.append(_elem532)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -10841,8 +10886,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter512 in self.success:
-        oprot.writeString(iter512)
+      for iter533 in self.success:
+        oprot.writeString(iter533)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -11736,11 +11781,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype516, _size513) = iprot.readListBegin()
-          for _i517 in xrange(_size513):
-            _elem518 = Partition()
-            _elem518.read(iprot)
-            self.new_parts.append(_elem518)
+          (_etype537, _size534) = iprot.readListBegin()
+          for _i538 in xrange(_size534):
+            _elem539 = Partition()
+            _elem539.read(iprot)
+            self.new_parts.append(_elem539)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11757,8 +11802,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 1)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter519 in self.new_parts:
-        iter519.write(oprot)
+      for iter540 in self.new_parts:
+        iter540.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -11903,11 +11948,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype523, _size520) = iprot.readListBegin()
-          for _i524 in xrange(_size520):
-            _elem525 = PartitionSpec()
-            _elem525.read(iprot)
-            self.new_parts.append(_elem525)
+          (_etype544, _size541) = iprot.readListBegin()
+          for _i545 in xrange(_size541):
+            _elem546 = PartitionSpec()
+            _elem546.read(iprot)
+            self.new_parts.append(_elem546)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -11924,8 +11969,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 1)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter526 in self.new_parts:
-        iter526.write(oprot)
+      for iter547 in self.new_parts:
+        iter547.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -12086,10 +12131,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype530, _size527) = iprot.readListBegin()
-          for _i531 in xrange(_size527):
-            _elem532 = iprot.readString();
-            self.part_vals.append(_elem532)
+          (_etype551, _size548) = iprot.readListBegin()
+          for _i552 in xrange(_size548):
+            _elem553 = iprot.readString();
+            self.part_vals.append(_elem553)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12114,8 +12159,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter533 in self.part_vals:
-        oprot.writeString(iter533)
+      for iter554 in self.part_vals:
+        oprot.writeString(iter554)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -12440,10 +12485,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype537, _size534) = iprot.readListBegin()
-          for _i538 in xrange(_size534):
-            _elem539 = iprot.readString();
-            self.part_vals.append(_elem539)
+          (_etype558, _size555) = iprot.readListBegin()
+          for _i559 in xrange(_size555):
+            _elem560 = iprot.readString();
+            self.part_vals.append(_elem560)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -12474,8 +12519,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter540 in self.part_vals:
-        oprot.writeString(iter540)
+      for iter561 in self.part_vals:
+        oprot.writeString(iter561)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.environment_context is not None:
@@ -13023,10 +13068,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype544, _size541) = iprot.readListBegin()
-          for _i545 in xrange(_size541):
-            _elem546 = iprot.readString();
-            self.part_vals.append(_elem546)
+          (_etype565, _size562) = iprot.readListBegin()
+          for _i566 in xrange(_size562):
+            _elem567 = iprot.readString();
+            self.part_vals.append(_elem567)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13056,8 +13101,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter547 in self.part_vals:
-        oprot.writeString(iter547)
+      for iter568 in self.part_vals:
+        oprot.writeString(iter568)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.deleteData is not None:
@@ -13215,10 +13260,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype551, _size548) = iprot.readListBegin()
-          for _i552 in xrange(_size548):
-            _elem553 = iprot.readString();
-            self.part_vals.append(_elem553)
+          (_etype572, _size569) = iprot.readListBegin()
+          for _i573 in xrange(_size569):
+            _elem574 = iprot.readString();
+            self.part_vals.append(_elem574)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13254,8 +13299,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter554 in self.part_vals:
-        oprot.writeString(iter554)
+      for iter575 in self.part_vals:
+        oprot.writeString(iter575)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.deleteData is not None:
@@ -13933,10 +13978,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype558, _size555) = iprot.readListBegin()
-          for _i559 in xrange(_size555):
-            _elem560 = iprot.readString();
-            self.part_vals.append(_elem560)
+          (_etype579, _size576) = iprot.readListBegin()
+          for _i580 in xrange(_size576):
+            _elem581 = iprot.readString();
+            self.part_vals.append(_elem581)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -13961,8 +14006,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter561 in self.part_vals:
-        oprot.writeString(iter561)
+      for iter582 in self.part_vals:
+        oprot.writeString(iter582)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -14107,11 +14152,11 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.MAP:
           self.partitionSpecs = {}
-          (_ktype563, _vtype564, _size562 ) = iprot.readMapBegin() 
-          for _i566 in xrange(_size562):
-            _key567 = iprot.readString();
-            _val568 = iprot.readString();
-            self.partitionSpecs[_key567] = _val568
+          (_ktype584, _vtype585, _size583 ) = iprot.readMapBegin() 
+          for _i587 in xrange(_size583):
+            _key588 = iprot.readString();
+            _val589 = iprot.readString();
+            self.partitionSpecs[_key588] = _val589
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -14148,9 +14193,9 @@ def write(self, oprot):
     if self.partitionSpecs is not None:
       oprot.writeFieldBegin('partitionSpecs', TType.MAP, 1)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.partitionSpecs))
-      for kiter569,viter570 in self.partitionSpecs.items():
-        oprot.writeString(kiter569)
-        oprot.writeString(viter570)
+      for kiter590,viter591 in self.partitionSpecs.items():
+        oprot.writeString(kiter590)
+        oprot.writeString(viter591)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.source_db is not None:
@@ -14347,10 +14392,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype574, _size571) = iprot.readListBegin()
-          for _i575 in xrange(_size571):
-            _elem576 = iprot.readString();
-            self.part_vals.append(_elem576)
+          (_etype595, _size592) = iprot.readListBegin()
+          for _i596 in xrange(_size592):
+            _elem597 = iprot.readString();
+            self.part_vals.append(_elem597)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14362,10 +14407,10 @@ def read(self, iprot):
       elif fid == 5:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype580, _size577) = iprot.readListBegin()
-          for _i581 in xrange(_size577):
-            _elem582 = iprot.readString();
-            self.group_names.append(_elem582)
+          (_etype601, _size598) = iprot.readListBegin()
+          for _i602 in xrange(_size598):
+            _elem603 = iprot.readString();
+            self.group_names.append(_elem603)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14390,8 +14435,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter583 in self.part_vals:
-        oprot.writeString(iter583)
+      for iter604 in self.part_vals:
+        oprot.writeString(iter604)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.user_name is not None:
@@ -14401,8 +14446,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 5)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter584 in self.group_names:
-        oprot.writeString(iter584)
+      for iter605 in self.group_names:
+        oprot.writeString(iter605)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -14794,11 +14839,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype588, _size585) = iprot.readListBegin()
-          for _i589 in xrange(_size585):
-            _elem590 = Partition()
-            _elem590.read(iprot)
-            self.success.append(_elem590)
+          (_etype609, _size606) = iprot.readListBegin()
+          for _i610 in xrange(_size606):
+            _elem611 = Partition()
+            _elem611.read(iprot)
+            self.success.append(_elem611)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14827,8 +14872,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter591 in self.success:
-        iter591.write(oprot)
+      for iter612 in self.success:
+        iter612.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -14915,10 +14960,10 @@ def read(self, iprot):
       elif fid == 5:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype595, _size592) = iprot.readListBegin()
-          for _i596 in xrange(_size592):
-            _elem597 = iprot.readString();
-            self.group_names.append(_elem597)
+          (_etype616, _size613) = iprot.readListBegin()
+          for _i617 in xrange(_size613):
+            _elem618 = iprot.readString();
+            self.group_names.append(_elem618)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -14951,8 +14996,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 5)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter598 in self.group_names:
-        oprot.writeString(iter598)
+      for iter619 in self.group_names:
+        oprot.writeString(iter619)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -15004,11 +15049,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype602, _size599) = iprot.readListBegin()
-          for _i603 in xrange(_size599):
-            _elem604 = Partition()
-            _elem604.read(iprot)
-            self.success.append(_elem604)
+          (_etype623, _size620) = iprot.readListBegin()
+          for _i624 in xrange(_size620):
+            _elem625 = Partition()
+            _elem625.read(iprot)
+            self.success.append(_elem625)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15037,8 +15082,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter605 in self.success:
-        iter605.write(oprot)
+      for iter626 in self.success:
+        iter626.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15182,11 +15227,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype609, _size606) = iprot.readListBegin()
-          for _i610 in xrange(_size606):
-            _elem611 = PartitionSpec()
-            _elem611.read(iprot)
-            self.success.append(_elem611)
+          (_etype630, _size627) = iprot.readListBegin()
+          for _i631 in xrange(_size627):
+            _elem632 = PartitionSpec()
+            _elem632.read(iprot)
+            self.success.append(_elem632)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15215,8 +15260,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter612 in self.success:
-        iter612.write(oprot)
+      for iter633 in self.success:
+        iter633.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15357,10 +15402,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype616, _size613) = iprot.readListBegin()
-          for _i617 in xrange(_size613):
-            _elem618 = iprot.readString();
-            self.success.append(_elem618)
+          (_etype637, _size634) = iprot.readListBegin()
+          for _i638 in xrange(_size634):
+            _elem639 = iprot.readString();
+            self.success.append(_elem639)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15383,8 +15428,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter619 in self.success:
-        oprot.writeString(iter619)
+      for iter640 in self.success:
+        oprot.writeString(iter640)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -15454,10 +15499,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype623, _size620) = iprot.readListBegin()
-          for _i624 in xrange(_size620):
-            _elem625 = iprot.readString();
-            self.part_vals.append(_elem625)
+          (_etype644, _size641) = iprot.readListBegin()
+          for _i645 in xrange(_size641):
+            _elem646 = iprot.readString();
+            self.part_vals.append(_elem646)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15487,8 +15532,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter626 in self.part_vals:
-        oprot.writeString(iter626)
+      for iter647 in self.part_vals:
+        oprot.writeString(iter647)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -15544,11 +15589,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype630, _size627) = iprot.readListBegin()
-          for _i631 in xrange(_size627):
-            _elem632 = Partition()
-            _elem632.read(iprot)
-            self.success.append(_elem632)
+          (_etype651, _size648) = iprot.readListBegin()
+          for _i652 in xrange(_size648):
+            _elem653 = Partition()
+            _elem653.read(iprot)
+            self.success.append(_elem653)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15577,8 +15622,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter633 in self.success:
-        iter633.write(oprot)
+      for iter654 in self.success:
+        iter654.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15658,10 +15703,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype637, _size634) = iprot.readListBegin()
-          for _i638 in xrange(_size634):
-            _elem639 = iprot.readString();
-            self.part_vals.append(_elem639)
+          (_etype658, _size655) = iprot.readListBegin()
+          for _i659 in xrange(_size655):
+            _elem660 = iprot.readString();
+            self.part_vals.append(_elem660)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15678,10 +15723,10 @@ def read(self, iprot):
       elif fid == 6:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype643, _size640) = iprot.readListBegin()
-          for _i644 in xrange(_size640):
-            _elem645 = iprot.readString();
-            self.group_names.append(_elem645)
+          (_etype664, _size661) = iprot.readListBegin()
+          for _i665 in xrange(_size661):
+            _elem666 = iprot.readString();
+            self.group_names.append(_elem666)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15706,8 +15751,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter646 in self.part_vals:
-        oprot.writeString(iter646)
+      for iter667 in self.part_vals:
+        oprot.writeString(iter667)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -15721,8 +15766,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 6)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter647 in self.group_names:
-        oprot.writeString(iter647)
+      for iter668 in self.group_names:
+        oprot.writeString(iter668)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -15774,11 +15819,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype651, _size648) = iprot.readListBegin()
-          for _i652 in xrange(_size648):
-            _elem653 = Partition()
-            _elem653.read(iprot)
-            self.success.append(_elem653)
+          (_etype672, _size669) = iprot.readListBegin()
+          for _i673 in xrange(_size669):
+            _elem674 = Partition()
+            _elem674.read(iprot)
+            self.success.append(_elem674)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15807,8 +15852,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter654 in self.success:
-        iter654.write(oprot)
+      for iter675 in self.success:
+        iter675.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -15882,10 +15927,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype658, _size655) = iprot.readListBegin()
-          for _i659 in xrange(_size655):
-            _elem660 = iprot.readString();
-            self.part_vals.append(_elem660)
+          (_etype679, _size676) = iprot.readListBegin()
+          for _i680 in xrange(_size676):
+            _elem681 = iprot.readString();
+            self.part_vals.append(_elem681)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -15915,8 +15960,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter661 in self.part_vals:
-        oprot.writeString(iter661)
+      for iter682 in self.part_vals:
+        oprot.writeString(iter682)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.max_parts is not None:
@@ -15972,10 +16017,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype665, _size662) = iprot.readListBegin()
-          for _i666 in xrange(_size662):
-            _elem667 = iprot.readString();
-            self.success.append(_elem667)
+          (_etype686, _size683) = iprot.readListBegin()
+          for _i687 in xrange(_size683):
+            _elem688 = iprot.readString();
+            self.success.append(_elem688)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16004,8 +16049,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter668 in self.success:
-        oprot.writeString(iter668)
+      for iter689 in self.success:
+        oprot.writeString(iter689)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16161,11 +16206,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype672, _size669) = iprot.readListBegin()
-          for _i673 in xrange(_size669):
-            _elem674 = Partition()
-            _elem674.read(iprot)
-            self.success.append(_elem674)
+          (_etype693, _size690) = iprot.readListBegin()
+          for _i694 in xrange(_size690):
+            _elem695 = Partition()
+            _elem695.read(iprot)
+            self.success.append(_elem695)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16194,8 +16239,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter675 in self.success:
-        iter675.write(oprot)
+      for iter696 in self.success:
+        iter696.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16351,11 +16396,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype679, _size676) = iprot.readListBegin()
-          for _i680 in xrange(_size676):
-            _elem681 = PartitionSpec()
-            _elem681.read(iprot)
-            self.success.append(_elem681)
+          (_etype700, _size697) = iprot.readListBegin()
+          for _i701 in xrange(_size697):
+            _elem702 = PartitionSpec()
+            _elem702.read(iprot)
+            self.success.append(_elem702)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16384,8 +16429,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter682 in self.success:
-        iter682.write(oprot)
+      for iter703 in self.success:
+        iter703.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16603,10 +16648,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.names = []
-          (_etype686, _size683) = iprot.readListBegin()
-          for _i687 in xrange(_size683):
-            _elem688 = iprot.readString();
-            self.names.append(_elem688)
+          (_etype707, _size704) = iprot.readListBegin()
+          for _i708 in xrange(_size704):
+            _elem709 = iprot.readString();
+            self.names.append(_elem709)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16631,8 +16676,8 @@ def write(self, oprot):
     if self.names is not None:
       oprot.writeFieldBegin('names', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.names))
-      for iter689 in self.names:
-        oprot.writeString(iter689)
+      for iter710 in self.names:
+        oprot.writeString(iter710)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -16684,11 +16729,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype693, _size690) = iprot.readListBegin()
-          for _i694 in xrange(_size690):
-            _elem695 = Partition()
-            _elem695.read(iprot)
-            self.success.append(_elem695)
+          (_etype714, _size711) = iprot.readListBegin()
+          for _i715 in xrange(_size711):
+            _elem716 = Partition()
+            _elem716.read(iprot)
+            self.success.append(_elem716)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16717,8 +16762,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter696 in self.success:
-        iter696.write(oprot)
+      for iter717 in self.success:
+        iter717.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -16948,11 +16993,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.new_parts = []
-          (_etype700, _size697) = iprot.readListBegin()
-          for _i701 in xrange(_size697):
-            _elem702 = Partition()
-            _elem702.read(iprot)
-            self.new_parts.append(_elem702)
+          (_etype721, _size718) = iprot.readListBegin()
+          for _i722 in xrange(_size718):
+            _elem723 = Partition()
+            _elem723.read(iprot)
+            self.new_parts.append(_elem723)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -16977,8 +17022,8 @@ def write(self, oprot):
     if self.new_parts is not None:
       oprot.writeFieldBegin('new_parts', TType.LIST, 3)
       oprot.writeListBegin(TType.STRUCT, len(self.new_parts))
-      for iter703 in self.new_parts:
-        iter703.write(oprot)
+      for iter724 in self.new_parts:
+        iter724.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -17290,10 +17335,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype707, _size704) = iprot.readListBegin()
-          for _i708 in xrange(_size704):
-            _elem709 = iprot.readString();
-            self.part_vals.append(_elem709)
+          (_etype728, _size725) = iprot.readListBegin()
+          for _i729 in xrange(_size725):
+            _elem730 = iprot.readString();
+            self.part_vals.append(_elem730)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17324,8 +17369,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter710 in self.part_vals:
-        oprot.writeString(iter710)
+      for iter731 in self.part_vals:
+        oprot.writeString(iter731)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.new_part is not None:
@@ -17453,10 +17498,10 @@ def read(self, iprot):
       if fid == 1:
         if ftype == TType.LIST:
           self.part_vals = []
-          (_etype714, _size711) = iprot.readListBegin()
-          for _i715 in xrange(_size711):
-            _elem716 = iprot.readString();
-            self.part_vals.append(_elem716)
+          (_etype735, _size732) = iprot.readListBegin()
+          for _i736 in xrange(_size732):
+            _elem737 = iprot.readString();
+            self.part_vals.append(_elem737)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17478,8 +17523,8 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.LIST, 1)
       oprot.writeListBegin(TType.STRING, len(self.part_vals))
-      for iter717 in self.part_vals:
-        oprot.writeString(iter717)
+      for iter738 in self.part_vals:
+        oprot.writeString(iter738)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.throw_exception is not None:
@@ -17808,10 +17853,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype721, _size718) = iprot.readListBegin()
-          for _i722 in xrange(_size718):
-            _elem723 = iprot.readString();
-            self.success.append(_elem723)
+          (_etype742, _size739) = iprot.readListBegin()
+          for _i743 in xrange(_size739):
+            _elem744 = iprot.readString();
+            self.success.append(_elem744)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -17834,8 +17879,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter724 in self.success:
-        oprot.writeString(iter724)
+      for iter745 in self.success:
+        oprot.writeString(iter745)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -17948,11 +17993,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.MAP:
           self.success = {}
-          (_ktype726, _vtype727, _size725 ) = iprot.readMapBegin() 
-          for _i729 in xrange(_size725):
-            _key730 = iprot.readString();
-            _val731 = iprot.readString();
-            self.success[_key730] = _val731
+          (_ktype747, _vtype748, _size746 ) = iprot.readMapBegin() 
+          for _i750 in xrange(_size746):
+            _key751 = iprot.readString();
+            _val752 = iprot.readString();
+            self.success[_key751] = _val752
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -17975,9 +18020,9 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.MAP, 0)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
-      for kiter732,viter733 in self.success.items():
-        oprot.writeString(kiter732)
-        oprot.writeString(viter733)
+      for kiter753,viter754 in self.success.items():
+        oprot.writeString(kiter753)
+        oprot.writeString(viter754)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -18047,11 +18092,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.MAP:
           self.part_vals = {}
-          (_ktype735, _vtype736, _size734 ) = iprot.readMapBegin() 
-          for _i738 in xrange(_size734):
-            _key739 = iprot.readString();
-            _val740 = iprot.readString();
-            self.part_vals[_key739] = _val740
+          (_ktype756, _vtype757, _size755 ) = iprot.readMapBegin() 
+          for _i759 in xrange(_size755):
+            _key760 = iprot.readString();
+            _val761 = iprot.readString();
+            self.part_vals[_key760] = _val761
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -18081,9 +18126,9 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.MAP, 3)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.part_vals))
-      for kiter741,viter742 in self.part_vals.items():
-        oprot.writeString(kiter741)
-        oprot.writeString(viter742)
+      for kiter762,viter763 in self.part_vals.items():
+        oprot.writeString(kiter762)
+        oprot.writeString(viter763)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.eventType is not None:
@@ -18279,11 +18324,11 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.MAP:
           self.part_vals = {}
-          (_ktype744, _vtype745, _size743 ) = iprot.readMapBegin() 
-          for _i747 in xrange(_size743):
-            _key748 = iprot.readString();
-            _val749 = iprot.readString();
-            self.part_vals[_key748] = _val749
+          (_ktype765, _vtype766, _size764 ) = iprot.readMapBegin() 
+          for _i768 in xrange(_size764):
+            _key769 = iprot.readString();
+            _val770 = iprot.readString();
+            self.part_vals[_key769] = _val770
           iprot.readMapEnd()
         else:
           iprot.skip(ftype)
@@ -18313,9 +18358,9 @@ def write(self, oprot):
     if self.part_vals is not None:
       oprot.writeFieldBegin('part_vals', TType.MAP, 3)
       oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.part_vals))
-      for kiter750,viter751 in self.part_vals.items():
-        oprot.writeString(kiter750)
-        oprot.writeString(viter751)
+      for kiter771,viter772 in self.part_vals.items():
+        oprot.writeString(kiter771)
+        oprot.writeString(viter772)
       oprot.writeMapEnd()
       oprot.writeFieldEnd()
     if self.eventType is not None:
@@ -19287,11 +19332,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype755, _size752) = iprot.readListBegin()
-          for _i756 in xrange(_size752):
-            _elem757 = Index()
-            _elem757.read(iprot)
-            self.success.append(_elem757)
+          (_etype776, _size773) = iprot.readListBegin()
+          for _i777 in xrange(_size773):
+            _elem778 = Index()
+            _elem778.read(iprot)
+            self.success.append(_elem778)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -19320,8 +19365,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter758 in self.success:
-        iter758.write(oprot)
+      for iter779 in self.success:
+        iter779.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -19462,10 +19507,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype762, _size759) = iprot.readListBegin()
-          for _i763 in xrange(_size759):
-            _elem764 = iprot.readString();
-            self.success.append(_elem764)
+          (_etype783, _size780) = iprot.readListBegin()
+          for _i784 in xrange(_size780):
+            _elem785 = iprot.readString();
+            self.success.append(_elem785)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -19488,8 +19533,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter765 in self.success:
-        oprot.writeString(iter765)
+      for iter786 in self.success:
+        oprot.writeString(iter786)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o2 is not None:
@@ -21843,10 +21888,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype769, _size766) = iprot.readListBegin()
-          for _i770 in xrange(_size766):
-            _elem771 = iprot.readString();
-            self.success.append(_elem771)
+          (_etype790, _size787) = iprot.readListBegin()
+          for _i791 in xrange(_size787):
+            _elem792 = iprot.readString();
+            self.success.append(_elem792)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -21869,8 +21914,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter772 in self.success:
-        oprot.writeString(iter772)
+      for iter793 in self.success:
+        oprot.writeString(iter793)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -22053,6 +22098,121 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
+class get_all_functions_args:
+
+  thrift_spec = (
+  )
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_all_functions_args')
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_all_functions_result:
+  """
+  Attributes:
+   - success
+   - o1
+  """
+
+  thrift_spec = (
+    (0, TType.STRUCT, 'success', (GetAllFunctionsResponse, GetAllFunctionsResponse.thrift_spec), None, ), # 0
+    (1, TType.STRUCT, 'o1', (MetaException, MetaException.thrift_spec), None, ), # 1
+  )
+
+  def __init__(self, success=None, o1=None,):
+    self.success = success
+    self.o1 = o1
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.STRUCT:
+          self.success = GetAllFunctionsResponse()
+          self.success.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 1:
+        if ftype == TType.STRUCT:
+          self.o1 = MetaException()
+          self.o1.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_all_functions_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.STRUCT, 0)
+      self.success.write(oprot)
+      oprot.writeFieldEnd()
+    if self.o1 is not None:
+      oprot.writeFieldBegin('o1', TType.STRUCT, 1)
+      self.o1.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
 class create_role_args:
   """
   Attributes:
@@ -22388,10 +22548,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype776, _size773) = iprot.readListBegin()
-          for _i777 in xrange(_size773):
-            _elem778 = iprot.readString();
-            self.success.append(_elem778)
+          (_etype797, _size794) = iprot.readListBegin()
+          for _i798 in xrange(_size794):
+            _elem799 = iprot.readString();
+            self.success.append(_elem799)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -22414,8 +22574,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter779 in self.success:
-        oprot.writeString(iter779)
+      for iter800 in self.success:
+        oprot.writeString(iter800)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -22888,11 +23048,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype783, _size780) = iprot.readListBegin()
-          for _i784 in xrange(_size780):
-            _elem785 = Role()
-            _elem785.read(iprot)
-            self.success.append(_elem785)
+          (_etype804, _size801) = iprot.readListBegin()
+          for _i805 in xrange(_size801):
+            _elem806 = Role()
+            _elem806.read(iprot)
+            self.success.append(_elem806)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -22915,8 +23075,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter786 in self.success:
-        iter786.write(oprot)
+      for iter807 in self.success:
+        iter807.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -23386,10 +23546,10 @@ def read(self, iprot):
       elif fid == 3:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype790, _size787) = iprot.readListBegin()
-          for _i791 in xrange(_size787):
-            _elem792 = iprot.readString();
-            self.group_names.append(_elem792)
+          (_etype811, _size808) = iprot.readListBegin()
+          for _i812 in xrange(_size808):
+            _elem813 = iprot.readString();
+            self.group_names.append(_elem813)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -23414,8 +23574,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 3)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter793 in self.group_names:
-        oprot.writeString(iter793)
+      for iter814 in self.group_names:
+        oprot.writeString(iter814)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -23622,11 +23782,11 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype797, _size794) = iprot.readListBegin()
-          for _i798 in xrange(_size794):
-            _elem799 = HiveObjectPrivilege()
-            _elem799.read(iprot)
-            self.success.append(_elem799)
+          (_etype818, _size815) = iprot.readListBegin()
+          for _i819 in xrange(_size815):
+            _elem820 = HiveObjectPrivilege()
+            _elem820.read(iprot)
+            self.success.append(_elem820)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -23649,8 +23809,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRUCT, len(self.success))
-      for iter800 in self.success:
-        iter800.write(oprot)
+      for iter821 in self.success:
+        iter821.write(oprot)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
@@ -24109,10 +24269,10 @@ def read(self, iprot):
       elif fid == 2:
         if ftype == TType.LIST:
           self.group_names = []
-          (_etype804, _size801) = iprot.readListBegin()
-          for _i805 in xrange(_size801):
-            _elem806 = iprot.readString();
-            self.group_names.append(_elem806)
+          (_etype825, _size822) = iprot.readListBegin()
+          for _i826 in xrange(_size822):
+            _elem827 = iprot.readString();
+            self.group_names.append(_elem827)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -24133,8 +24293,8 @@ def write(self, oprot):
     if self.group_names is not None:
       oprot.writeFieldBegin('group_names', TType.LIST, 2)
       oprot.writeListBegin(TType.STRING, len(self.group_names))
-      for iter807 in self.group_names:
-        oprot.writeString(iter807)
+      for iter828 in self.group_names:
+        oprot.writeString(iter828)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     oprot.writeFieldStop()
@@ -24183,10 +24343,10 @@ def read(self, iprot):
       if fid == 0:
         if ftype == TType.LIST:
           self.success = []
-          (_etype811, _size808) = iprot.readListBegin()
-          for _i812 in xrange(_size808):
-            _elem813 = iprot.readString();
-            self.success.append(_elem813)
+          (_etype832, _size829) = iprot.readListBegin()
+          for _i833 in xrange(_size829):
+            _elem834 = iprot.readString();
+            self.success.append(_elem834)
           iprot.readListEnd()
         else:
           iprot.skip(ftype)
@@ -24209,8 +24369,8 @@ def write(self, oprot):
     if self.success is not None:
       oprot.writeFieldBegin('success', TType.LIST, 0)
       oprot.writeListBegin(TType.STRING, len(self.success))
-      for iter814 in self.success:
-        oprot.writeString(iter814)
+      for iter835 in self.success:
+        oprot.writeString(iter835)
       oprot.writeListEnd()
       oprot.writeFieldEnd()
     if self.o1 is not None:
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py
index c832846..f910a4c 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ttypes.py
@@ -8478,6 +8478,369 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
+class InsertEventRequestData:
+  """
+  Attributes:
+   - filesAdded
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.LIST, 'filesAdded', (TType.STRING,None), None, ), # 1
+  )
+
+  def __init__(self, filesAdded=None,):
+    self.filesAdded = filesAdded
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.LIST:
+          self.filesAdded = []
+          (_etype444, _size441) = iprot.readListBegin()
+          for _i445 in xrange(_size441):
+            _elem446 = iprot.readString();
+            self.filesAdded.append(_elem446)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('InsertEventRequestData')
+    if self.filesAdded is not None:
+      oprot.writeFieldBegin('filesAdded', TType.LIST, 1)
+      oprot.writeListBegin(TType.STRING, len(self.filesAdded))
+      for iter447 in self.filesAdded:
+        oprot.writeString(iter447)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    if self.filesAdded is None:
+      raise TProtocol.TProtocolException(message='Required field filesAdded is unset!')
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class FireEventRequestData:
+  """
+  Attributes:
+   - insertData
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRUCT, 'insertData', (InsertEventRequestData, InsertEventRequestData.thrift_spec), None, ), # 1
+  )
+
+  def __init__(self, insertData=None,):
+    self.insertData = insertData
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRUCT:
+          self.insertData = InsertEventRequestData()
+          self.insertData.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('FireEventRequestData')
+    if self.insertData is not None:
+      oprot.writeFieldBegin('insertData', TType.STRUCT, 1)
+      self.insertData.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class FireEventRequest:
+  """
+  Attributes:
+   - successful
+   - data
+   - dbName
+   - tableName
+   - partitionVals
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.BOOL, 'successful', None, None, ), # 1
+    (2, TType.STRUCT, 'data', (FireEventRequestData, FireEventRequestData.thrift_spec), None, ), # 2
+    (3, TType.STRING, 'dbName', None, None, ), # 3
+    (4, TType.STRING, 'tableName', None, None, ), # 4
+    (5, TType.LIST, 'partitionVals', (TType.STRING,None), None, ), # 5
+  )
+
+  def __init__(self, successful=None, data=None, dbName=None, tableName=None, partitionVals=None,):
+    self.successful = successful
+    self.data = data
+    self.dbName = dbName
+    self.tableName = tableName
+    self.partitionVals = partitionVals
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.BOOL:
+          self.successful = iprot.readBool();
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRUCT:
+          self.data = FireEventRequestData()
+          self.data.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 3:
+        if ftype == TType.STRING:
+          self.dbName = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 4:
+        if ftype == TType.STRING:
+          self.tableName = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 5:
+        if ftype == TType.LIST:
+          self.partitionVals = []
+          (_etype451, _size448) = iprot.readListBegin()
+          for _i452 in xrange(_size448):
+            _elem453 = iprot.readString();
+            self.partitionVals.append(_elem453)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('FireEventRequest')
+    if self.successful is not None:
+      oprot.writeFieldBegin('successful', TType.BOOL, 1)
+      oprot.writeBool(self.successful)
+      oprot.writeFieldEnd()
+    if self.data is not None:
+      oprot.writeFieldBegin('data', TType.STRUCT, 2)
+      self.data.write(oprot)
+      oprot.writeFieldEnd()
+    if self.dbName is not None:
+      oprot.writeFieldBegin('dbName', TType.STRING, 3)
+      oprot.writeString(self.dbName)
+      oprot.writeFieldEnd()
+    if self.tableName is not None:
+      oprot.writeFieldBegin('tableName', TType.STRING, 4)
+      oprot.writeString(self.tableName)
+      oprot.writeFieldEnd()
+    if self.partitionVals is not None:
+      oprot.writeFieldBegin('partitionVals', TType.LIST, 5)
+      oprot.writeListBegin(TType.STRING, len(self.partitionVals))
+      for iter454 in self.partitionVals:
+        oprot.writeString(iter454)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    if self.successful is None:
+      raise TProtocol.TProtocolException(message='Required field successful is unset!')
+    if self.data is None:
+      raise TProtocol.TProtocolException(message='Required field data is unset!')
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class FireEventResponse:
+
+  thrift_spec = (
+  )
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('FireEventResponse')
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class GetAllFunctionsResponse:
+  """
+  Attributes:
+   - functions
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.LIST, 'functions', (TType.STRUCT,(Function, Function.thrift_spec)), None, ), # 1
+  )
+
+  def __init__(self, functions=None,):
+    self.functions = functions
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.LIST:
+          self.functions = []
+          (_etype458, _size455) = iprot.readListBegin()
+          for _i459 in xrange(_size455):
+            _elem460 = Function()
+            _elem460.read(iprot)
+            self.functions.append(_elem460)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('GetAllFunctionsResponse')
+    if self.functions is not None:
+      oprot.writeFieldBegin('functions', TType.LIST, 1)
+      oprot.writeListBegin(TType.STRUCT, len(self.functions))
+      for iter461 in self.functions:
+        iter461.write(oprot)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
 class MetaException(TException):
   """
   Attributes:
diff --git a/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb b/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
index fc1ba28..cffaf94 100644
--- a/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
+++ b/metastore/src/gen/thrift/gen-rb/hive_metastore_types.rb
@@ -2069,6 +2069,103 @@ class CurrentNotificationEventId
   ::Thrift::Struct.generate_accessors self
 end
 
+class InsertEventRequestData
+  include ::Thrift::Struct, ::Thrift::Struct_Union
+  FILESADDED = 1
+
+  FIELDS = {
+    FILESADDED => {:type => ::Thrift::Types::LIST, :name => 'filesAdded', :element => {:type => ::Thrift::Types::STRING}}
+  }
+
+  def struct_fields; FIELDS; end
+
+  def validate
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field filesAdded is unset!') unless @filesAdded
+  end
+
+  ::Thrift::Struct.generate_accessors self
+end
+
+class FireEventRequestData < ::Thrift::Union
+  include ::Thrift::Struct_Union
+  class << self
+    def insertData(val)
+      FireEventRequestData.new(:insertData, val)
+    end
+  end
+
+  INSERTDATA = 1
+
+  FIELDS = {
+    INSERTDATA => {:type => ::Thrift::Types::STRUCT, :name => 'insertData', :class => ::InsertEventRequestData}
+  }
+
+  def struct_fields; FIELDS; end
+
+  def validate
+    raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
+  end
+
+  ::Thrift::Union.generate_accessors self
+end
+
+class FireEventRequest
+  include ::Thrift::Struct, ::Thrift::Struct_Union
+  SUCCESSFUL = 1
+  DATA = 2
+  DBNAME = 3
+  TABLENAME = 4
+  PARTITIONVALS = 5
+
+  FIELDS = {
+    SUCCESSFUL => {:type => ::Thrift::Types::BOOL, :name => 'successful'},
+    DATA => {:type => ::Thrift::Types::STRUCT, :name => 'data', :class => ::FireEventRequestData},
+    DBNAME => {:type => ::Thrift::Types::STRING, :name => 'dbName', :optional => true},
+    TABLENAME => {:type => ::Thrift::Types::STRING, :name => 'tableName', :optional => true},
+    PARTITIONVALS => {:type => ::Thrift::Types::LIST, :name => 'partitionVals', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
+  }
+
+  def struct_fields; FIELDS; end
+
+  def validate
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field successful is unset!') if @successful.nil?
+    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field data is unset!') unless @data
+  end
+
+  ::Thrift::Struct.generate_accessors self
+end
+
+class FireEventResponse
+  include ::Thrift::Struct, ::Thrift::Struct_Union
+
+  FIELDS = {
+
+  }
+
+  def struct_fields; FIELDS; end
+
+  def validate
+  end
+
+  ::Thrift::Struct.generate_accessors self
+end
+
+class GetAllFunctionsResponse
+  include ::Thrift::Struct, ::Thrift::Struct_Union
+  FUNCTIONS = 1
+
+  FIELDS = {
+    FUNCTIONS => {:type => ::Thrift::Types::LIST, :name => 'functions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Function}, :optional => true}
+  }
+
+  def struct_fields; FIELDS; end
+
+  def validate
+  end
+
+  ::Thrift::Struct.generate_accessors self
+end
+
 class MetaException < ::Thrift::Exception
   include ::Thrift::Struct, ::Thrift::Struct_Union
   def initialize(message=nil)
diff --git a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
index a383e0b..cfcf58f 100644
--- a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
+++ b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
@@ -1487,6 +1487,22 @@ module ThriftHiveMetastore
       raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_function failed: unknown result')
     end
 
+    def get_all_functions()
+      send_get_all_functions()
+      return recv_get_all_functions()
+    end
+
+    def send_get_all_functions()
+      send_message('get_all_functions', Get_all_functions_args)
+    end
+
+    def recv_get_all_functions()
+      result = receive_message(Get_all_functions_result)
+      return result.success unless result.success.nil?
+      raise result.o1 unless result.o1.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_functions failed: unknown result')
+    end
+
     def create_role(role)
       send_create_role(role)
       return recv_create_role()
@@ -3196,6 +3212,17 @@ module ThriftHiveMetastore
       write_result(result, oprot, 'get_function', seqid)
     end
 
+    def process_get_all_functions(seqid, iprot, oprot)
+      args = read_args(iprot, Get_all_functions_args)
+      result = Get_all_functions_result.new()
+      begin
+        result.success = @handler.get_all_functions()
+      rescue ::MetaException => o1
+        result.o1 = o1
+      end
+      write_result(result, oprot, 'get_all_functions', seqid)
+    end
+
     def process_create_role(seqid, iprot, oprot)
       args = read_args(iprot, Create_role_args)
       result = Create_role_result.new()
@@ -6942,6 +6969,39 @@ module ThriftHiveMetastore
     ::Thrift::Struct.generate_accessors self
   end
 
+  class Get_all_functions_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+
+    FIELDS = {
+
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_all_functions_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+    O1 = 1
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetAllFunctionsResponse},
+      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
   class Create_role_args
     include ::Thrift::Struct, ::Thrift::Struct_Union
     ROLE = 1
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index e19bbcc..3e3171c 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -86,6 +86,7 @@
 import org.apache.hadoop.hive.metastore.api.EnvironmentContext;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
 import org.apache.hadoop.hive.metastore.api.Function;
+import org.apache.hadoop.hive.metastore.api.GetAllFunctionsResponse;
 import org.apache.hadoop.hive.metastore.api.GetOpenTxnsInfoResponse;
 import org.apache.hadoop.hive.metastore.api.GetOpenTxnsResponse;
 import org.apache.hadoop.hive.metastore.api.GetPrincipalsInRoleRequest;
@@ -5413,6 +5414,26 @@ public void alter_function(String dbName, String funcName, Function newFunc)
     }
 
     @Override
+    public GetAllFunctionsResponse get_all_functions()
+            throws MetaException {
+      GetAllFunctionsResponse response = new GetAllFunctionsResponse();
+      startFunction("get_all_functions");
+      RawStore ms = getMS();
+      List<Function> allFunctions = null;
+      Exception ex = null;
+      try {
+        allFunctions = ms.getAllFunctions();
+      } catch (Exception e) {
+        ex = e;
+        throw newMetaException(e);
+      } finally {
+        endFunction("get_all_functions", allFunctions != null, ex);
+      }
+      response.setFunctions(allFunctions);
+      return response;
+    }
+
+    @Override
     public Function get_function(String dbName, String funcName)
         throws MetaException, NoSuchObjectException, TException {
       startFunction("get_function", ": " + dbName + "." + funcName);
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
index 97e5afb..02788ea 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
@@ -72,6 +72,7 @@
 import org.apache.hadoop.hive.metastore.api.EnvironmentContext;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
 import org.apache.hadoop.hive.metastore.api.Function;
+import org.apache.hadoop.hive.metastore.api.GetAllFunctionsResponse;
 import org.apache.hadoop.hive.metastore.api.GetOpenTxnsInfoResponse;
 import org.apache.hadoop.hive.metastore.api.GetPrincipalsInRoleRequest;
 import org.apache.hadoop.hive.metastore.api.GetPrincipalsInRoleResponse;
@@ -1965,6 +1966,12 @@ public Function getFunction(String dbName, String funcName)
     return client.get_functions(dbName, pattern);
   }
 
+  @Override
+  public GetAllFunctionsResponse getAllFunctions()
+          throws MetaException, TException {
+    return client.get_all_functions();
+  }
+
   protected void create_table_with_environment_context(Table tbl, EnvironmentContext envContext)
       throws AlreadyExistsException, InvalidObjectException,
       MetaException, NoSuchObjectException, TException {
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
index 0deb97a..a5c5d2c 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
@@ -36,6 +36,7 @@
 import org.apache.hadoop.hive.metastore.api.Database;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
 import org.apache.hadoop.hive.metastore.api.Function;
+import org.apache.hadoop.hive.metastore.api.GetAllFunctionsResponse;
 import org.apache.hadoop.hive.metastore.api.GetOpenTxnsInfoResponse;
 import org.apache.hadoop.hive.metastore.api.GetPrincipalsInRoleRequest;
 import org.apache.hadoop.hive.metastore.api.GetPrincipalsInRoleResponse;
@@ -1086,6 +1087,9 @@ Function getFunction(String dbName, String funcName)
   List<String> getFunctions(String dbName, String pattern)
       throws MetaException, TException;
 
+  GetAllFunctionsResponse getAllFunctions()
+          throws MetaException, TException;
+
   /**
    * Get a structure that details valid transactions.
    * @return list of valid transactions
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index 5d1ac62..d64ccdf 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -7073,6 +7073,17 @@ private Function convertToFunction(MFunction mfunc) {
     return func;
   }
 
+  private List<Function> convertToFunctions(List<MFunction> mfuncs) {
+    if (mfuncs == null) {
+      return null;
+    }
+    List<Function> functions = new ArrayList<>();
+    for (MFunction mfunc : mfuncs) {
+      functions.add(convertToFunction(mfunc));
+    }
+    return functions;
+  }
+
   private MFunction convertToMFunction(Function func) throws InvalidObjectException {
     if (func == null) {
       return null;
@@ -7232,6 +7243,23 @@ public Function getFunction(String dbName, String funcName) throws MetaException
   }
 
   @Override
+  public List<Function> getAllFunctions() throws MetaException {
+    boolean commited = false;
+    try {
+      openTransaction();
+      Query query = pm.newQuery(MFunction.class);
+      List<MFunction> allFunctions = (List<MFunction>) query.execute();
+      pm.retrieveAll(allFunctions);
+      commited = commitTransaction();
+      return convertToFunctions(allFunctions);
+    } finally {
+      if (!commited) {
+        rollbackTransaction();
+      }
+    }
+  }
+
+  @Override
   public List<String> getFunctions(String dbName, String pattern) throws MetaException {
     boolean commited = false;
     Query query = null;
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java
index 2b49eab..7c85eea 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/RawStore.java
@@ -551,6 +551,13 @@ public void dropFunction(String dbName, String funcName)
   public Function getFunction(String dbName, String funcName) throws MetaException;
 
   /**
+   * Retrieve all functions.
+   * @return
+   * @throws MetaException
+   */
+  public List<Function> getAllFunctions() throws MetaException;
+
+  /**
    * Retrieve list of function names based on name pattern.
    * @param dbName
    * @param pattern
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java
index cf068e4..f184c56 100644
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreControlledCommit.java
@@ -19,6 +19,7 @@
 package org.apache.hadoop.hive.metastore;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.SortedSet;
@@ -719,6 +720,12 @@ public Function getFunction(String dbName, String funcName)
   }
 
   @Override
+  public List<Function> getAllFunctions()
+          throws MetaException {
+    return Collections.emptyList();
+  }
+
+  @Override
   public List<String> getFunctions(String dbName, String pattern)
       throws MetaException {
     return objectStore.getFunctions(dbName, pattern);
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java
index ccf928a..83fb4bb 100644
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/DummyRawStoreForJdoConnection.java
@@ -733,6 +733,12 @@ public Function getFunction(String dbName, String funcName)
   }
 
   @Override
+  public List<Function> getAllFunctions()
+          throws MetaException {
+    return Collections.emptyList();
+  }
+
+  @Override
   public List<String> getFunctions(String dbName, String pattern)
       throws MetaException {
     return Collections.emptyList();
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java b/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java
index 8019d52..c64e55a 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/metadata/Hive.java
@@ -165,17 +165,16 @@ public synchronized void remove() {
 
   public static void reloadFunctions() throws HiveException {
     Hive db = Hive.get();
-    for (String dbName : db.getAllDatabases()) {
-      for (String functionName : db.getFunctions(dbName, "*")) {
-        Function function = db.getFunction(dbName, functionName);
-        try {
-	  FunctionRegistry.registerPermanentFunction(
-	      FunctionUtils.qualifyFunctionName(functionName, dbName), function.getClassName(),
-	      false, FunctionTask.toFunctionResource(function.getResourceUris()));
-        } catch (Exception e) {
-          LOG.warn("Failed to register persistent function " +
-              functionName + ":" + function.getClassName() + ". Ignore and continue.");
-        }
+    for (Function function : db.getAllFunctions()) {
+      String functionName = function.getFunctionName();
+      try {
+        LOG.info("Registering function " + functionName + " " + function.getClassName());
+        FunctionRegistry.registerPermanentFunction(
+                FunctionUtils.qualifyFunctionName(functionName, function.getDbName()), function.getClassName(),
+                false, FunctionTask.toFunctionResource(function.getResourceUris()));
+      } catch (Exception e) {
+        LOG.warn("Failed to register persistent function " +
+                functionName + ":" + function.getClassName() + ". Ignore and continue.");
       }
     }
   }
@@ -3152,6 +3151,15 @@ public Function getFunction(String dbName, String funcName) throws HiveException
     }
   }
 
+  public List<Function> getAllFunctions() throws HiveException {
+    try {
+      List<Function> functions = getMSC().getAllFunctions().getFunctions();
+      return functions == null ? new ArrayList<Function>() : functions;
+    } catch (TException te) {
+      throw new HiveException(te);
+    }
+  }
+
   public List<String> getFunctions(String dbName, String pattern) throws HiveException {
     try {
       return getMSC().getFunctions(dbName, pattern);
diff --git a/serde/if/serde.thrift b/serde/if/serde.thrift
index 76f95b5..2db27b5 100644
--- a/serde/if/serde.thrift
+++ b/serde/if/serde.thrift
@@ -69,6 +69,8 @@ const string UNION_TYPE_NAME  = "uniontype";
 const string LIST_COLUMNS = "columns";
 const string LIST_COLUMN_TYPES = "columns.types";
 
+const string TIMESTAMP_FORMATS = "timestamp.formats";
+
 const set<string> PrimitiveTypes  = [ VOID_TYPE_NAME BOOLEAN_TYPE_NAME TINYINT_TYPE_NAME SMALLINT_TYPE_NAME INT_TYPE_NAME BIGINT_TYPE_NAME FLOAT_TYPE_NAME DOUBLE_TYPE_NAME STRING_TYPE_NAME  VARCHAR_TYPE_NAME CHAR_TYPE_NAME DATE_TYPE_NAME DATETIME_TYPE_NAME TIMESTAMP_TYPE_NAME DECIMAL_TYPE_NAME BINARY_TYPE_NAME],
 const set<string> CollectionTypes = [ LIST_TYPE_NAME MAP_TYPE_NAME ],
 const set<string> IntegralTypes = [ TINYINT_TYPE_NAME SMALLINT_TYPE_NAME INT_TYPE_NAME BIGINT_TYPE_NAME ],
diff --git a/serde/src/gen/thrift/gen-cpp/serde_constants.cpp b/serde/src/gen/thrift/gen-cpp/serde_constants.cpp
index bd5c16d..cc71b65 100644
--- a/serde/src/gen/thrift/gen-cpp/serde_constants.cpp
+++ b/serde/src/gen/thrift/gen-cpp/serde_constants.cpp
@@ -89,6 +89,8 @@ serdeConstants::serdeConstants() {
 
   LIST_COLUMN_TYPES = "columns.types";
 
+  TIMESTAMP_FORMATS = "timestamp.formats";
+
   PrimitiveTypes.insert("void");
   PrimitiveTypes.insert("boolean");
   PrimitiveTypes.insert("tinyint");
diff --git a/serde/src/gen/thrift/gen-cpp/serde_constants.h b/serde/src/gen/thrift/gen-cpp/serde_constants.h
index 1455382..418f666 100644
--- a/serde/src/gen/thrift/gen-cpp/serde_constants.h
+++ b/serde/src/gen/thrift/gen-cpp/serde_constants.h
@@ -54,6 +54,7 @@ class serdeConstants {
   std::string UNION_TYPE_NAME;
   std::string LIST_COLUMNS;
   std::string LIST_COLUMN_TYPES;
+  std::string TIMESTAMP_FORMATS;
   std::set<std::string>  PrimitiveTypes;
   std::set<std::string>  CollectionTypes;
   std::set<std::string>  IntegralTypes;
diff --git a/serde/src/gen/thrift/gen-php/org/apache/hadoop/hive/serde/Types.php b/serde/src/gen/thrift/gen-php/org/apache/hadoop/hive/serde/Types.php
index 3c2f0a9..c1d8085 100644
--- a/serde/src/gen/thrift/gen-php/org/apache/hadoop/hive/serde/Types.php
+++ b/serde/src/gen/thrift/gen-php/org/apache/hadoop/hive/serde/Types.php
@@ -94,6 +94,8 @@ $GLOBALS['serde_CONSTANTS']['LIST_COLUMNS'] = "columns";
 
 $GLOBALS['serde_CONSTANTS']['LIST_COLUMN_TYPES'] = "columns.types";
 
+$GLOBALS['serde_CONSTANTS']['TIMESTAMP_FORMATS'] = "timestamp.formats";
+
 $GLOBALS['serde_CONSTANTS']['PrimitiveTypes'] = array(
   "void" => true,
   "boolean" => true,
diff --git a/serde/src/gen/thrift/gen-py/org_apache_hadoop_hive_serde/constants.py b/serde/src/gen/thrift/gen-py/org_apache_hadoop_hive_serde/constants.py
index 08ca294..7d7608f 100644
--- a/serde/src/gen/thrift/gen-py/org_apache_hadoop_hive_serde/constants.py
+++ b/serde/src/gen/thrift/gen-py/org_apache_hadoop_hive_serde/constants.py
@@ -48,6 +48,7 @@
 UNION_TYPE_NAME = "uniontype"
 LIST_COLUMNS = "columns"
 LIST_COLUMN_TYPES = "columns.types"
+TIMESTAMP_FORMATS = "timestamp.formats"
 PrimitiveTypes = set([
   "void",
   "boolean",
diff --git a/serde/src/gen/thrift/gen-rb/serde_constants.rb b/serde/src/gen/thrift/gen-rb/serde_constants.rb
index 40375f5..33f12b0 100644
--- a/serde/src/gen/thrift/gen-rb/serde_constants.rb
+++ b/serde/src/gen/thrift/gen-rb/serde_constants.rb
@@ -85,6 +85,8 @@ LIST_COLUMNS = %q"columns"
 
 LIST_COLUMN_TYPES = %q"columns.types"
 
+TIMESTAMP_FORMATS = %q"timestamp.formats"
+
 PrimitiveTypes = Set.new([
   %q"void",
   %q"boolean",
diff --git a/service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote b/service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote
old mode 100644
new mode 100755
diff --git a/service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote b/service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote
old mode 100644
new mode 100755
-- 
1.7.9.5

